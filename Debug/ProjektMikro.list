
ProjektMikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ebc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08006060  08006060  00016060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d0  080062d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080062d0  080062d0  000162d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d8  080062d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080062e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016d68  20000078  08006354  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20016de0  08006354  00026de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091b0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001896  00000000  00000000  00029254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016357  00000000  00000000  0002ba40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fe7  00000000  00000000  00041d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ad6d  00000000  00000000  00048d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3aeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000d3b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006044 	.word	0x08006044

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006044 	.word	0x08006044

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MySysTick>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void MySysTick(int arg){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	static uint16_t ms=0;
	ms++;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MySysTick+0x38>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MySysTick+0x38>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	if(ms>arg)
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MySysTick+0x38>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	da05      	bge.n	8000ed8 <MySysTick+0x2c>
	{
		ms=0;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MySysTick+0x38>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	801a      	strh	r2, [r3, #0]
		ms_set=1;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <MySysTick+0x3c>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
	}

}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	200000ac 	.word	0x200000ac
 8000ee8:	20000094 	.word	0x20000094

08000eec <USART_RX_IsEmpty>:

uint8_t USART_RX_IsEmpty(){
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	if(USART_RX_Busy == USART_RX_Empty)
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <USART_RX_IsEmpty+0x20>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <USART_RX_IsEmpty+0x24>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d101      	bne.n	8000f00 <USART_RX_IsEmpty+0x14>
	{
		return 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e000      	b.n	8000f02 <USART_RX_IsEmpty+0x16>
	}else{
		return 1;
 8000f00:	2301      	movs	r3, #1
	}
}//Funkcja sprawdzajacy czy bufor odbiorczy jest pusty
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200000a4 	.word	0x200000a4
 8000f10:	200000a0 	.word	0x200000a0

08000f14 <USART_GC>:

uint8_t USART_GC(){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(USART_RX_Empty!=USART_RX_Busy)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <USART_GC+0x48>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <USART_GC+0x4c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d013      	beq.n	8000f4e <USART_GC+0x3a>
	{
		tmp = USART_RxBuf[USART_RX_Busy];
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <USART_GC+0x4c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <USART_GC+0x50>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	71fb      	strb	r3, [r7, #7]
		USART_RX_Busy++;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <USART_GC+0x4c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <USART_GC+0x4c>)
 8000f38:	6013      	str	r3, [r2, #0]
		if(USART_RX_Busy >= USART_RXBUF_LEN) USART_RX_Busy =0;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <USART_GC+0x4c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f42:	db02      	blt.n	8000f4a <USART_GC+0x36>
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <USART_GC+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
		return tmp;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	e000      	b.n	8000f50 <USART_GC+0x3c>
	}else
	{
		return 0;
 8000f4e:	2300      	movs	r3, #0
	}
} //Funkcja zwracająca znak
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200000a0 	.word	0x200000a0
 8000f60:	200000a4 	.word	0x200000a4
 8000f64:	20002c34 	.word	0x20002c34

08000f68 <USART_GD>:

uint8_t USART_GD(char *buf){
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	static uint8_t bf[500];
	static uint8_t index=0;
	int i;
	uint8_t len_com;
	while(USART_RX_IsEmpty())
 8000f70:	e05b      	b.n	800102a <USART_GD+0xc2>
	{
		bf[index] = USART_GC();
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <USART_GD+0xd8>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461c      	mov	r4, r3
 8000f78:	f7ff ffcc 	bl	8000f14 <USART_GC>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <USART_GD+0xdc>)
 8000f82:	551a      	strb	r2, [r3, r4]
		if (frame_read == 1 && bf[index] == FRSTART) {
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <USART_GD+0xe0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d110      	bne.n	8000fae <USART_GD+0x46>
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <USART_GD+0xd8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <USART_GD+0xdc>)
 8000f94:	5c9b      	ldrb	r3, [r3, r2]
 8000f96:	2b3a      	cmp	r3, #58	; 0x3a
 8000f98:	d109      	bne.n	8000fae <USART_GD+0x46>
			bf[0] = bf[index];
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <USART_GD+0xd8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <USART_GD+0xdc>)
 8000fa2:	5c9a      	ldrb	r2, [r3, r2]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <USART_GD+0xdc>)
 8000fa6:	701a      	strb	r2, [r3, #0]
			index = 0;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <USART_GD+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
		}
		if (frame_read == 0) {
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <USART_GD+0xe0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <USART_GD+0x62>
			if (bf[index] == FRSTART) {
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <USART_GD+0xd8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <USART_GD+0xdc>)
 8000fbe:	5c9b      	ldrb	r3, [r3, r2]
 8000fc0:	2b3a      	cmp	r3, #58	; 0x3a
 8000fc2:	d102      	bne.n	8000fca <USART_GD+0x62>
				frame_read = 1;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <USART_GD+0xe0>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
			}
		}
		if (frame_read == 1) {
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <USART_GD+0xe0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d12b      	bne.n	800102a <USART_GD+0xc2>
			if ((bf[index] == FREND)) {
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <USART_GD+0xd8>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <USART_GD+0xdc>)
 8000fda:	5c9b      	ldrb	r3, [r3, r2]
 8000fdc:	2b3b      	cmp	r3, #59	; 0x3b
 8000fde:	d11e      	bne.n	800101e <USART_GD+0xb6>
				for (i = 0; i <= index; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e00a      	b.n	8000ffc <USART_GD+0x94>
					buf[i] = bf[i];
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	4915      	ldr	r1, [pc, #84]	; (8001044 <USART_GD+0xdc>)
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	440a      	add	r2, r1
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i <= index; i++) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <USART_GD+0xd8>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4293      	cmp	r3, r2
 8001006:	ddee      	ble.n	8000fe6 <USART_GD+0x7e>
				}
				len_com = index;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <USART_GD+0xd8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	72fb      	strb	r3, [r7, #11]
				index = 0;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <USART_GD+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
				frame_read = 0;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <USART_GD+0xe0>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
				return len_com;
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	e00b      	b.n	8001036 <USART_GD+0xce>
			} else {
				index++;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <USART_GD+0xd8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <USART_GD+0xd8>)
 8001028:	701a      	strb	r2, [r3, #0]
	while(USART_RX_IsEmpty())
 800102a:	f7ff ff5f 	bl	8000eec <USART_RX_IsEmpty>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d19e      	bne.n	8000f72 <USART_GD+0xa>
					index = 0;
				}
			}
		}
	}
	return 0;
 8001034:	2300      	movs	r3, #0
}//Funkcja odbierająca dane
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	200000ae 	.word	0x200000ae
 8001044:	200000b0 	.word	0x200000b0
 8001048:	200000a8 	.word	0x200000a8

0800104c <USART_send>:

void USART_send(char* format,...){
 800104c:	b40f      	push	{r0, r1, r2, r3}
 800104e:	b580      	push	{r7, lr}
 8001050:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001054:	af00      	add	r7, sp, #0
	char tmp_s[512];
	int i;
	__IO int index;
	va_list arglist;
	va_start(arglist,format);
 8001056:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_s,format,arglist);
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	f107 000c 	add.w	r0, r7, #12
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800106a:	f003 fbf1 	bl	8004850 <vsiprintf>
	va_end(arglist);
	index=USART_TX_Empty;
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <USART_send+0x100>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_s);i++){
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800107e:	e020      	b.n	80010c2 <USART_send+0x76>
		USART_TxBuf[index] = tmp_s[i];
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f107 010c 	add.w	r1, r7, #12
 800108a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800108e:	440a      	add	r2, r1
 8001090:	7811      	ldrb	r1, [r2, #0]
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <USART_send+0x104>)
 8001094:	54d1      	strb	r1, [r2, r3]
		index++;
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	601a      	str	r2, [r3, #0]
		if(index >= USART_TXBUF_LEN) index=0;
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010ae:	db03      	blt.n	80010b8 <USART_send+0x6c>
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_s);i++){
 80010b8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80010bc:	3301      	adds	r3, #1
 80010be:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f894 	bl	80001f4 <strlen>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d8d4      	bhi.n	8001080 <USART_send+0x34>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d6:	b672      	cpsid	i
	}

	__disable_irq();
	if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){ //2 parametr sprawdza bufor nadajnika
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <USART_send+0x100>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <USART_send+0x108>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d125      	bne.n	8001130 <USART_send+0xe4>
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <USART_send+0x10c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	2b80      	cmp	r3, #128	; 0x80
 80010f0:	d11e      	bne.n	8001130 <USART_send+0xe4>
		USART_TX_Empty = index;
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <USART_send+0x100>)
 80010fa:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <USART_send+0x108>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a13      	ldr	r2, [pc, #76]	; (8001150 <USART_send+0x104>)
 8001102:	5cd2      	ldrb	r2, [r2, r3]
 8001104:	1cfb      	adds	r3, r7, #3
 8001106:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <USART_send+0x108>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <USART_send+0x108>)
 8001110:	6013      	str	r3, [r2, #0]
		if(USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <USART_send+0x108>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800111a:	db02      	blt.n	8001122 <USART_send+0xd6>
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <USART_send+0x108>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2,&tmp,1);
 8001122:	1cfb      	adds	r3, r7, #3
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <USART_send+0x10c>)
 800112a:	f002 fcfa 	bl	8003b22 <HAL_UART_Transmit_IT>
	if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){ //2 parametr sprawdza bufor nadajnika
 800112e:	e004      	b.n	800113a <USART_send+0xee>
	}else{
		USART_TX_Empty = index;
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <USART_send+0x100>)
 8001138:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800113a:	b662      	cpsie	i
	}
	__enable_irq();
}//Funkcja wysyłająca dane
 800113c:	bf00      	nop
 800113e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001148:	b004      	add	sp, #16
 800114a:	4770      	bx	lr
 800114c:	20000098 	.word	0x20000098
 8001150:	20002464 	.word	0x20002464
 8001154:	2000009c 	.word	0x2000009c
 8001158:	20016d90 	.word	0x20016d90

0800115c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <HAL_UART_TxCpltCallback+0x58>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d11e      	bne.n	80011aa <HAL_UART_TxCpltCallback+0x4e>
		if(USART_TX_Empty != USART_TX_Busy){
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_UART_TxCpltCallback+0x5c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_UART_TxCpltCallback+0x60>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d018      	beq.n	80011aa <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp= USART_TxBuf[USART_TX_Busy];
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_UART_TxCpltCallback+0x60>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_UART_TxCpltCallback+0x64>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	73fb      	strb	r3, [r7, #15]
			USART_TX_Busy++;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_TxCpltCallback+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_UART_TxCpltCallback+0x60>)
 800118a:	6013      	str	r3, [r2, #0]
			if(USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy =0;
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_UART_TxCpltCallback+0x60>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001194:	db02      	blt.n	800119c <HAL_UART_TxCpltCallback+0x40>
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_UART_TxCpltCallback+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp , 1);
 800119c:	f107 030f 	add.w	r3, r7, #15
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <HAL_UART_TxCpltCallback+0x58>)
 80011a6:	f002 fcbc 	bl	8003b22 <HAL_UART_Transmit_IT>
		}
	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20016d90 	.word	0x20016d90
 80011b8:	20000098 	.word	0x20000098
 80011bc:	2000009c 	.word	0x2000009c
 80011c0:	20002464 	.word	0x20002464

080011c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_UART_RxCpltCallback+0x44>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d115      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x3c>
		USART_RX_Empty++;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011dc:	6013      	str	r3, [r2, #0]
		if(USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty=0;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011e6:	db02      	blt.n	80011ee <HAL_UART_RxCpltCallback+0x2a>
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_UART_RxCpltCallback+0x48>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_UART_RxCpltCallback+0x4c>)
 80011f4:	4413      	add	r3, r2
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <HAL_UART_RxCpltCallback+0x44>)
 80011fc:	f002 fcd6 	bl	8003bac <HAL_UART_Receive_IT>
	}
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20016d90 	.word	0x20016d90
 800120c:	200000a0 	.word	0x200000a0
 8001210:	20002c34 	.word	0x20002c34

08001214 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	int i;
	suma_dma=0;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_ADC_ConvCpltCallback+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	for(i= 2048 ; i<4096 ; i++){
 8001222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e00c      	b.n	8001244 <HAL_ADC_ConvCpltCallback+0x30>
		suma_dma += dma_buff[i];
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_ADC_ConvCpltCallback+0x6c>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001232:	461a      	mov	r2, r3
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_ADC_ConvCpltCallback+0x68>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_ADC_ConvCpltCallback+0x68>)
 800123c:	6013      	str	r3, [r2, #0]
	for(i= 2048 ; i<4096 ; i++){
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800124a:	dbee      	blt.n	800122a <HAL_ADC_ConvCpltCallback+0x16>
	}
	temp = (((suma_dma/2048)*5)/4095)*100;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_ADC_ConvCpltCallback+0x68>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0ada      	lsrs	r2, r3, #11
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	441a      	add	r2, r3
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_ADC_ConvCpltCallback+0x70>)
 800125a:	fba3 1302 	umull	r1, r3, r3, r2
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	0852      	lsrs	r2, r2, #1
 8001262:	4413      	add	r3, r2
 8001264:	0adb      	lsrs	r3, r3, #11
 8001266:	2264      	movs	r2, #100	; 0x64
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_ADC_ConvCpltCallback+0x74>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20016dd0 	.word	0x20016dd0
 8001280:	200003b8 	.word	0x200003b8
 8001284:	00100101 	.word	0x00100101
 8001288:	200003b4 	.word	0x200003b4

0800128c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	int i;
	suma_dma=0;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
	for(i= 0 ; i<2048 ; i++){
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e00c      	b.n	80012ba <HAL_ADC_ConvHalfCpltCallback+0x2e>
		suma_dma += dma_buff[i];
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80012b2:	6013      	str	r3, [r2, #0]
	for(i= 0 ; i<2048 ; i++){
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012c0:	dbee      	blt.n	80012a0 <HAL_ADC_ConvHalfCpltCallback+0x14>
	}
	temp = (((suma_dma/2048)*5)/4095)*100;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0ada      	lsrs	r2, r3, #11
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	441a      	add	r2, r3
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80012d0:	fba3 1302 	umull	r1, r3, r3, r2
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	0852      	lsrs	r2, r2, #1
 80012d8:	4413      	add	r3, r2
 80012da:	0adb      	lsrs	r3, r3, #11
 80012dc:	2264      	movs	r2, #100	; 0x64
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20016dd0 	.word	0x20016dd0
 80012f8:	200003b8 	.word	0x200003b8
 80012fc:	00100101 	.word	0x00100101
 8001300:	200003b4 	.word	0x200003b4
 8001304:	00000000 	.word	0x00000000

08001308 <generacja_sinusa>:


void generacja_sinusa(double  *tablica_wartosci ) {
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	int n,f=1; // n = ilość próbek na jeden okres sygnału
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
	double faza_sygnalu;
	uint16_t i = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	83fb      	strh	r3, [r7, #30]
	n = fs / f; //obliczenie ilości próbek w momencie zmiany f
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <generacja_sinusa+0xd8>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	fb92 f3f3 	sdiv	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]

	while (i < n) {
 8001326:	e04a      	b.n	80013be <generacja_sinusa+0xb6>
		faza_sygnalu = ((i * 2 * PI * f) / fs);
 8001328:	8bfb      	ldrh	r3, [r7, #30]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f911 	bl	8000554 <__aeabi_i2d>
 8001332:	a429      	add	r4, pc, #164	; (adr r4, 80013d8 <generacja_sinusa+0xd0>)
 8001334:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	f7ff f974 	bl	8000628 <__aeabi_dmul>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4625      	mov	r5, r4
 8001346:	461c      	mov	r4, r3
 8001348:	69b8      	ldr	r0, [r7, #24]
 800134a:	f7ff f903 	bl	8000554 <__aeabi_i2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4620      	mov	r0, r4
 8001354:	4629      	mov	r1, r5
 8001356:	f7ff f967 	bl	8000628 <__aeabi_dmul>
 800135a:	4603      	mov	r3, r0
 800135c:	460c      	mov	r4, r1
 800135e:	4625      	mov	r5, r4
 8001360:	461c      	mov	r4, r3
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <generacja_sinusa+0xd8>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8f4 	bl	8000554 <__aeabi_i2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7ff fa82 	bl	800087c <__aeabi_ddiv>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		*(tablica_wartosci+i) = 2048 + (sin(faza_sygnalu) * 2048);
 8001380:	ed97 0b02 	vldr	d0, [r7, #8]
 8001384:	f003 fe4c 	bl	8005020 <sin>
 8001388:	ec51 0b10 	vmov	r0, r1, d0
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <generacja_sinusa+0xdc>)
 8001392:	f7ff f949 	bl	8000628 <__aeabi_dmul>
 8001396:	4603      	mov	r3, r0
 8001398:	460c      	mov	r4, r1
 800139a:	4618      	mov	r0, r3
 800139c:	4621      	mov	r1, r4
 800139e:	8bfb      	ldrh	r3, [r7, #30]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	18d5      	adds	r5, r2, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <generacja_sinusa+0xdc>)
 80013ac:	f7fe ff86 	bl	80002bc <__adddf3>
 80013b0:	4603      	mov	r3, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	e9c5 3400 	strd	r3, r4, [r5]
		i = i + 1;
 80013b8:	8bfb      	ldrh	r3, [r7, #30]
 80013ba:	3301      	adds	r3, #1
 80013bc:	83fb      	strh	r3, [r7, #30]
	while (i < n) {
 80013be:	8bfb      	ldrh	r3, [r7, #30]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dcb0      	bgt.n	8001328 <generacja_sinusa+0x20>
	}
	i = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	83fb      	strh	r3, [r7, #30]
}// Funkcja generująca sinusa
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdb0      	pop	{r4, r5, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	51eb851f 	.word	0x51eb851f
 80013dc:	40091eb8 	.word	0x40091eb8
 80013e0:	20000000 	.word	0x20000000
 80013e4:	40a00000 	.word	0x40a00000

080013e8 <clean_frame>:


void clean_frame(char * tab ,int len){
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]

	for(int i = 0 ; i<=len ; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e007      	b.n	8001408 <clean_frame+0x20>
	{
		*(tab+i) = '\0';
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<=len ; i++)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	ddf3      	ble.n	80013f8 <clean_frame+0x10>
	}
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <clean_after_all>:


void clean_after_all(int len){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	clean_frame(frame, len);
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	480a      	ldr	r0, [pc, #40]	; (8001450 <clean_after_all+0x34>)
 8001428:	f7ff ffde 	bl	80013e8 <clean_frame>
	clean_frame(command, (len - 6));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b06      	subs	r3, #6
 8001430:	4619      	mov	r1, r3
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <clean_after_all+0x38>)
 8001434:	f7ff ffd8 	bl	80013e8 <clean_frame>
	clean_frame(sender_name, 3);
 8001438:	2103      	movs	r1, #3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <clean_after_all+0x3c>)
 800143c:	f7ff ffd4 	bl	80013e8 <clean_frame>
	clean_frame(receiver_name, 3);
 8001440:	2103      	movs	r1, #3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <clean_after_all+0x40>)
 8001444:	f7ff ffd0 	bl	80013e8 <clean_frame>

}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20003404 	.word	0x20003404
 8001454:	200002b4 	.word	0x200002b4
 8001458:	200002b0 	.word	0x200002b0
 800145c:	20002400 	.word	0x20002400

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f000 fc44 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f92a 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 fa2e 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001474:	f000 fa0c 	bl	8001890 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001478:	f000 f9e0 	bl	800183c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800147c:	f000 f98c 	bl	8001798 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);
 8001480:	2201      	movs	r2, #1
 8001482:	497f      	ldr	r1, [pc, #508]	; (8001680 <main+0x220>)
 8001484:	487f      	ldr	r0, [pc, #508]	; (8001684 <main+0x224>)
 8001486:	f002 fb91 	bl	8003bac <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, dma_buff , 4096); // Start ADC z DMA
 800148a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800148e:	497e      	ldr	r1, [pc, #504]	; (8001688 <main+0x228>)
 8001490:	487e      	ldr	r0, [pc, #504]	; (800168c <main+0x22c>)
 8001492:	f000 fce5 	bl	8001e60 <HAL_ADC_Start_DMA>

  int len=0;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  char bx[500];
  clean_frame(bx,499);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	f240 11f3 	movw	r1, #499	; 0x1f3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffa0 	bl	80013e8 <clean_frame>
  generacja_sinusa(tablica_wartosci);
 80014a8:	4879      	ldr	r0, [pc, #484]	; (8001690 <main+0x230>)
 80014aa:	f7ff ff2d 	bl	8001308 <generacja_sinusa>
  clean_frame(frame, len);
 80014ae:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 80014b2:	4878      	ldr	r0, [pc, #480]	; (8001694 <main+0x234>)
 80014b4:	f7ff ff98 	bl	80013e8 <clean_frame>
	while (1) {

		len = USART_GD(bx);
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fd54 	bl	8000f68 <USART_GD>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		int y = 0, i = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		if (len > 0) {
 80014d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	ddee      	ble.n	80014b8 <main+0x58>
			while (i <= len) {
 80014da:	e0c7      	b.n	800166c <main+0x20c>
				if (len < 7) {
 80014dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014e0:	2b06      	cmp	r3, #6
 80014e2:	f340 80cb 	ble.w	800167c <main+0x21c>
					break;
				}
				char singlefrchar = bx[i];
 80014e6:	1d3a      	adds	r2, r7, #4
 80014e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
				switch (singlefrchar) {
 80014f4:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80014f8:	2b3b      	cmp	r3, #59	; 0x3b
 80014fa:	d046      	beq.n	800158a <main+0x12a>
 80014fc:	2b5c      	cmp	r3, #92	; 0x5c
 80014fe:	f040 80a0 	bne.w	8001642 <main+0x1e2>
					case FRCOD: {
						if (bx[i + 1] == FRCODS) {
 8001502:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001506:	3301      	adds	r3, #1
 8001508:	1d3a      	adds	r2, r7, #4
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	2b61      	cmp	r3, #97	; 0x61
 800150e:	d10b      	bne.n	8001528 <main+0xc8>
							frame[y] = FRSTART;
 8001510:	4a60      	ldr	r2, [pc, #384]	; (8001694 <main+0x234>)
 8001512:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001516:	4413      	add	r3, r2
 8001518:	223a      	movs	r2, #58	; 0x3a
 800151a:	701a      	strb	r2, [r3, #0]
							i++;
 800151c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001520:	3301      	adds	r3, #1
 8001522:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
							i++;
						} else {
							i = len;
							clean_frame(bx,len);
						}
						break;
 8001526:	e097      	b.n	8001658 <main+0x1f8>
						} else if (bx[i + 1] == FRCODE) {
 8001528:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800152c:	3301      	adds	r3, #1
 800152e:	1d3a      	adds	r2, r7, #4
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	2b62      	cmp	r3, #98	; 0x62
 8001534:	d10b      	bne.n	800154e <main+0xee>
							frame[y] = FREND;
 8001536:	4a57      	ldr	r2, [pc, #348]	; (8001694 <main+0x234>)
 8001538:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800153c:	4413      	add	r3, r2
 800153e:	223b      	movs	r2, #59	; 0x3b
 8001540:	701a      	strb	r2, [r3, #0]
							i++;
 8001542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001546:	3301      	adds	r3, #1
 8001548:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
						break;
 800154c:	e084      	b.n	8001658 <main+0x1f8>
						} else if (bx[i + 1] == FRCOD) {
 800154e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001552:	3301      	adds	r3, #1
 8001554:	1d3a      	adds	r2, r7, #4
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	2b5c      	cmp	r3, #92	; 0x5c
 800155a:	d10b      	bne.n	8001574 <main+0x114>
							frame[y] = FRCOD;
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <main+0x234>)
 800155e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001562:	4413      	add	r3, r2
 8001564:	225c      	movs	r2, #92	; 0x5c
 8001566:	701a      	strb	r2, [r3, #0]
							i++;
 8001568:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800156c:	3301      	adds	r3, #1
 800156e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
						break;
 8001572:	e071      	b.n	8001658 <main+0x1f8>
							i = len;
 8001574:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001578:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
							clean_frame(bx,len);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff30 	bl	80013e8 <clean_frame>
						break;
 8001588:	e066      	b.n	8001658 <main+0x1f8>
					}
					case FREND: {
	//					funkcja wykonująca komende tutaj prolly
						memcpy(sender_name, &frame[1], 3);
 800158a:	4a43      	ldr	r2, [pc, #268]	; (8001698 <main+0x238>)
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <main+0x234>)
 800158e:	3301      	adds	r3, #1
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	8011      	strh	r1, [r2, #0]
 8001596:	7093      	strb	r3, [r2, #2]
						memcpy(receiver_name, &frame[4], 3);
 8001598:	4a40      	ldr	r2, [pc, #256]	; (800169c <main+0x23c>)
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <main+0x234>)
 800159c:	3304      	adds	r3, #4
 800159e:	8819      	ldrh	r1, [r3, #0]
 80015a0:	789b      	ldrb	r3, [r3, #2]
 80015a2:	8011      	strh	r1, [r2, #0]
 80015a4:	7093      	strb	r3, [r2, #2]
						memcpy(command, &frame[7], (y - 6));
 80015a6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015aa:	3b06      	subs	r3, #6
 80015ac:	461a      	mov	r2, r3
 80015ae:	493c      	ldr	r1, [pc, #240]	; (80016a0 <main+0x240>)
 80015b0:	483c      	ldr	r0, [pc, #240]	; (80016a4 <main+0x244>)
 80015b2:	f003 f923 	bl	80047fc <memcpy>
	//					wykonywanie komendy
						if (strcmp("STM", receiver_name) == 0
 80015b6:	4939      	ldr	r1, [pc, #228]	; (800169c <main+0x23c>)
 80015b8:	483b      	ldr	r0, [pc, #236]	; (80016a8 <main+0x248>)
 80015ba:	f7fe fe11 	bl	80001e0 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d137      	bne.n	8001634 <main+0x1d4>
								&& strcmp("STM", sender_name) != 0) {
 80015c4:	4934      	ldr	r1, [pc, #208]	; (8001698 <main+0x238>)
 80015c6:	4838      	ldr	r0, [pc, #224]	; (80016a8 <main+0x248>)
 80015c8:	f7fe fe0a 	bl	80001e0 <strcmp>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d030      	beq.n	8001634 <main+0x1d4>
							if (command[0] == 0) {
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <main+0x244>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <main+0x18c>
								USART_send(":STM%sFREMPTY;\r\n", sender_name);
 80015da:	492f      	ldr	r1, [pc, #188]	; (8001698 <main+0x238>)
 80015dc:	4833      	ldr	r0, [pc, #204]	; (80016ac <main+0x24c>)
 80015de:	f7ff fd35 	bl	800104c <USART_send>
								clean_after_all(y);
 80015e2:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80015e6:	f7ff ff19 	bl	800141c <clean_after_all>
							if (command[0] == 0) {
 80015ea:	e028      	b.n	800163e <main+0x1de>
							} else {
								if (strcmp("temp", command) == 0) {
 80015ec:	492d      	ldr	r1, [pc, #180]	; (80016a4 <main+0x244>)
 80015ee:	4830      	ldr	r0, [pc, #192]	; (80016b0 <main+0x250>)
 80015f0:	f7fe fdf6 	bl	80001e0 <strcmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10b      	bne.n	8001612 <main+0x1b2>
									USART_send(":STM%stemp,%i;\r\n", sender_name,
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <main+0x254>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4925      	ldr	r1, [pc, #148]	; (8001698 <main+0x238>)
 8001602:	482d      	ldr	r0, [pc, #180]	; (80016b8 <main+0x258>)
 8001604:	f7ff fd22 	bl	800104c <USART_send>
											temp);
									clean_after_all(y);
 8001608:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800160c:	f7ff ff06 	bl	800141c <clean_after_all>
							if (command[0] == 0) {
 8001610:	e015      	b.n	800163e <main+0x1de>
								}else if(strcmp("sin",command) == 0){
 8001612:	4924      	ldr	r1, [pc, #144]	; (80016a4 <main+0x244>)
 8001614:	4829      	ldr	r0, [pc, #164]	; (80016bc <main+0x25c>)
 8001616:	f7fe fde3 	bl	80001e0 <strcmp>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00e      	beq.n	800163e <main+0x1de>

								}else {
									USART_send(":STM%s%s;\r\n", sender_name,
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <main+0x244>)
 8001622:	491d      	ldr	r1, [pc, #116]	; (8001698 <main+0x238>)
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <main+0x260>)
 8001626:	f7ff fd11 	bl	800104c <USART_send>
											command);
									clean_after_all(y);
 800162a:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800162e:	f7ff fef5 	bl	800141c <clean_after_all>
							if (command[0] == 0) {
 8001632:	e004      	b.n	800163e <main+0x1de>
								}
							}
						} else {
							clean_after_all(y);
 8001634:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001638:	f7ff fef0 	bl	800141c <clean_after_all>
						}
						break;
 800163c:	e00c      	b.n	8001658 <main+0x1f8>
							if (command[0] == 0) {
 800163e:	bf00      	nop
						break;
 8001640:	e00a      	b.n	8001658 <main+0x1f8>
					}
					default: {
						frame[y] = bx[i];
 8001642:	1d3a      	adds	r2, r7, #4
 8001644:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001648:	4413      	add	r3, r2
 800164a:	7819      	ldrb	r1, [r3, #0]
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <main+0x234>)
 800164e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001652:	4413      	add	r3, r2
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
					}
				}
				y++;
 8001658:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800165c:	3301      	adds	r3, #1
 800165e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
				i++;
 8001662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001666:	3301      	adds	r3, #1
 8001668:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
			while (i <= len) {
 800166c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8001670:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001674:	429a      	cmp	r2, r3
 8001676:	f77f af31 	ble.w	80014dc <main+0x7c>
 800167a:	e71d      	b.n	80014b8 <main+0x58>
					break;
 800167c:	bf00      	nop
	while (1) {
 800167e:	e71b      	b.n	80014b8 <main+0x58>
 8001680:	20002c34 	.word	0x20002c34
 8001684:	20016d90 	.word	0x20016d90
 8001688:	200003b8 	.word	0x200003b8
 800168c:	200023b8 	.word	0x200023b8
 8001690:	20003510 	.word	0x20003510
 8001694:	20003404 	.word	0x20003404
 8001698:	200002b0 	.word	0x200002b0
 800169c:	20002400 	.word	0x20002400
 80016a0:	2000340b 	.word	0x2000340b
 80016a4:	200002b4 	.word	0x200002b4
 80016a8:	08006060 	.word	0x08006060
 80016ac:	08006064 	.word	0x08006064
 80016b0:	08006078 	.word	0x08006078
 80016b4:	200003b4 	.word	0x200003b4
 80016b8:	08006080 	.word	0x08006080
 80016bc:	08006094 	.word	0x08006094
 80016c0:	08006098 	.word	0x08006098

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f89d 	bl	8004812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <SystemClock_Config+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <SystemClock_Config+0xcc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <SystemClock_Config+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <SystemClock_Config+0xd0>)
 800170e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <SystemClock_Config+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001728:	2310      	movs	r3, #16
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172c:	2302      	movs	r3, #2
 800172e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001730:	2300      	movs	r3, #0
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001734:	2310      	movs	r3, #16
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800173e:	2304      	movs	r3, #4
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001742:	2304      	movs	r3, #4
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fd3a 	bl	80031c4 <HAL_RCC_OscConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001756:	f000 f915 	bl	8001984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175a:	230f      	movs	r3, #15
 800175c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2102      	movs	r1, #2
 8001776:	4618      	mov	r0, r3
 8001778:	f001 ff94 	bl	80036a4 <HAL_RCC_ClockConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001782:	f000 f8ff 	bl	8001984 <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	; 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_ADC1_Init+0x98>)
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <MX_ADC1_Init+0x9c>)
 80017ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_ADC1_Init+0x98>)
 80017b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <MX_ADC1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_ADC1_Init+0x98>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_ADC1_Init+0x98>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_ADC1_Init+0x98>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_ADC1_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_ADC1_Init+0x98>)
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <MX_ADC1_Init+0xa0>)
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_ADC1_Init+0x98>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_ADC1_Init+0x98>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_ADC1_Init+0x98>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_ADC1_Init+0x98>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <MX_ADC1_Init+0x98>)
 80017fa:	f000 faed 	bl	8001dd8 <HAL_ADC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001804:	f000 f8be 	bl	8001984 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001808:	2301      	movs	r3, #1
 800180a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800180c:	2301      	movs	r3, #1
 800180e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001810:	2307      	movs	r3, #7
 8001812:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_ADC1_Init+0x98>)
 800181a:	f000 fbff 	bl	800201c <HAL_ADC_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001824:	f000 f8ae 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200023b8 	.word	0x200023b8
 8001834:	40012000 	.word	0x40012000
 8001838:	0f000001 	.word	0x0f000001

0800183c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f002 f908 	bl	8003a88 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f881 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20016d90 	.word	0x20016d90
 800188c:	40004400 	.word	0x40004400

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_DMA_Init+0x3c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <MX_DMA_Init+0x3c>)
 80018a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_DMA_Init+0x3c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2038      	movs	r0, #56	; 0x38
 80018b8:	f000 ff3b 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018bc:	2038      	movs	r0, #56	; 0x38
 80018be:	f000 ff54 	bl	800276a <HAL_NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <MX_GPIO_Init+0xa8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a22      	ldr	r2, [pc, #136]	; (8001978 <MX_GPIO_Init+0xa8>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <MX_GPIO_Init+0xa8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <MX_GPIO_Init+0xa8>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <MX_GPIO_Init+0xa8>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_GPIO_Init+0xa8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SW_BLUE_Pin */
  GPIO_InitStruct.Pin = SW_BLUE_Pin;
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <MX_GPIO_Init+0xac>)
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_GPIO_Init+0xb0>)
 800196c:	f001 faa8 	bl	8002ec0 <HAL_GPIO_Init>

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	10210000 	.word	0x10210000
 8001980:	40020800 	.word	0x40020800

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019d2:	2007      	movs	r0, #7
 80019d4:	f000 fea2 	bl	800271c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <HAL_ADC_MspInit+0xdc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d157      	bne.n	8001ab6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a42:	2303      	movs	r3, #3
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481d      	ldr	r0, [pc, #116]	; (8001ac8 <HAL_ADC_MspInit+0xe4>)
 8001a52:	f001 fa35 	bl	8002ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_ADC_MspInit+0xec>)
 8001a5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a9a:	480c      	ldr	r0, [pc, #48]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001a9c:	f000 fe80 	bl	80027a0 <HAL_DMA_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001aa6:	f7ff ff6d 	bl	8001984 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001aae:	639a      	str	r2, [r3, #56]	; 0x38
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <HAL_ADC_MspInit+0xe8>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40012000 	.word	0x40012000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	20002404 	.word	0x20002404
 8001ad0:	40026410 	.word	0x40026410

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_UART_MspInit+0x94>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d133      	bne.n	8001b5e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_UART_MspInit+0x98>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_UART_MspInit+0x98>)
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x98>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x98>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0x98>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b2e:	230c      	movs	r3, #12
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_UART_MspInit+0x9c>)
 8001b4a:	f001 f9b9 	bl	8002ec0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2026      	movs	r0, #38	; 0x26
 8001b54:	f000 fded 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b58:	2026      	movs	r0, #38	; 0x26
 8001b5a:	f000 fe06 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MySysTick(arg);
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SysTick_Handler+0x18>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f96d 	bl	8000eac <MySysTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd2:	f000 f8e1 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20016dd4 	.word	0x20016dd4

08001be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USART2_IRQHandler+0x10>)
 8001be6:	f002 f837 	bl	8003c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20016d90 	.word	0x20016d90

08001bf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DMA2_Stream0_IRQHandler+0x10>)
 8001bfa:	f000 fef9 	bl	80029f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20002404 	.word	0x20002404

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f002 fdb6 	bl	80047a8 <__errno>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	230c      	movs	r3, #12
 8001c40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	200002a4 	.word	0x200002a4
 8001c70:	20016de0 	.word	0x20016de0

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <SystemInit+0x28>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <SystemInit+0x28>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SystemInit+0x28>)
 8001c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ca6:	e003      	b.n	8001cb0 <LoopCopyDataInit>

08001ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cae:	3104      	adds	r1, #4

08001cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cb8:	d3f6      	bcc.n	8001ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cbc:	e002      	b.n	8001cc4 <LoopFillZerobss>

08001cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cc0:	f842 3b04 	str.w	r3, [r2], #4

08001cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cc6:	429a      	cmp	r2, r3

  bcc  FillZerobss
 8001cc8:	d3f9      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cca:	f7ff ffd3 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cce:	f002 fd71 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7ff fbc5 	bl	8001460 <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cdc:	080062e0 	.word	0x080062e0
  ldr  r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ce4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001ce8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001cec:	20016de0 	.word	0x20016de0

08001cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_Init+0x40>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_Init+0x40>)
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_Init+0x40>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 fcfd 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f808 	bl	8001d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d28:	f7ff fe34 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_InitTick+0x54>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x58>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fd15 	bl	8002786 <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00e      	b.n	8001d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d80a      	bhi.n	8001d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f000 fcdd 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <HAL_InitTick+0x5c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	2000000c 	.word	0x2000000c
 8001d94:	20000008 	.word	0x20000008

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	20016dd8 	.word	0x20016dd8

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20016dd8 	.word	0x20016dd8

08001dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e033      	b.n	8001e56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fdf4 	bl	80019e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e1e:	f023 0302 	bic.w	r3, r3, #2
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa28 	bl	8002280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
 8001e46:	e001      	b.n	8001e4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Start_DMA+0x1e>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e0b1      	b.n	8001fe2 <HAL_ADC_Start_DMA+0x182>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d018      	beq.n	8001ec6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea4:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_ADC_Start_DMA+0x18c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_ADC_Start_DMA+0x190>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9a      	lsrs	r2, r3, #18
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001eb8:	e002      	b.n	8001ec0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f9      	bne.n	8001eba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 8085 	bne.w	8001fe0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f14:	d106      	bne.n	8001f24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f023 0206 	bic.w	r2, r3, #6
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
 8001f22:	e002      	b.n	8001f2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_ADC_Start_DMA+0x194>)
 8001f34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <HAL_ADC_Start_DMA+0x198>)
 8001f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <HAL_ADC_Start_DMA+0x19c>)
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HAL_ADC_Start_DMA+0x1a0>)
 8001f4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	334c      	adds	r3, #76	; 0x4c
 8001f82:	4619      	mov	r1, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f000 fcb8 	bl	80028fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	e013      	b.n	8001fe0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_ADC_Start_DMA+0x1a4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0x180>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fde:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	431bde83 	.word	0x431bde83
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	08002479 	.word	0x08002479
 8001ffc:	08002533 	.word	0x08002533
 8002000:	0800254f 	.word	0x0800254f
 8002004:	40012000 	.word	0x40012000

08002008 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1c>
 8002034:	2302      	movs	r3, #2
 8002036:	e113      	b.n	8002260 <HAL_ADC_ConfigChannel+0x244>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b09      	cmp	r3, #9
 8002046:	d925      	bls.n	8002094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68d9      	ldr	r1, [r3, #12]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	3b1e      	subs	r3, #30
 800205e:	2207      	movs	r2, #7
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43da      	mvns	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	400a      	ands	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68d9      	ldr	r1, [r3, #12]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4403      	add	r3, r0
 8002086:	3b1e      	subs	r3, #30
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	e022      	b.n	80020da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	2207      	movs	r2, #7
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4403      	add	r3, r0
 80020d0:	409a      	lsls	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d824      	bhi.n	800212c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b05      	subs	r3, #5
 80020f4:	221f      	movs	r2, #31
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	400a      	ands	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b05      	subs	r3, #5
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
 800212a:	e04c      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d824      	bhi.n	800217e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b23      	subs	r3, #35	; 0x23
 8002146:	221f      	movs	r2, #31
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43da      	mvns	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b23      	subs	r3, #35	; 0x23
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
 800217c:	e023      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b41      	subs	r3, #65	; 0x41
 8002190:	221f      	movs	r2, #31
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3b41      	subs	r3, #65	; 0x41
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_ADC_ConfigChannel+0x250>)
 80021c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a28      	ldr	r2, [pc, #160]	; (8002270 <HAL_ADC_ConfigChannel+0x254>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10f      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d8>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_ADC_ConfigChannel+0x254>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12b      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x23a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_ADC_ConfigChannel+0x258>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <HAL_ADC_ConfigChannel+0x1f4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b11      	cmp	r3, #17
 800220e:	d122      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_ADC_ConfigChannel+0x258>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_ADC_ConfigChannel+0x25c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_ADC_ConfigChannel+0x260>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9a      	lsrs	r2, r3, #18
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002248:	e002      	b.n	8002250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40012300 	.word	0x40012300
 8002270:	40012000 	.word	0x40012000
 8002274:	10000012 	.word	0x10000012
 8002278:	20000004 	.word	0x20000004
 800227c:	431bde83 	.word	0x431bde83

08002280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002288:	4b79      	ldr	r3, [pc, #484]	; (8002470 <ADC_Init+0x1f0>)
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	021a      	lsls	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	4a58      	ldr	r2, [pc, #352]	; (8002474 <ADC_Init+0x1f4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d022      	beq.n	800235e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e00f      	b.n	800237e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800237c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0202 	bic.w	r2, r2, #2
 800238c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e1b      	ldrb	r3, [r3, #24]
 8002398:	005a      	lsls	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	3b01      	subs	r3, #1
 80023d8:	035a      	lsls	r2, r3, #13
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	e007      	b.n	80023f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	3b01      	subs	r3, #1
 8002410:	051a      	lsls	r2, r3, #20
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002436:	025a      	lsls	r2, r3, #9
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6899      	ldr	r1, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	029a      	lsls	r2, r3, #10
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40012300 	.word	0x40012300
 8002474:	0f000001 	.word	0x0f000001

08002478 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d13c      	bne.n	800250c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d12b      	bne.n	8002504 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d127      	bne.n	8002504 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d119      	bne.n	8002504 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0220 	bic.w	r2, r2, #32
 80024de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7fe fe85 	bl	8001214 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800250a:	e00e      	b.n	800252a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fd75 	bl	8002008 <HAL_ADC_ErrorCallback>
}
 800251e:	e004      	b.n	800252a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7fe fea3 	bl	800128c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f043 0204 	orr.w	r2, r3, #4
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff fd4a 	bl	8002008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff3e 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff8e 	bl	8002670 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5d 	bl	800261c <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff31 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fb08 	bl	8001dc0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e099      	b.n	80028f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027dc:	e00f      	b.n	80027fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027de:	f7ff faef 	bl	8001dc0 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d908      	bls.n	80027fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2203      	movs	r2, #3
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e078      	b.n	80028f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e8      	bne.n	80027de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_DMA_Init+0x158>)
 8002818:	4013      	ands	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4313      	orrs	r3, r2
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f023 0307 	bic.w	r3, r3, #7
 800287e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b04      	cmp	r3, #4
 8002890:	d117      	bne.n	80028c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fa91 	bl	8002dcc <DMA_CheckFifoParam>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028be:	2301      	movs	r3, #1
 80028c0:	e016      	b.n	80028f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa48 	bl	8002d60 <DMA_CalcBaseAndBitshift>
 80028d0:	4603      	mov	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	223f      	movs	r2, #63	; 0x3f
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	f010803f 	.word	0xf010803f

080028fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_DMA_Start_IT+0x26>
 800291e:	2302      	movs	r3, #2
 8002920:	e040      	b.n	80029a4 <HAL_DMA_Start_IT+0xa8>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d12f      	bne.n	8002996 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f9da 	bl	8002d04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	223f      	movs	r2, #63	; 0x3f
 8002956:	409a      	lsls	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0216 	orr.w	r2, r2, #22
 800296a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0208 	orr.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e005      	b.n	80029a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00c      	b.n	80029e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2205      	movs	r2, #5
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029fc:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_DMA_IRQHandler+0x258>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a92      	ldr	r2, [pc, #584]	; (8002c4c <HAL_DMA_IRQHandler+0x25c>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	0a9b      	lsrs	r3, r3, #10
 8002a08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01a      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0204 	bic.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2208      	movs	r2, #8
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d012      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2201      	movs	r2, #1
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	2204      	movs	r2, #4
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2210      	movs	r2, #16
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d043      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d03c      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2210      	movs	r2, #16
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d018      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d024      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
 8002b1e:	e01f      	b.n	8002b60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e016      	b.n	8002b60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0208 	bic.w	r2, r2, #8
 8002b4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b64:	2220      	movs	r2, #32
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 808e 	beq.w	8002c8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8086 	beq.w	8002c8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2220      	movs	r2, #32
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d136      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0216 	bic.w	r2, r2, #22
 8002ba8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_DMA_IRQHandler+0x1da>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0208 	bic.w	r2, r2, #8
 8002bd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	223f      	movs	r2, #63	; 0x3f
 8002be0:	409a      	lsls	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d07d      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
        }
        return;
 8002c06:	e078      	b.n	8002cfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01c      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d030      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4798      	blx	r3
 8002c34:	e02b      	b.n	8002c8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d027      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
 8002c46:	e022      	b.n	8002c8e <HAL_DMA_IRQHandler+0x29e>
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0210 	bic.w	r2, r2, #16
 8002c6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d032      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d022      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d307      	bcc.n	8002cd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f2      	bne.n	8002cba <HAL_DMA_IRQHandler+0x2ca>
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cd6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e000      	b.n	8002cfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cfa:	bf00      	nop
    }
  }
}
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop

08002d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d108      	bne.n	8002d44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d42:	e007      	b.n	8002d54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	3b10      	subs	r3, #16
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d909      	bls.n	8002da2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002da0:	e007      	b.n	8002db2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	aaaaaaab 	.word	0xaaaaaaab
 8002dc8:	080060bc 	.word	0x080060bc

08002dcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11f      	bne.n	8002e26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d855      	bhi.n	8002e98 <DMA_CheckFifoParam+0xcc>
 8002dec:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <DMA_CheckFifoParam+0x28>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e05 	.word	0x08002e05
 8002df8:	08002e17 	.word	0x08002e17
 8002dfc:	08002e05 	.word	0x08002e05
 8002e00:	08002e99 	.word	0x08002e99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d045      	beq.n	8002e9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e14:	e042      	b.n	8002e9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1e:	d13f      	bne.n	8002ea0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e24:	e03c      	b.n	8002ea0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2e:	d121      	bne.n	8002e74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d836      	bhi.n	8002ea4 <DMA_CheckFifoParam+0xd8>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <DMA_CheckFifoParam+0x70>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e53 	.word	0x08002e53
 8002e44:	08002e4d 	.word	0x08002e4d
 8002e48:	08002e65 	.word	0x08002e65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e02f      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d024      	beq.n	8002ea8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e62:	e021      	b.n	8002ea8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e6c:	d11e      	bne.n	8002eac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e72:	e01b      	b.n	8002eac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <DMA_CheckFifoParam+0xb4>
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d003      	beq.n	8002e86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e7e:	e018      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      break;
 8002e84:	e015      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00e      	beq.n	8002eb0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
      break;
 8002e96:	e00b      	b.n	8002eb0 <DMA_CheckFifoParam+0xe4>
      break;
 8002e98:	bf00      	nop
 8002e9a:	e00a      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002e9c:	bf00      	nop
 8002e9e:	e008      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ea0:	bf00      	nop
 8002ea2:	e006      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e004      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ea8:	bf00      	nop
 8002eaa:	e002      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eb0:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e159      	b.n	8003190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 8148 	bne.w	800318a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d00b      	beq.n	8002f1a <HAL_GPIO_Init+0x5a>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f0e:	2b11      	cmp	r3, #17
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b12      	cmp	r3, #18
 8002f18:	d130      	bne.n	8002f7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 0201 	and.w	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0xfc>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b12      	cmp	r3, #18
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a2 	beq.w	800318a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <HAL_GPIO_Init+0x2e4>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <HAL_GPIO_Init+0x2e4>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_GPIO_Init+0x2e4>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003062:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_GPIO_Init+0x2e8>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a48      	ldr	r2, [pc, #288]	; (80031ac <HAL_GPIO_Init+0x2ec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d019      	beq.n	80030c2 <HAL_GPIO_Init+0x202>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_GPIO_Init+0x2f0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0x1fe>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a46      	ldr	r2, [pc, #280]	; (80031b4 <HAL_GPIO_Init+0x2f4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00d      	beq.n	80030ba <HAL_GPIO_Init+0x1fa>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <HAL_GPIO_Init+0x2f8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x1f6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a44      	ldr	r2, [pc, #272]	; (80031bc <HAL_GPIO_Init+0x2fc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_GPIO_Init+0x1f2>
 80030ae:	2304      	movs	r3, #4
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x204>
 80030b2:	2307      	movs	r3, #7
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x204>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x204>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x204>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x204>
 80030c2:	2300      	movs	r3, #0
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f002 0203 	and.w	r2, r2, #3
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d4:	4934      	ldr	r1, [pc, #208]	; (80031a8 <HAL_GPIO_Init+0x2e8>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_GPIO_Init+0x300>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003106:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <HAL_GPIO_Init+0x300>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_GPIO_Init+0x300>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <HAL_GPIO_Init+0x300>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_GPIO_Init+0x300>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_GPIO_Init+0x300>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_GPIO_Init+0x300>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_GPIO_Init+0x300>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	f67f aea2 	bls.w	8002edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3724      	adds	r7, #36	; 0x24
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40020800 	.word	0x40020800
 80031b8:	40020c00 	.word	0x40020c00
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40013c00 	.word	0x40013c00

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e25b      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d075      	beq.n	80032ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e2:	4ba3      	ldr	r3, [pc, #652]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d00c      	beq.n	8003208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ee:	4ba0      	ldr	r3, [pc, #640]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d112      	bne.n	8003220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4b9d      	ldr	r3, [pc, #628]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003206:	d10b      	bne.n	8003220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	4b99      	ldr	r3, [pc, #612]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05b      	beq.n	80032cc <HAL_RCC_OscConfig+0x108>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d157      	bne.n	80032cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e236      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d106      	bne.n	8003238 <HAL_RCC_OscConfig+0x74>
 800322a:	4b91      	ldr	r3, [pc, #580]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a90      	ldr	r2, [pc, #576]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xb0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x98>
 8003242:	4b8b      	ldr	r3, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a8a      	ldr	r2, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a87      	ldr	r2, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xb0>
 800325c:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a83      	ldr	r2, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a80      	ldr	r2, [pc, #512]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fda0 	bl	8001dc0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fd9c 	bl	8001dc0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1fb      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xc0>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fd8c 	bl	8001dc0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fd88 	bl	8001dc0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1e7      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0xe8>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032da:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x152>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1bb      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b56      	ldr	r3, [pc, #344]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4952      	ldr	r1, [pc, #328]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_RCC_OscConfig+0x2b0>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fd41 	bl	8001dc0 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe fd3d 	bl	8001dc0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e19c      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b46      	ldr	r3, [pc, #280]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b43      	ldr	r3, [pc, #268]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4940      	ldr	r1, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_OscConfig+0x2b0>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fd20 	bl	8001dc0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fd1c 	bl	8001dc0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e17b      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d030      	beq.n	8003410 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCC_OscConfig+0x2b4>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe fd00 	bl	8001dc0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe fcfc 	bl	8001dc0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e15b      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x200>
 80033e2:	e015      	b.n	8003410 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e4:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x2b4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fce9 	bl	8001dc0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fe fce5 	bl	8001dc0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e144      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a0 	beq.w	800355e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a0e      	ldr	r2, [pc, #56]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_OscConfig+0x2b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d121      	bne.n	800349e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_RCC_OscConfig+0x2b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_RCC_OscConfig+0x2b8>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe fcab 	bl	8001dc0 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e011      	b.n	8003492 <HAL_RCC_OscConfig+0x2ce>
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	42470000 	.word	0x42470000
 8003478:	42470e80 	.word	0x42470e80
 800347c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe fc9e 	bl	8001dc0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0fd      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b81      	ldr	r3, [pc, #516]	; (8003698 <HAL_RCC_OscConfig+0x4d4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
 80034a6:	4b7d      	ldr	r3, [pc, #500]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a7c      	ldr	r2, [pc, #496]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	e01c      	b.n	80034ee <HAL_RCC_OscConfig+0x32a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCC_OscConfig+0x312>
 80034bc:	4b77      	ldr	r3, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a76      	ldr	r2, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	4b74      	ldr	r3, [pc, #464]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a73      	ldr	r2, [pc, #460]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	e00b      	b.n	80034ee <HAL_RCC_OscConfig+0x32a>
 80034d6:	4b71      	ldr	r3, [pc, #452]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a70      	ldr	r2, [pc, #448]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	4b6e      	ldr	r3, [pc, #440]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a6d      	ldr	r2, [pc, #436]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d015      	beq.n	8003522 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fc63 	bl	8001dc0 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fc5f 	bl	8001dc0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0bc      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ee      	beq.n	80034fe <HAL_RCC_OscConfig+0x33a>
 8003520:	e014      	b.n	800354c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fe fc4d 	bl	8001dc0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe fc49 	bl	8001dc0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0a6      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	4b56      	ldr	r3, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ee      	bne.n	800352a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a51      	ldr	r2, [pc, #324]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8092 	beq.w	800368c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d05c      	beq.n	800362e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d141      	bne.n	8003600 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357c:	4b48      	ldr	r3, [pc, #288]	; (80036a0 <HAL_RCC_OscConfig+0x4dc>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fc1d 	bl	8001dc0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fc19 	bl	8001dc0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e078      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359c:	4b3f      	ldr	r3, [pc, #252]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	3b01      	subs	r3, #1
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	4933      	ldr	r1, [pc, #204]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_RCC_OscConfig+0x4dc>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fbf2 	bl	8001dc0 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe fbee 	bl	8001dc0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04d      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b2a      	ldr	r3, [pc, #168]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x41c>
 80035fe:	e045      	b.n	800368c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_OscConfig+0x4dc>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe fbdb 	bl	8001dc0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe fbd7 	bl	8001dc0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e036      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x44a>
 800362c:	e02e      	b.n	800368c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e029      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_RCC_OscConfig+0x4d8>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	429a      	cmp	r2, r3
 800364c:	d11c      	bne.n	8003688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d115      	bne.n	8003688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003662:	4013      	ands	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d10d      	bne.n	8003688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40007000 	.word	0x40007000
 800369c:	40023800 	.word	0x40023800
 80036a0:	42470060 	.word	0x42470060

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe fb14 	bl	8001dc0 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe fb10 	bl	8001dc0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4601      	mov	r1, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	fa21 f303 	lsr.w	r3, r1, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fa74 	bl	8001d38 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	080060a4 	.word	0x080060a4
 8003868:	20000004 	.word	0x20000004
 800386c:	20000008 	.word	0x20000008

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	2300      	movs	r3, #0
 8003880:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d007      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x32>
 8003892:	2b08      	cmp	r3, #8
 8003894:	d008      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x38>
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 80b4 	bne.w	8003a04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800389e:	60bb      	str	r3, [r7, #8]
       break;
 80038a0:	e0b3      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a2:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038a4:	60bb      	str	r3, [r7, #8]
      break;
 80038a6:	e0b0      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a8:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b2:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04a      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	f04f 0400 	mov.w	r4, #0
 80038c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	ea03 0501 	and.w	r5, r3, r1
 80038d4:	ea04 0602 	and.w	r6, r4, r2
 80038d8:	4629      	mov	r1, r5
 80038da:	4632      	mov	r2, r6
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	f04f 0400 	mov.w	r4, #0
 80038e4:	0154      	lsls	r4, r2, #5
 80038e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038ea:	014b      	lsls	r3, r1, #5
 80038ec:	4619      	mov	r1, r3
 80038ee:	4622      	mov	r2, r4
 80038f0:	1b49      	subs	r1, r1, r5
 80038f2:	eb62 0206 	sbc.w	r2, r2, r6
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	f04f 0400 	mov.w	r4, #0
 80038fe:	0194      	lsls	r4, r2, #6
 8003900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003904:	018b      	lsls	r3, r1, #6
 8003906:	1a5b      	subs	r3, r3, r1
 8003908:	eb64 0402 	sbc.w	r4, r4, r2
 800390c:	f04f 0100 	mov.w	r1, #0
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	00e2      	lsls	r2, r4, #3
 8003916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800391a:	00d9      	lsls	r1, r3, #3
 800391c:	460b      	mov	r3, r1
 800391e:	4614      	mov	r4, r2
 8003920:	195b      	adds	r3, r3, r5
 8003922:	eb44 0406 	adc.w	r4, r4, r6
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	0262      	lsls	r2, r4, #9
 8003930:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003934:	0259      	lsls	r1, r3, #9
 8003936:	460b      	mov	r3, r1
 8003938:	4614      	mov	r4, r2
 800393a:	4618      	mov	r0, r3
 800393c:	4621      	mov	r1, r4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	461a      	mov	r2, r3
 8003946:	4623      	mov	r3, r4
 8003948:	f7fd f930 	bl	8000bac <__aeabi_uldivmod>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e049      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	f04f 0400 	mov.w	r4, #0
 800395e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	ea03 0501 	and.w	r5, r3, r1
 800396a:	ea04 0602 	and.w	r6, r4, r2
 800396e:	4629      	mov	r1, r5
 8003970:	4632      	mov	r2, r6
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	f04f 0400 	mov.w	r4, #0
 800397a:	0154      	lsls	r4, r2, #5
 800397c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003980:	014b      	lsls	r3, r1, #5
 8003982:	4619      	mov	r1, r3
 8003984:	4622      	mov	r2, r4
 8003986:	1b49      	subs	r1, r1, r5
 8003988:	eb62 0206 	sbc.w	r2, r2, r6
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f04f 0400 	mov.w	r4, #0
 8003994:	0194      	lsls	r4, r2, #6
 8003996:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800399a:	018b      	lsls	r3, r1, #6
 800399c:	1a5b      	subs	r3, r3, r1
 800399e:	eb64 0402 	sbc.w	r4, r4, r2
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	00e2      	lsls	r2, r4, #3
 80039ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039b0:	00d9      	lsls	r1, r3, #3
 80039b2:	460b      	mov	r3, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	195b      	adds	r3, r3, r5
 80039b8:	eb44 0406 	adc.w	r4, r4, r6
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	02a2      	lsls	r2, r4, #10
 80039c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039ca:	0299      	lsls	r1, r3, #10
 80039cc:	460b      	mov	r3, r1
 80039ce:	4614      	mov	r4, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	4621      	mov	r1, r4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f04f 0400 	mov.w	r4, #0
 80039da:	461a      	mov	r2, r3
 80039dc:	4623      	mov	r3, r4
 80039de:	f7fd f8e5 	bl	8000bac <__aeabi_uldivmod>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	3301      	adds	r3, #1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	60bb      	str	r3, [r7, #8]
      break;
 8003a02:	e002      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a06:	60bb      	str	r3, [r7, #8]
      break;
 8003a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000004 	.word	0x20000004

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4601      	mov	r1, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a9b      	lsrs	r3, r3, #10
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	080060b4 	.word	0x080060b4

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a64:	f7ff ffdc 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a68:	4601      	mov	r1, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0b5b      	lsrs	r3, r3, #13
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	080060b4 	.word	0x080060b4

08003a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e03f      	b.n	8003b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe f810 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 faef 	bl	80040b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d130      	bne.n	8003b9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Transmit_IT+0x26>
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e029      	b.n	8003ba0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Transmit_IT+0x38>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e022      	b.n	8003ba0 <HAL_UART_Transmit_IT+0x7e>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2221      	movs	r2, #33	; 0x21
 8003b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d140      	bne.n	8003c48 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_Receive_IT+0x26>
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e039      	b.n	8003c4a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_UART_Receive_IT+0x38>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e032      	b.n	8003c4a <HAL_UART_Receive_IT+0x9e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2222      	movs	r2, #34	; 0x22
 8003c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c22:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0220 	orr.w	r2, r2, #32
 8003c42:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x52>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f982 	bl	8003fac <UART_Receive_IT>
      return;
 8003ca8:	e0d1      	b.n	8003e4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80b0 	beq.w	8003e12 <HAL_UART_IRQHandler+0x1ba>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x70>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a5 	beq.w	8003e12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x90>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_UART_IRQHandler+0xb0>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	f043 0202 	orr.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_UART_IRQHandler+0xd0>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00f      	beq.n	8003d52 <HAL_UART_IRQHandler+0xfa>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_UART_IRQHandler+0xee>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	f043 0208 	orr.w	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d078      	beq.n	8003e4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_UART_IRQHandler+0x11c>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f91c 	bl	8003fac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	bf0c      	ite	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	2300      	movne	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_UART_IRQHandler+0x144>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d031      	beq.n	8003e00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f865 	bl	8003e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d123      	bne.n	8003df8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <HAL_UART_IRQHandler+0x1fc>)
 8003dce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fde9 	bl	80029ac <HAL_DMA_Abort_IT>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dea:	4610      	mov	r0, r2
 8003dec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dee:	e00e      	b.n	8003e0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f831 	bl	8003e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	e00a      	b.n	8003e0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f82d 	bl	8003e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfe:	e006      	b.n	8003e0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f829 	bl	8003e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e0c:	e01e      	b.n	8003e4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0e:	bf00      	nop
    return;
 8003e10:	e01c      	b.n	8003e4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_UART_IRQHandler+0x1d6>
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f852 	bl	8003ed0 <UART_Transmit_IT>
    return;
 8003e2c:	e00f      	b.n	8003e4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_UART_IRQHandler+0x1f6>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f89a 	bl	8003f7c <UART_EndTransmit_IT>
    return;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e4c:	bf00      	nop
  }
}
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	08003ea9 	.word	0x08003ea9

08003e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ffc8 	bl	8003e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b21      	cmp	r3, #33	; 0x21
 8003ee2:	d144      	bne.n	8003f6e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d11a      	bne.n	8003f24 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f02:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]
 8003f16:	e00e      	b.n	8003f36 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]
 8003f22:	e008      	b.n	8003f36 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	1c59      	adds	r1, r3, #1
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6211      	str	r1, [r2, #32]
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4619      	mov	r1, r3
 8003f44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fd f8dd 	bl	800115c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b22      	cmp	r3, #34	; 0x22
 8003fbe:	d171      	bne.n	80040a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d123      	bne.n	8004012 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10e      	bne.n	8003ff6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff4:	e029      	b.n	800404a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
 8004010:	e01b      	b.n	800404a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6858      	ldr	r0, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	1c59      	adds	r1, r3, #1
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6291      	str	r1, [r2, #40]	; 0x28
 800402a:	b2c2      	uxtb	r2, r0
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e00c      	b.n	800404a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	1c58      	adds	r0, r3, #1
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	6288      	str	r0, [r1, #40]	; 0x28
 8004042:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29b      	uxth	r3, r3
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4619      	mov	r1, r3
 8004058:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800405a:	2b00      	cmp	r3, #0
 800405c:	d120      	bne.n	80040a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0220 	bic.w	r2, r2, #32
 800406c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800407c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd f894 	bl	80011c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e002      	b.n	80040a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040f2:	f023 030c 	bic.w	r3, r3, #12
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411e:	f040 818b 	bne.w	8004438 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4ac1      	ldr	r2, [pc, #772]	; (800442c <UART_SetConfig+0x37c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d005      	beq.n	8004138 <UART_SetConfig+0x88>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4abf      	ldr	r2, [pc, #764]	; (8004430 <UART_SetConfig+0x380>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 80bd 	bne.w	80042b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff fc92 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 800413c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0600 	mov.w	r6, #0
 8004146:	46a8      	mov	r8, r5
 8004148:	46b1      	mov	r9, r6
 800414a:	eb18 0308 	adds.w	r3, r8, r8
 800414e:	eb49 0409 	adc.w	r4, r9, r9
 8004152:	4698      	mov	r8, r3
 8004154:	46a1      	mov	r9, r4
 8004156:	eb18 0805 	adds.w	r8, r8, r5
 800415a:	eb49 0906 	adc.w	r9, r9, r6
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800416a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800416e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004172:	4688      	mov	r8, r1
 8004174:	4691      	mov	r9, r2
 8004176:	eb18 0005 	adds.w	r0, r8, r5
 800417a:	eb49 0106 	adc.w	r1, r9, r6
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	461d      	mov	r5, r3
 8004184:	f04f 0600 	mov.w	r6, #0
 8004188:	196b      	adds	r3, r5, r5
 800418a:	eb46 0406 	adc.w	r4, r6, r6
 800418e:	461a      	mov	r2, r3
 8004190:	4623      	mov	r3, r4
 8004192:	f7fc fd0b 	bl	8000bac <__aeabi_uldivmod>
 8004196:	4603      	mov	r3, r0
 8004198:	460c      	mov	r4, r1
 800419a:	461a      	mov	r2, r3
 800419c:	4ba5      	ldr	r3, [pc, #660]	; (8004434 <UART_SetConfig+0x384>)
 800419e:	fba3 2302 	umull	r2, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	461d      	mov	r5, r3
 80041ac:	f04f 0600 	mov.w	r6, #0
 80041b0:	46a9      	mov	r9, r5
 80041b2:	46b2      	mov	sl, r6
 80041b4:	eb19 0309 	adds.w	r3, r9, r9
 80041b8:	eb4a 040a 	adc.w	r4, sl, sl
 80041bc:	4699      	mov	r9, r3
 80041be:	46a2      	mov	sl, r4
 80041c0:	eb19 0905 	adds.w	r9, r9, r5
 80041c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041dc:	4689      	mov	r9, r1
 80041de:	4692      	mov	sl, r2
 80041e0:	eb19 0005 	adds.w	r0, r9, r5
 80041e4:	eb4a 0106 	adc.w	r1, sl, r6
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	461d      	mov	r5, r3
 80041ee:	f04f 0600 	mov.w	r6, #0
 80041f2:	196b      	adds	r3, r5, r5
 80041f4:	eb46 0406 	adc.w	r4, r6, r6
 80041f8:	461a      	mov	r2, r3
 80041fa:	4623      	mov	r3, r4
 80041fc:	f7fc fcd6 	bl	8000bac <__aeabi_uldivmod>
 8004200:	4603      	mov	r3, r0
 8004202:	460c      	mov	r4, r1
 8004204:	461a      	mov	r2, r3
 8004206:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <UART_SetConfig+0x384>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a86      	ldr	r2, [pc, #536]	; (8004434 <UART_SetConfig+0x384>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004228:	4498      	add	r8, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	461d      	mov	r5, r3
 800422e:	f04f 0600 	mov.w	r6, #0
 8004232:	46a9      	mov	r9, r5
 8004234:	46b2      	mov	sl, r6
 8004236:	eb19 0309 	adds.w	r3, r9, r9
 800423a:	eb4a 040a 	adc.w	r4, sl, sl
 800423e:	4699      	mov	r9, r3
 8004240:	46a2      	mov	sl, r4
 8004242:	eb19 0905 	adds.w	r9, r9, r5
 8004246:	eb4a 0a06 	adc.w	sl, sl, r6
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004256:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800425a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800425e:	4689      	mov	r9, r1
 8004260:	4692      	mov	sl, r2
 8004262:	eb19 0005 	adds.w	r0, r9, r5
 8004266:	eb4a 0106 	adc.w	r1, sl, r6
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	461d      	mov	r5, r3
 8004270:	f04f 0600 	mov.w	r6, #0
 8004274:	196b      	adds	r3, r5, r5
 8004276:	eb46 0406 	adc.w	r4, r6, r6
 800427a:	461a      	mov	r2, r3
 800427c:	4623      	mov	r3, r4
 800427e:	f7fc fc95 	bl	8000bac <__aeabi_uldivmod>
 8004282:	4603      	mov	r3, r0
 8004284:	460c      	mov	r4, r1
 8004286:	461a      	mov	r2, r3
 8004288:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <UART_SetConfig+0x384>)
 800428a:	fba3 1302 	umull	r1, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2164      	movs	r1, #100	; 0x64
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	3332      	adds	r3, #50	; 0x32
 800429c:	4a65      	ldr	r2, [pc, #404]	; (8004434 <UART_SetConfig+0x384>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 0207 	and.w	r2, r3, #7
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4442      	add	r2, r8
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	e26f      	b.n	8004792 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b2:	f7ff fbc1 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 80042b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	461d      	mov	r5, r3
 80042bc:	f04f 0600 	mov.w	r6, #0
 80042c0:	46a8      	mov	r8, r5
 80042c2:	46b1      	mov	r9, r6
 80042c4:	eb18 0308 	adds.w	r3, r8, r8
 80042c8:	eb49 0409 	adc.w	r4, r9, r9
 80042cc:	4698      	mov	r8, r3
 80042ce:	46a1      	mov	r9, r4
 80042d0:	eb18 0805 	adds.w	r8, r8, r5
 80042d4:	eb49 0906 	adc.w	r9, r9, r6
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042ec:	4688      	mov	r8, r1
 80042ee:	4691      	mov	r9, r2
 80042f0:	eb18 0005 	adds.w	r0, r8, r5
 80042f4:	eb49 0106 	adc.w	r1, r9, r6
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	461d      	mov	r5, r3
 80042fe:	f04f 0600 	mov.w	r6, #0
 8004302:	196b      	adds	r3, r5, r5
 8004304:	eb46 0406 	adc.w	r4, r6, r6
 8004308:	461a      	mov	r2, r3
 800430a:	4623      	mov	r3, r4
 800430c:	f7fc fc4e 	bl	8000bac <__aeabi_uldivmod>
 8004310:	4603      	mov	r3, r0
 8004312:	460c      	mov	r4, r1
 8004314:	461a      	mov	r2, r3
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <UART_SetConfig+0x384>)
 8004318:	fba3 2302 	umull	r2, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	461d      	mov	r5, r3
 8004326:	f04f 0600 	mov.w	r6, #0
 800432a:	46a9      	mov	r9, r5
 800432c:	46b2      	mov	sl, r6
 800432e:	eb19 0309 	adds.w	r3, r9, r9
 8004332:	eb4a 040a 	adc.w	r4, sl, sl
 8004336:	4699      	mov	r9, r3
 8004338:	46a2      	mov	sl, r4
 800433a:	eb19 0905 	adds.w	r9, r9, r5
 800433e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800434e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004352:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004356:	4689      	mov	r9, r1
 8004358:	4692      	mov	sl, r2
 800435a:	eb19 0005 	adds.w	r0, r9, r5
 800435e:	eb4a 0106 	adc.w	r1, sl, r6
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	461d      	mov	r5, r3
 8004368:	f04f 0600 	mov.w	r6, #0
 800436c:	196b      	adds	r3, r5, r5
 800436e:	eb46 0406 	adc.w	r4, r6, r6
 8004372:	461a      	mov	r2, r3
 8004374:	4623      	mov	r3, r4
 8004376:	f7fc fc19 	bl	8000bac <__aeabi_uldivmod>
 800437a:	4603      	mov	r3, r0
 800437c:	460c      	mov	r4, r1
 800437e:	461a      	mov	r2, r3
 8004380:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <UART_SetConfig+0x384>)
 8004382:	fba3 1302 	umull	r1, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	2164      	movs	r1, #100	; 0x64
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	3332      	adds	r3, #50	; 0x32
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <UART_SetConfig+0x384>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043a2:	4498      	add	r8, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	461d      	mov	r5, r3
 80043a8:	f04f 0600 	mov.w	r6, #0
 80043ac:	46a9      	mov	r9, r5
 80043ae:	46b2      	mov	sl, r6
 80043b0:	eb19 0309 	adds.w	r3, r9, r9
 80043b4:	eb4a 040a 	adc.w	r4, sl, sl
 80043b8:	4699      	mov	r9, r3
 80043ba:	46a2      	mov	sl, r4
 80043bc:	eb19 0905 	adds.w	r9, r9, r5
 80043c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043d8:	4689      	mov	r9, r1
 80043da:	4692      	mov	sl, r2
 80043dc:	eb19 0005 	adds.w	r0, r9, r5
 80043e0:	eb4a 0106 	adc.w	r1, sl, r6
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	461d      	mov	r5, r3
 80043ea:	f04f 0600 	mov.w	r6, #0
 80043ee:	196b      	adds	r3, r5, r5
 80043f0:	eb46 0406 	adc.w	r4, r6, r6
 80043f4:	461a      	mov	r2, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	f7fc fbd8 	bl	8000bac <__aeabi_uldivmod>
 80043fc:	4603      	mov	r3, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	461a      	mov	r2, r3
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <UART_SetConfig+0x384>)
 8004404:	fba3 1302 	umull	r1, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	2164      	movs	r1, #100	; 0x64
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	3332      	adds	r3, #50	; 0x32
 8004416:	4a07      	ldr	r2, [pc, #28]	; (8004434 <UART_SetConfig+0x384>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 0207 	and.w	r2, r3, #7
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4442      	add	r2, r8
 8004428:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800442a:	e1b2      	b.n	8004792 <UART_SetConfig+0x6e2>
 800442c:	40011000 	.word	0x40011000
 8004430:	40011400 	.word	0x40011400
 8004434:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4ad7      	ldr	r2, [pc, #860]	; (800479c <UART_SetConfig+0x6ec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d005      	beq.n	800444e <UART_SetConfig+0x39e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4ad6      	ldr	r2, [pc, #856]	; (80047a0 <UART_SetConfig+0x6f0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	f040 80d1 	bne.w	80045f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800444e:	f7ff fb07 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8004452:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	469a      	mov	sl, r3
 8004458:	f04f 0b00 	mov.w	fp, #0
 800445c:	46d0      	mov	r8, sl
 800445e:	46d9      	mov	r9, fp
 8004460:	eb18 0308 	adds.w	r3, r8, r8
 8004464:	eb49 0409 	adc.w	r4, r9, r9
 8004468:	4698      	mov	r8, r3
 800446a:	46a1      	mov	r9, r4
 800446c:	eb18 080a 	adds.w	r8, r8, sl
 8004470:	eb49 090b 	adc.w	r9, r9, fp
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004480:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004484:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004488:	4688      	mov	r8, r1
 800448a:	4691      	mov	r9, r2
 800448c:	eb1a 0508 	adds.w	r5, sl, r8
 8004490:	eb4b 0609 	adc.w	r6, fp, r9
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0094      	lsls	r4, r2, #2
 80044a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044ac:	008b      	lsls	r3, r1, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	4623      	mov	r3, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	4631      	mov	r1, r6
 80044b6:	f7fc fb79 	bl	8000bac <__aeabi_uldivmod>
 80044ba:	4603      	mov	r3, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	461a      	mov	r2, r3
 80044c0:	4bb8      	ldr	r3, [pc, #736]	; (80047a4 <UART_SetConfig+0x6f4>)
 80044c2:	fba3 2302 	umull	r2, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	469b      	mov	fp, r3
 80044d0:	f04f 0c00 	mov.w	ip, #0
 80044d4:	46d9      	mov	r9, fp
 80044d6:	46e2      	mov	sl, ip
 80044d8:	eb19 0309 	adds.w	r3, r9, r9
 80044dc:	eb4a 040a 	adc.w	r4, sl, sl
 80044e0:	4699      	mov	r9, r3
 80044e2:	46a2      	mov	sl, r4
 80044e4:	eb19 090b 	adds.w	r9, r9, fp
 80044e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004500:	4689      	mov	r9, r1
 8004502:	4692      	mov	sl, r2
 8004504:	eb1b 0509 	adds.w	r5, fp, r9
 8004508:	eb4c 060a 	adc.w	r6, ip, sl
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	f04f 0400 	mov.w	r4, #0
 800451e:	0094      	lsls	r4, r2, #2
 8004520:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004524:	008b      	lsls	r3, r1, #2
 8004526:	461a      	mov	r2, r3
 8004528:	4623      	mov	r3, r4
 800452a:	4628      	mov	r0, r5
 800452c:	4631      	mov	r1, r6
 800452e:	f7fc fb3d 	bl	8000bac <__aeabi_uldivmod>
 8004532:	4603      	mov	r3, r0
 8004534:	460c      	mov	r4, r1
 8004536:	461a      	mov	r2, r3
 8004538:	4b9a      	ldr	r3, [pc, #616]	; (80047a4 <UART_SetConfig+0x6f4>)
 800453a:	fba3 1302 	umull	r1, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2164      	movs	r1, #100	; 0x64
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a95      	ldr	r2, [pc, #596]	; (80047a4 <UART_SetConfig+0x6f4>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	4498      	add	r8, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	469b      	mov	fp, r3
 800455e:	f04f 0c00 	mov.w	ip, #0
 8004562:	46d9      	mov	r9, fp
 8004564:	46e2      	mov	sl, ip
 8004566:	eb19 0309 	adds.w	r3, r9, r9
 800456a:	eb4a 040a 	adc.w	r4, sl, sl
 800456e:	4699      	mov	r9, r3
 8004570:	46a2      	mov	sl, r4
 8004572:	eb19 090b 	adds.w	r9, r9, fp
 8004576:	eb4a 0a0c 	adc.w	sl, sl, ip
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800458a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800458e:	4689      	mov	r9, r1
 8004590:	4692      	mov	sl, r2
 8004592:	eb1b 0509 	adds.w	r5, fp, r9
 8004596:	eb4c 060a 	adc.w	r6, ip, sl
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4619      	mov	r1, r3
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	f04f 0400 	mov.w	r4, #0
 80045ac:	0094      	lsls	r4, r2, #2
 80045ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b2:	008b      	lsls	r3, r1, #2
 80045b4:	461a      	mov	r2, r3
 80045b6:	4623      	mov	r3, r4
 80045b8:	4628      	mov	r0, r5
 80045ba:	4631      	mov	r1, r6
 80045bc:	f7fc faf6 	bl	8000bac <__aeabi_uldivmod>
 80045c0:	4603      	mov	r3, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b77      	ldr	r3, [pc, #476]	; (80047a4 <UART_SetConfig+0x6f4>)
 80045c8:	fba3 1302 	umull	r1, r3, r3, r2
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	2164      	movs	r1, #100	; 0x64
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	3332      	adds	r3, #50	; 0x32
 80045da:	4a72      	ldr	r2, [pc, #456]	; (80047a4 <UART_SetConfig+0x6f4>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4442      	add	r2, r8
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	e0d0      	b.n	8004792 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7ff fa22 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 80045f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	469a      	mov	sl, r3
 80045fa:	f04f 0b00 	mov.w	fp, #0
 80045fe:	46d0      	mov	r8, sl
 8004600:	46d9      	mov	r9, fp
 8004602:	eb18 0308 	adds.w	r3, r8, r8
 8004606:	eb49 0409 	adc.w	r4, r9, r9
 800460a:	4698      	mov	r8, r3
 800460c:	46a1      	mov	r9, r4
 800460e:	eb18 080a 	adds.w	r8, r8, sl
 8004612:	eb49 090b 	adc.w	r9, r9, fp
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004622:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004626:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800462a:	4688      	mov	r8, r1
 800462c:	4691      	mov	r9, r2
 800462e:	eb1a 0508 	adds.w	r5, sl, r8
 8004632:	eb4b 0609 	adc.w	r6, fp, r9
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	0094      	lsls	r4, r2, #2
 800464a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800464e:	008b      	lsls	r3, r1, #2
 8004650:	461a      	mov	r2, r3
 8004652:	4623      	mov	r3, r4
 8004654:	4628      	mov	r0, r5
 8004656:	4631      	mov	r1, r6
 8004658:	f7fc faa8 	bl	8000bac <__aeabi_uldivmod>
 800465c:	4603      	mov	r3, r0
 800465e:	460c      	mov	r4, r1
 8004660:	461a      	mov	r2, r3
 8004662:	4b50      	ldr	r3, [pc, #320]	; (80047a4 <UART_SetConfig+0x6f4>)
 8004664:	fba3 2302 	umull	r2, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	469b      	mov	fp, r3
 8004672:	f04f 0c00 	mov.w	ip, #0
 8004676:	46d9      	mov	r9, fp
 8004678:	46e2      	mov	sl, ip
 800467a:	eb19 0309 	adds.w	r3, r9, r9
 800467e:	eb4a 040a 	adc.w	r4, sl, sl
 8004682:	4699      	mov	r9, r3
 8004684:	46a2      	mov	sl, r4
 8004686:	eb19 090b 	adds.w	r9, r9, fp
 800468a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800469e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046a2:	4689      	mov	r9, r1
 80046a4:	4692      	mov	sl, r2
 80046a6:	eb1b 0509 	adds.w	r5, fp, r9
 80046aa:	eb4c 060a 	adc.w	r6, ip, sl
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4619      	mov	r1, r3
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	0094      	lsls	r4, r2, #2
 80046c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046c6:	008b      	lsls	r3, r1, #2
 80046c8:	461a      	mov	r2, r3
 80046ca:	4623      	mov	r3, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	4631      	mov	r1, r6
 80046d0:	f7fc fa6c 	bl	8000bac <__aeabi_uldivmod>
 80046d4:	4603      	mov	r3, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	461a      	mov	r2, r3
 80046da:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <UART_SetConfig+0x6f4>)
 80046dc:	fba3 1302 	umull	r1, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	2164      	movs	r1, #100	; 0x64
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	3332      	adds	r3, #50	; 0x32
 80046ee:	4a2d      	ldr	r2, [pc, #180]	; (80047a4 <UART_SetConfig+0x6f4>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fa:	4498      	add	r8, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	469b      	mov	fp, r3
 8004700:	f04f 0c00 	mov.w	ip, #0
 8004704:	46d9      	mov	r9, fp
 8004706:	46e2      	mov	sl, ip
 8004708:	eb19 0309 	adds.w	r3, r9, r9
 800470c:	eb4a 040a 	adc.w	r4, sl, sl
 8004710:	4699      	mov	r9, r3
 8004712:	46a2      	mov	sl, r4
 8004714:	eb19 090b 	adds.w	r9, r9, fp
 8004718:	eb4a 0a0c 	adc.w	sl, sl, ip
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004728:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800472c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004730:	4689      	mov	r9, r1
 8004732:	4692      	mov	sl, r2
 8004734:	eb1b 0509 	adds.w	r5, fp, r9
 8004738:	eb4c 060a 	adc.w	r6, ip, sl
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4619      	mov	r1, r3
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f04f 0400 	mov.w	r4, #0
 800474e:	0094      	lsls	r4, r2, #2
 8004750:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004754:	008b      	lsls	r3, r1, #2
 8004756:	461a      	mov	r2, r3
 8004758:	4623      	mov	r3, r4
 800475a:	4628      	mov	r0, r5
 800475c:	4631      	mov	r1, r6
 800475e:	f7fc fa25 	bl	8000bac <__aeabi_uldivmod>
 8004762:	4603      	mov	r3, r0
 8004764:	460c      	mov	r4, r1
 8004766:	461a      	mov	r2, r3
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <UART_SetConfig+0x6f4>)
 800476a:	fba3 1302 	umull	r1, r3, r3, r2
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2164      	movs	r1, #100	; 0x64
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	3332      	adds	r3, #50	; 0x32
 800477c:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <UART_SetConfig+0x6f4>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 020f 	and.w	r2, r3, #15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4442      	add	r2, r8
 800478e:	609a      	str	r2, [r3, #8]
}
 8004790:	e7ff      	b.n	8004792 <UART_SetConfig+0x6e2>
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479c:	40011000 	.word	0x40011000
 80047a0:	40011400 	.word	0x40011400
 80047a4:	51eb851f 	.word	0x51eb851f

080047a8 <__errno>:
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <__errno+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000010 	.word	0x20000010

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4e0d      	ldr	r6, [pc, #52]	; (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1ba4      	subs	r4, r4, r6
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2500      	movs	r5, #0
 80047c0:	42a5      	cmp	r5, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4e0b      	ldr	r6, [pc, #44]	; (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	; (80047f8 <__libc_init_array+0x44>)
 80047c8:	f001 fc3c 	bl	8006044 <_init>
 80047cc:	1ba4      	subs	r4, r4, r6
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2500      	movs	r5, #0
 80047d2:	42a5      	cmp	r5, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047dc:	4798      	blx	r3
 80047de:	3501      	adds	r5, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047e6:	4798      	blx	r3
 80047e8:	3501      	adds	r5, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	080062d8 	.word	0x080062d8
 80047f0:	080062d8 	.word	0x080062d8
 80047f4:	080062d8 	.word	0x080062d8
 80047f8:	080062dc 	.word	0x080062dc

080047fc <memcpy>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	1e43      	subs	r3, r0, #1
 8004800:	440a      	add	r2, r1
 8004802:	4291      	cmp	r1, r2
 8004804:	d100      	bne.n	8004808 <memcpy+0xc>
 8004806:	bd10      	pop	{r4, pc}
 8004808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800480c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004810:	e7f7      	b.n	8004802 <memcpy+0x6>

08004812 <memset>:
 8004812:	4402      	add	r2, r0
 8004814:	4603      	mov	r3, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	d100      	bne.n	800481c <memset+0xa>
 800481a:	4770      	bx	lr
 800481c:	f803 1b01 	strb.w	r1, [r3], #1
 8004820:	e7f9      	b.n	8004816 <memset+0x4>
	...

08004824 <_vsiprintf_r>:
 8004824:	b500      	push	{lr}
 8004826:	b09b      	sub	sp, #108	; 0x6c
 8004828:	9100      	str	r1, [sp, #0]
 800482a:	9104      	str	r1, [sp, #16]
 800482c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004830:	9105      	str	r1, [sp, #20]
 8004832:	9102      	str	r1, [sp, #8]
 8004834:	4905      	ldr	r1, [pc, #20]	; (800484c <_vsiprintf_r+0x28>)
 8004836:	9103      	str	r1, [sp, #12]
 8004838:	4669      	mov	r1, sp
 800483a:	f000 f86d 	bl	8004918 <_svfiprintf_r>
 800483e:	9b00      	ldr	r3, [sp, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	b01b      	add	sp, #108	; 0x6c
 8004846:	f85d fb04 	ldr.w	pc, [sp], #4
 800484a:	bf00      	nop
 800484c:	ffff0208 	.word	0xffff0208

08004850 <vsiprintf>:
 8004850:	4613      	mov	r3, r2
 8004852:	460a      	mov	r2, r1
 8004854:	4601      	mov	r1, r0
 8004856:	4802      	ldr	r0, [pc, #8]	; (8004860 <vsiprintf+0x10>)
 8004858:	6800      	ldr	r0, [r0, #0]
 800485a:	f7ff bfe3 	b.w	8004824 <_vsiprintf_r>
 800485e:	bf00      	nop
 8004860:	20000010 	.word	0x20000010

08004864 <__ssputs_r>:
 8004864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004868:	688e      	ldr	r6, [r1, #8]
 800486a:	429e      	cmp	r6, r3
 800486c:	4682      	mov	sl, r0
 800486e:	460c      	mov	r4, r1
 8004870:	4690      	mov	r8, r2
 8004872:	4699      	mov	r9, r3
 8004874:	d837      	bhi.n	80048e6 <__ssputs_r+0x82>
 8004876:	898a      	ldrh	r2, [r1, #12]
 8004878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800487c:	d031      	beq.n	80048e2 <__ssputs_r+0x7e>
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	6909      	ldr	r1, [r1, #16]
 8004882:	1a6f      	subs	r7, r5, r1
 8004884:	6965      	ldr	r5, [r4, #20]
 8004886:	2302      	movs	r3, #2
 8004888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800488c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004890:	f109 0301 	add.w	r3, r9, #1
 8004894:	443b      	add	r3, r7
 8004896:	429d      	cmp	r5, r3
 8004898:	bf38      	it	cc
 800489a:	461d      	movcc	r5, r3
 800489c:	0553      	lsls	r3, r2, #21
 800489e:	d530      	bpl.n	8004902 <__ssputs_r+0x9e>
 80048a0:	4629      	mov	r1, r5
 80048a2:	f000 fb21 	bl	8004ee8 <_malloc_r>
 80048a6:	4606      	mov	r6, r0
 80048a8:	b950      	cbnz	r0, 80048c0 <__ssputs_r+0x5c>
 80048aa:	230c      	movs	r3, #12
 80048ac:	f8ca 3000 	str.w	r3, [sl]
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	463a      	mov	r2, r7
 80048c2:	6921      	ldr	r1, [r4, #16]
 80048c4:	f7ff ff9a 	bl	80047fc <memcpy>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	6126      	str	r6, [r4, #16]
 80048d6:	6165      	str	r5, [r4, #20]
 80048d8:	443e      	add	r6, r7
 80048da:	1bed      	subs	r5, r5, r7
 80048dc:	6026      	str	r6, [r4, #0]
 80048de:	60a5      	str	r5, [r4, #8]
 80048e0:	464e      	mov	r6, r9
 80048e2:	454e      	cmp	r6, r9
 80048e4:	d900      	bls.n	80048e8 <__ssputs_r+0x84>
 80048e6:	464e      	mov	r6, r9
 80048e8:	4632      	mov	r2, r6
 80048ea:	4641      	mov	r1, r8
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	f000 fa93 	bl	8004e18 <memmove>
 80048f2:	68a3      	ldr	r3, [r4, #8]
 80048f4:	1b9b      	subs	r3, r3, r6
 80048f6:	60a3      	str	r3, [r4, #8]
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	441e      	add	r6, r3
 80048fc:	6026      	str	r6, [r4, #0]
 80048fe:	2000      	movs	r0, #0
 8004900:	e7dc      	b.n	80048bc <__ssputs_r+0x58>
 8004902:	462a      	mov	r2, r5
 8004904:	f000 fb4a 	bl	8004f9c <_realloc_r>
 8004908:	4606      	mov	r6, r0
 800490a:	2800      	cmp	r0, #0
 800490c:	d1e2      	bne.n	80048d4 <__ssputs_r+0x70>
 800490e:	6921      	ldr	r1, [r4, #16]
 8004910:	4650      	mov	r0, sl
 8004912:	f000 fa9b 	bl	8004e4c <_free_r>
 8004916:	e7c8      	b.n	80048aa <__ssputs_r+0x46>

08004918 <_svfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	461d      	mov	r5, r3
 800491e:	898b      	ldrh	r3, [r1, #12]
 8004920:	061f      	lsls	r7, r3, #24
 8004922:	b09d      	sub	sp, #116	; 0x74
 8004924:	4680      	mov	r8, r0
 8004926:	460c      	mov	r4, r1
 8004928:	4616      	mov	r6, r2
 800492a:	d50f      	bpl.n	800494c <_svfiprintf_r+0x34>
 800492c:	690b      	ldr	r3, [r1, #16]
 800492e:	b96b      	cbnz	r3, 800494c <_svfiprintf_r+0x34>
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	f000 fad9 	bl	8004ee8 <_malloc_r>
 8004936:	6020      	str	r0, [r4, #0]
 8004938:	6120      	str	r0, [r4, #16]
 800493a:	b928      	cbnz	r0, 8004948 <_svfiprintf_r+0x30>
 800493c:	230c      	movs	r3, #12
 800493e:	f8c8 3000 	str.w	r3, [r8]
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	e0c8      	b.n	8004ada <_svfiprintf_r+0x1c2>
 8004948:	2340      	movs	r3, #64	; 0x40
 800494a:	6163      	str	r3, [r4, #20]
 800494c:	2300      	movs	r3, #0
 800494e:	9309      	str	r3, [sp, #36]	; 0x24
 8004950:	2320      	movs	r3, #32
 8004952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004956:	2330      	movs	r3, #48	; 0x30
 8004958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800495c:	9503      	str	r5, [sp, #12]
 800495e:	f04f 0b01 	mov.w	fp, #1
 8004962:	4637      	mov	r7, r6
 8004964:	463d      	mov	r5, r7
 8004966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800496a:	b10b      	cbz	r3, 8004970 <_svfiprintf_r+0x58>
 800496c:	2b25      	cmp	r3, #37	; 0x25
 800496e:	d13e      	bne.n	80049ee <_svfiprintf_r+0xd6>
 8004970:	ebb7 0a06 	subs.w	sl, r7, r6
 8004974:	d00b      	beq.n	800498e <_svfiprintf_r+0x76>
 8004976:	4653      	mov	r3, sl
 8004978:	4632      	mov	r2, r6
 800497a:	4621      	mov	r1, r4
 800497c:	4640      	mov	r0, r8
 800497e:	f7ff ff71 	bl	8004864 <__ssputs_r>
 8004982:	3001      	adds	r0, #1
 8004984:	f000 80a4 	beq.w	8004ad0 <_svfiprintf_r+0x1b8>
 8004988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498a:	4453      	add	r3, sl
 800498c:	9309      	str	r3, [sp, #36]	; 0x24
 800498e:	783b      	ldrb	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 809d 	beq.w	8004ad0 <_svfiprintf_r+0x1b8>
 8004996:	2300      	movs	r3, #0
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049a8:	931a      	str	r3, [sp, #104]	; 0x68
 80049aa:	462f      	mov	r7, r5
 80049ac:	2205      	movs	r2, #5
 80049ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80049b2:	4850      	ldr	r0, [pc, #320]	; (8004af4 <_svfiprintf_r+0x1dc>)
 80049b4:	f7fb fc2c 	bl	8000210 <memchr>
 80049b8:	9b04      	ldr	r3, [sp, #16]
 80049ba:	b9d0      	cbnz	r0, 80049f2 <_svfiprintf_r+0xda>
 80049bc:	06d9      	lsls	r1, r3, #27
 80049be:	bf44      	itt	mi
 80049c0:	2220      	movmi	r2, #32
 80049c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049c6:	071a      	lsls	r2, r3, #28
 80049c8:	bf44      	itt	mi
 80049ca:	222b      	movmi	r2, #43	; 0x2b
 80049cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049d0:	782a      	ldrb	r2, [r5, #0]
 80049d2:	2a2a      	cmp	r2, #42	; 0x2a
 80049d4:	d015      	beq.n	8004a02 <_svfiprintf_r+0xea>
 80049d6:	9a07      	ldr	r2, [sp, #28]
 80049d8:	462f      	mov	r7, r5
 80049da:	2000      	movs	r0, #0
 80049dc:	250a      	movs	r5, #10
 80049de:	4639      	mov	r1, r7
 80049e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e4:	3b30      	subs	r3, #48	; 0x30
 80049e6:	2b09      	cmp	r3, #9
 80049e8:	d94d      	bls.n	8004a86 <_svfiprintf_r+0x16e>
 80049ea:	b1b8      	cbz	r0, 8004a1c <_svfiprintf_r+0x104>
 80049ec:	e00f      	b.n	8004a0e <_svfiprintf_r+0xf6>
 80049ee:	462f      	mov	r7, r5
 80049f0:	e7b8      	b.n	8004964 <_svfiprintf_r+0x4c>
 80049f2:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <_svfiprintf_r+0x1dc>)
 80049f4:	1a80      	subs	r0, r0, r2
 80049f6:	fa0b f000 	lsl.w	r0, fp, r0
 80049fa:	4318      	orrs	r0, r3
 80049fc:	9004      	str	r0, [sp, #16]
 80049fe:	463d      	mov	r5, r7
 8004a00:	e7d3      	b.n	80049aa <_svfiprintf_r+0x92>
 8004a02:	9a03      	ldr	r2, [sp, #12]
 8004a04:	1d11      	adds	r1, r2, #4
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	9103      	str	r1, [sp, #12]
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	db01      	blt.n	8004a12 <_svfiprintf_r+0xfa>
 8004a0e:	9207      	str	r2, [sp, #28]
 8004a10:	e004      	b.n	8004a1c <_svfiprintf_r+0x104>
 8004a12:	4252      	negs	r2, r2
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	9207      	str	r2, [sp, #28]
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	783b      	ldrb	r3, [r7, #0]
 8004a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a20:	d10c      	bne.n	8004a3c <_svfiprintf_r+0x124>
 8004a22:	787b      	ldrb	r3, [r7, #1]
 8004a24:	2b2a      	cmp	r3, #42	; 0x2a
 8004a26:	d133      	bne.n	8004a90 <_svfiprintf_r+0x178>
 8004a28:	9b03      	ldr	r3, [sp, #12]
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	9203      	str	r2, [sp, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bfb8      	it	lt
 8004a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a38:	3702      	adds	r7, #2
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	4d2e      	ldr	r5, [pc, #184]	; (8004af8 <_svfiprintf_r+0x1e0>)
 8004a3e:	7839      	ldrb	r1, [r7, #0]
 8004a40:	2203      	movs	r2, #3
 8004a42:	4628      	mov	r0, r5
 8004a44:	f7fb fbe4 	bl	8000210 <memchr>
 8004a48:	b138      	cbz	r0, 8004a5a <_svfiprintf_r+0x142>
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	1b40      	subs	r0, r0, r5
 8004a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	4303      	orrs	r3, r0
 8004a56:	3701      	adds	r7, #1
 8004a58:	9304      	str	r3, [sp, #16]
 8004a5a:	7839      	ldrb	r1, [r7, #0]
 8004a5c:	4827      	ldr	r0, [pc, #156]	; (8004afc <_svfiprintf_r+0x1e4>)
 8004a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a62:	2206      	movs	r2, #6
 8004a64:	1c7e      	adds	r6, r7, #1
 8004a66:	f7fb fbd3 	bl	8000210 <memchr>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d038      	beq.n	8004ae0 <_svfiprintf_r+0x1c8>
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <_svfiprintf_r+0x1e8>)
 8004a70:	bb13      	cbnz	r3, 8004ab8 <_svfiprintf_r+0x1a0>
 8004a72:	9b03      	ldr	r3, [sp, #12]
 8004a74:	3307      	adds	r3, #7
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	9303      	str	r3, [sp, #12]
 8004a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a80:	444b      	add	r3, r9
 8004a82:	9309      	str	r3, [sp, #36]	; 0x24
 8004a84:	e76d      	b.n	8004962 <_svfiprintf_r+0x4a>
 8004a86:	fb05 3202 	mla	r2, r5, r2, r3
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	460f      	mov	r7, r1
 8004a8e:	e7a6      	b.n	80049de <_svfiprintf_r+0xc6>
 8004a90:	2300      	movs	r3, #0
 8004a92:	3701      	adds	r7, #1
 8004a94:	9305      	str	r3, [sp, #20]
 8004a96:	4619      	mov	r1, r3
 8004a98:	250a      	movs	r5, #10
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa0:	3a30      	subs	r2, #48	; 0x30
 8004aa2:	2a09      	cmp	r2, #9
 8004aa4:	d903      	bls.n	8004aae <_svfiprintf_r+0x196>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0c8      	beq.n	8004a3c <_svfiprintf_r+0x124>
 8004aaa:	9105      	str	r1, [sp, #20]
 8004aac:	e7c6      	b.n	8004a3c <_svfiprintf_r+0x124>
 8004aae:	fb05 2101 	mla	r1, r5, r1, r2
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	e7f0      	b.n	8004a9a <_svfiprintf_r+0x182>
 8004ab8:	ab03      	add	r3, sp, #12
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4622      	mov	r2, r4
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <_svfiprintf_r+0x1ec>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004acc:	4681      	mov	r9, r0
 8004ace:	d1d6      	bne.n	8004a7e <_svfiprintf_r+0x166>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	065b      	lsls	r3, r3, #25
 8004ad4:	f53f af35 	bmi.w	8004942 <_svfiprintf_r+0x2a>
 8004ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ada:	b01d      	add	sp, #116	; 0x74
 8004adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <_svfiprintf_r+0x1ec>)
 8004ae8:	a904      	add	r1, sp, #16
 8004aea:	4640      	mov	r0, r8
 8004aec:	f000 f882 	bl	8004bf4 <_printf_i>
 8004af0:	e7ea      	b.n	8004ac8 <_svfiprintf_r+0x1b0>
 8004af2:	bf00      	nop
 8004af4:	080060c4 	.word	0x080060c4
 8004af8:	080060ca 	.word	0x080060ca
 8004afc:	080060ce 	.word	0x080060ce
 8004b00:	00000000 	.word	0x00000000
 8004b04:	08004865 	.word	0x08004865

08004b08 <_printf_common>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	4691      	mov	r9, r2
 8004b0e:	461f      	mov	r7, r3
 8004b10:	688a      	ldr	r2, [r1, #8]
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bfb8      	it	lt
 8004b1c:	4613      	movlt	r3, r2
 8004b1e:	f8c9 3000 	str.w	r3, [r9]
 8004b22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b26:	4606      	mov	r6, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	b112      	cbz	r2, 8004b32 <_printf_common+0x2a>
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f8c9 3000 	str.w	r3, [r9]
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	0699      	lsls	r1, r3, #26
 8004b36:	bf42      	ittt	mi
 8004b38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b3c:	3302      	addmi	r3, #2
 8004b3e:	f8c9 3000 	strmi.w	r3, [r9]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	f015 0506 	ands.w	r5, r5, #6
 8004b48:	d107      	bne.n	8004b5a <_printf_common+0x52>
 8004b4a:	f104 0a19 	add.w	sl, r4, #25
 8004b4e:	68e3      	ldr	r3, [r4, #12]
 8004b50:	f8d9 2000 	ldr.w	r2, [r9]
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	42ab      	cmp	r3, r5
 8004b58:	dc28      	bgt.n	8004bac <_printf_common+0xa4>
 8004b5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	3300      	adds	r3, #0
 8004b62:	bf18      	it	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	0692      	lsls	r2, r2, #26
 8004b68:	d42d      	bmi.n	8004bc6 <_printf_common+0xbe>
 8004b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4630      	mov	r0, r6
 8004b72:	47c0      	blx	r8
 8004b74:	3001      	adds	r0, #1
 8004b76:	d020      	beq.n	8004bba <_printf_common+0xb2>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	68e5      	ldr	r5, [r4, #12]
 8004b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b80:	f003 0306 	and.w	r3, r3, #6
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	bf08      	it	eq
 8004b88:	1aad      	subeq	r5, r5, r2
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	bf0c      	ite	eq
 8004b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b94:	2500      	movne	r5, #0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bfc4      	itt	gt
 8004b9a:	1a9b      	subgt	r3, r3, r2
 8004b9c:	18ed      	addgt	r5, r5, r3
 8004b9e:	f04f 0900 	mov.w	r9, #0
 8004ba2:	341a      	adds	r4, #26
 8004ba4:	454d      	cmp	r5, r9
 8004ba6:	d11a      	bne.n	8004bde <_printf_common+0xd6>
 8004ba8:	2000      	movs	r0, #0
 8004baa:	e008      	b.n	8004bbe <_printf_common+0xb6>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4652      	mov	r2, sl
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	47c0      	blx	r8
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d103      	bne.n	8004bc2 <_printf_common+0xba>
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	3501      	adds	r5, #1
 8004bc4:	e7c3      	b.n	8004b4e <_printf_common+0x46>
 8004bc6:	18e1      	adds	r1, r4, r3
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	2030      	movs	r0, #48	; 0x30
 8004bcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bd0:	4422      	add	r2, r4
 8004bd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bda:	3302      	adds	r3, #2
 8004bdc:	e7c5      	b.n	8004b6a <_printf_common+0x62>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4622      	mov	r2, r4
 8004be2:	4639      	mov	r1, r7
 8004be4:	4630      	mov	r0, r6
 8004be6:	47c0      	blx	r8
 8004be8:	3001      	adds	r0, #1
 8004bea:	d0e6      	beq.n	8004bba <_printf_common+0xb2>
 8004bec:	f109 0901 	add.w	r9, r9, #1
 8004bf0:	e7d8      	b.n	8004ba4 <_printf_common+0x9c>
	...

08004bf4 <_printf_i>:
 8004bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	7e09      	ldrb	r1, [r1, #24]
 8004c00:	b085      	sub	sp, #20
 8004c02:	296e      	cmp	r1, #110	; 0x6e
 8004c04:	4617      	mov	r7, r2
 8004c06:	4606      	mov	r6, r0
 8004c08:	4698      	mov	r8, r3
 8004c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c0c:	f000 80b3 	beq.w	8004d76 <_printf_i+0x182>
 8004c10:	d822      	bhi.n	8004c58 <_printf_i+0x64>
 8004c12:	2963      	cmp	r1, #99	; 0x63
 8004c14:	d036      	beq.n	8004c84 <_printf_i+0x90>
 8004c16:	d80a      	bhi.n	8004c2e <_printf_i+0x3a>
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	f000 80b9 	beq.w	8004d90 <_printf_i+0x19c>
 8004c1e:	2958      	cmp	r1, #88	; 0x58
 8004c20:	f000 8083 	beq.w	8004d2a <_printf_i+0x136>
 8004c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c2c:	e032      	b.n	8004c94 <_printf_i+0xa0>
 8004c2e:	2964      	cmp	r1, #100	; 0x64
 8004c30:	d001      	beq.n	8004c36 <_printf_i+0x42>
 8004c32:	2969      	cmp	r1, #105	; 0x69
 8004c34:	d1f6      	bne.n	8004c24 <_printf_i+0x30>
 8004c36:	6820      	ldr	r0, [r4, #0]
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	0605      	lsls	r5, r0, #24
 8004c3c:	f103 0104 	add.w	r1, r3, #4
 8004c40:	d52a      	bpl.n	8004c98 <_printf_i+0xa4>
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6011      	str	r1, [r2, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da03      	bge.n	8004c52 <_printf_i+0x5e>
 8004c4a:	222d      	movs	r2, #45	; 0x2d
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c52:	486f      	ldr	r0, [pc, #444]	; (8004e10 <_printf_i+0x21c>)
 8004c54:	220a      	movs	r2, #10
 8004c56:	e039      	b.n	8004ccc <_printf_i+0xd8>
 8004c58:	2973      	cmp	r1, #115	; 0x73
 8004c5a:	f000 809d 	beq.w	8004d98 <_printf_i+0x1a4>
 8004c5e:	d808      	bhi.n	8004c72 <_printf_i+0x7e>
 8004c60:	296f      	cmp	r1, #111	; 0x6f
 8004c62:	d020      	beq.n	8004ca6 <_printf_i+0xb2>
 8004c64:	2970      	cmp	r1, #112	; 0x70
 8004c66:	d1dd      	bne.n	8004c24 <_printf_i+0x30>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	f043 0320 	orr.w	r3, r3, #32
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	e003      	b.n	8004c7a <_printf_i+0x86>
 8004c72:	2975      	cmp	r1, #117	; 0x75
 8004c74:	d017      	beq.n	8004ca6 <_printf_i+0xb2>
 8004c76:	2978      	cmp	r1, #120	; 0x78
 8004c78:	d1d4      	bne.n	8004c24 <_printf_i+0x30>
 8004c7a:	2378      	movs	r3, #120	; 0x78
 8004c7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c80:	4864      	ldr	r0, [pc, #400]	; (8004e14 <_printf_i+0x220>)
 8004c82:	e055      	b.n	8004d30 <_printf_i+0x13c>
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	1d19      	adds	r1, r3, #4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6011      	str	r1, [r2, #0]
 8004c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c94:	2301      	movs	r3, #1
 8004c96:	e08c      	b.n	8004db2 <_printf_i+0x1be>
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6011      	str	r1, [r2, #0]
 8004c9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ca0:	bf18      	it	ne
 8004ca2:	b21b      	sxthne	r3, r3
 8004ca4:	e7cf      	b.n	8004c46 <_printf_i+0x52>
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	6825      	ldr	r5, [r4, #0]
 8004caa:	1d18      	adds	r0, r3, #4
 8004cac:	6010      	str	r0, [r2, #0]
 8004cae:	0628      	lsls	r0, r5, #24
 8004cb0:	d501      	bpl.n	8004cb6 <_printf_i+0xc2>
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	e002      	b.n	8004cbc <_printf_i+0xc8>
 8004cb6:	0668      	lsls	r0, r5, #25
 8004cb8:	d5fb      	bpl.n	8004cb2 <_printf_i+0xbe>
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	4854      	ldr	r0, [pc, #336]	; (8004e10 <_printf_i+0x21c>)
 8004cbe:	296f      	cmp	r1, #111	; 0x6f
 8004cc0:	bf14      	ite	ne
 8004cc2:	220a      	movne	r2, #10
 8004cc4:	2208      	moveq	r2, #8
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ccc:	6865      	ldr	r5, [r4, #4]
 8004cce:	60a5      	str	r5, [r4, #8]
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	f2c0 8095 	blt.w	8004e00 <_printf_i+0x20c>
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	f021 0104 	bic.w	r1, r1, #4
 8004cdc:	6021      	str	r1, [r4, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d13d      	bne.n	8004d5e <_printf_i+0x16a>
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	f040 808e 	bne.w	8004e04 <_printf_i+0x210>
 8004ce8:	4665      	mov	r5, ip
 8004cea:	2a08      	cmp	r2, #8
 8004cec:	d10b      	bne.n	8004d06 <_printf_i+0x112>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	07db      	lsls	r3, r3, #31
 8004cf2:	d508      	bpl.n	8004d06 <_printf_i+0x112>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	6862      	ldr	r2, [r4, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	bfde      	ittt	le
 8004cfc:	2330      	movle	r3, #48	; 0x30
 8004cfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d06:	ebac 0305 	sub.w	r3, ip, r5
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	f8cd 8000 	str.w	r8, [sp]
 8004d10:	463b      	mov	r3, r7
 8004d12:	aa03      	add	r2, sp, #12
 8004d14:	4621      	mov	r1, r4
 8004d16:	4630      	mov	r0, r6
 8004d18:	f7ff fef6 	bl	8004b08 <_printf_common>
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d14d      	bne.n	8004dbc <_printf_i+0x1c8>
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	b005      	add	sp, #20
 8004d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d2a:	4839      	ldr	r0, [pc, #228]	; (8004e10 <_printf_i+0x21c>)
 8004d2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d30:	6813      	ldr	r3, [r2, #0]
 8004d32:	6821      	ldr	r1, [r4, #0]
 8004d34:	1d1d      	adds	r5, r3, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6015      	str	r5, [r2, #0]
 8004d3a:	060a      	lsls	r2, r1, #24
 8004d3c:	d50b      	bpl.n	8004d56 <_printf_i+0x162>
 8004d3e:	07ca      	lsls	r2, r1, #31
 8004d40:	bf44      	itt	mi
 8004d42:	f041 0120 	orrmi.w	r1, r1, #32
 8004d46:	6021      	strmi	r1, [r4, #0]
 8004d48:	b91b      	cbnz	r3, 8004d52 <_printf_i+0x15e>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	f022 0220 	bic.w	r2, r2, #32
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	e7b7      	b.n	8004cc6 <_printf_i+0xd2>
 8004d56:	064d      	lsls	r5, r1, #25
 8004d58:	bf48      	it	mi
 8004d5a:	b29b      	uxthmi	r3, r3
 8004d5c:	e7ef      	b.n	8004d3e <_printf_i+0x14a>
 8004d5e:	4665      	mov	r5, ip
 8004d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d64:	fb02 3311 	mls	r3, r2, r1, r3
 8004d68:	5cc3      	ldrb	r3, [r0, r3]
 8004d6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d6e:	460b      	mov	r3, r1
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d1f5      	bne.n	8004d60 <_printf_i+0x16c>
 8004d74:	e7b9      	b.n	8004cea <_printf_i+0xf6>
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	6961      	ldr	r1, [r4, #20]
 8004d7c:	1d18      	adds	r0, r3, #4
 8004d7e:	6010      	str	r0, [r2, #0]
 8004d80:	0628      	lsls	r0, r5, #24
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	d501      	bpl.n	8004d8a <_printf_i+0x196>
 8004d86:	6019      	str	r1, [r3, #0]
 8004d88:	e002      	b.n	8004d90 <_printf_i+0x19c>
 8004d8a:	066a      	lsls	r2, r5, #25
 8004d8c:	d5fb      	bpl.n	8004d86 <_printf_i+0x192>
 8004d8e:	8019      	strh	r1, [r3, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	4665      	mov	r5, ip
 8004d96:	e7b9      	b.n	8004d0c <_printf_i+0x118>
 8004d98:	6813      	ldr	r3, [r2, #0]
 8004d9a:	1d19      	adds	r1, r3, #4
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	681d      	ldr	r5, [r3, #0]
 8004da0:	6862      	ldr	r2, [r4, #4]
 8004da2:	2100      	movs	r1, #0
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7fb fa33 	bl	8000210 <memchr>
 8004daa:	b108      	cbz	r0, 8004db0 <_printf_i+0x1bc>
 8004dac:	1b40      	subs	r0, r0, r5
 8004dae:	6060      	str	r0, [r4, #4]
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	2300      	movs	r3, #0
 8004db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dba:	e7a7      	b.n	8004d0c <_printf_i+0x118>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	462a      	mov	r2, r5
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d0aa      	beq.n	8004d20 <_printf_i+0x12c>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	079b      	lsls	r3, r3, #30
 8004dce:	d413      	bmi.n	8004df8 <_printf_i+0x204>
 8004dd0:	68e0      	ldr	r0, [r4, #12]
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	4298      	cmp	r0, r3
 8004dd6:	bfb8      	it	lt
 8004dd8:	4618      	movlt	r0, r3
 8004dda:	e7a3      	b.n	8004d24 <_printf_i+0x130>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	464a      	mov	r2, r9
 8004de0:	4639      	mov	r1, r7
 8004de2:	4630      	mov	r0, r6
 8004de4:	47c0      	blx	r8
 8004de6:	3001      	adds	r0, #1
 8004de8:	d09a      	beq.n	8004d20 <_printf_i+0x12c>
 8004dea:	3501      	adds	r5, #1
 8004dec:	68e3      	ldr	r3, [r4, #12]
 8004dee:	9a03      	ldr	r2, [sp, #12]
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	42ab      	cmp	r3, r5
 8004df4:	dcf2      	bgt.n	8004ddc <_printf_i+0x1e8>
 8004df6:	e7eb      	b.n	8004dd0 <_printf_i+0x1dc>
 8004df8:	2500      	movs	r5, #0
 8004dfa:	f104 0919 	add.w	r9, r4, #25
 8004dfe:	e7f5      	b.n	8004dec <_printf_i+0x1f8>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ac      	bne.n	8004d5e <_printf_i+0x16a>
 8004e04:	7803      	ldrb	r3, [r0, #0]
 8004e06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e0e:	e76c      	b.n	8004cea <_printf_i+0xf6>
 8004e10:	080060d5 	.word	0x080060d5
 8004e14:	080060e6 	.word	0x080060e6

08004e18 <memmove>:
 8004e18:	4288      	cmp	r0, r1
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	eb01 0302 	add.w	r3, r1, r2
 8004e20:	d807      	bhi.n	8004e32 <memmove+0x1a>
 8004e22:	1e42      	subs	r2, r0, #1
 8004e24:	4299      	cmp	r1, r3
 8004e26:	d00a      	beq.n	8004e3e <memmove+0x26>
 8004e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e30:	e7f8      	b.n	8004e24 <memmove+0xc>
 8004e32:	4283      	cmp	r3, r0
 8004e34:	d9f5      	bls.n	8004e22 <memmove+0xa>
 8004e36:	1881      	adds	r1, r0, r2
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	42d3      	cmn	r3, r2
 8004e3c:	d100      	bne.n	8004e40 <memmove+0x28>
 8004e3e:	bd10      	pop	{r4, pc}
 8004e40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e48:	e7f7      	b.n	8004e3a <memmove+0x22>
	...

08004e4c <_free_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4605      	mov	r5, r0
 8004e50:	2900      	cmp	r1, #0
 8004e52:	d045      	beq.n	8004ee0 <_free_r+0x94>
 8004e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e58:	1f0c      	subs	r4, r1, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bfb8      	it	lt
 8004e5e:	18e4      	addlt	r4, r4, r3
 8004e60:	f000 f8d2 	bl	8005008 <__malloc_lock>
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <_free_r+0x98>)
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	4610      	mov	r0, r2
 8004e6a:	b933      	cbnz	r3, 8004e7a <_free_r+0x2e>
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	6014      	str	r4, [r2, #0]
 8004e70:	4628      	mov	r0, r5
 8004e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e76:	f000 b8c8 	b.w	800500a <__malloc_unlock>
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	d90c      	bls.n	8004e98 <_free_r+0x4c>
 8004e7e:	6821      	ldr	r1, [r4, #0]
 8004e80:	1862      	adds	r2, r4, r1
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bf04      	itt	eq
 8004e86:	681a      	ldreq	r2, [r3, #0]
 8004e88:	685b      	ldreq	r3, [r3, #4]
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	bf04      	itt	eq
 8004e8e:	1852      	addeq	r2, r2, r1
 8004e90:	6022      	streq	r2, [r4, #0]
 8004e92:	6004      	str	r4, [r0, #0]
 8004e94:	e7ec      	b.n	8004e70 <_free_r+0x24>
 8004e96:	4613      	mov	r3, r2
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	b10a      	cbz	r2, 8004ea0 <_free_r+0x54>
 8004e9c:	42a2      	cmp	r2, r4
 8004e9e:	d9fa      	bls.n	8004e96 <_free_r+0x4a>
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	1858      	adds	r0, r3, r1
 8004ea4:	42a0      	cmp	r0, r4
 8004ea6:	d10b      	bne.n	8004ec0 <_free_r+0x74>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	4401      	add	r1, r0
 8004eac:	1858      	adds	r0, r3, r1
 8004eae:	4282      	cmp	r2, r0
 8004eb0:	6019      	str	r1, [r3, #0]
 8004eb2:	d1dd      	bne.n	8004e70 <_free_r+0x24>
 8004eb4:	6810      	ldr	r0, [r2, #0]
 8004eb6:	6852      	ldr	r2, [r2, #4]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	4401      	add	r1, r0
 8004ebc:	6019      	str	r1, [r3, #0]
 8004ebe:	e7d7      	b.n	8004e70 <_free_r+0x24>
 8004ec0:	d902      	bls.n	8004ec8 <_free_r+0x7c>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	e7d3      	b.n	8004e70 <_free_r+0x24>
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	1821      	adds	r1, r4, r0
 8004ecc:	428a      	cmp	r2, r1
 8004ece:	bf04      	itt	eq
 8004ed0:	6811      	ldreq	r1, [r2, #0]
 8004ed2:	6852      	ldreq	r2, [r2, #4]
 8004ed4:	6062      	str	r2, [r4, #4]
 8004ed6:	bf04      	itt	eq
 8004ed8:	1809      	addeq	r1, r1, r0
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	605c      	str	r4, [r3, #4]
 8004ede:	e7c7      	b.n	8004e70 <_free_r+0x24>
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200002a8 	.word	0x200002a8

08004ee8 <_malloc_r>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	1ccd      	adds	r5, r1, #3
 8004eec:	f025 0503 	bic.w	r5, r5, #3
 8004ef0:	3508      	adds	r5, #8
 8004ef2:	2d0c      	cmp	r5, #12
 8004ef4:	bf38      	it	cc
 8004ef6:	250c      	movcc	r5, #12
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	4606      	mov	r6, r0
 8004efc:	db01      	blt.n	8004f02 <_malloc_r+0x1a>
 8004efe:	42a9      	cmp	r1, r5
 8004f00:	d903      	bls.n	8004f0a <_malloc_r+0x22>
 8004f02:	230c      	movs	r3, #12
 8004f04:	6033      	str	r3, [r6, #0]
 8004f06:	2000      	movs	r0, #0
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
 8004f0a:	f000 f87d 	bl	8005008 <__malloc_lock>
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <_malloc_r+0xac>)
 8004f10:	6814      	ldr	r4, [r2, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	b991      	cbnz	r1, 8004f3c <_malloc_r+0x54>
 8004f16:	4c20      	ldr	r4, [pc, #128]	; (8004f98 <_malloc_r+0xb0>)
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	b91b      	cbnz	r3, 8004f24 <_malloc_r+0x3c>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f863 	bl	8004fe8 <_sbrk_r>
 8004f22:	6020      	str	r0, [r4, #0]
 8004f24:	4629      	mov	r1, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 f85e 	bl	8004fe8 <_sbrk_r>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d124      	bne.n	8004f7a <_malloc_r+0x92>
 8004f30:	230c      	movs	r3, #12
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	4630      	mov	r0, r6
 8004f36:	f000 f868 	bl	800500a <__malloc_unlock>
 8004f3a:	e7e4      	b.n	8004f06 <_malloc_r+0x1e>
 8004f3c:	680b      	ldr	r3, [r1, #0]
 8004f3e:	1b5b      	subs	r3, r3, r5
 8004f40:	d418      	bmi.n	8004f74 <_malloc_r+0x8c>
 8004f42:	2b0b      	cmp	r3, #11
 8004f44:	d90f      	bls.n	8004f66 <_malloc_r+0x7e>
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	50cd      	str	r5, [r1, r3]
 8004f4a:	18cc      	adds	r4, r1, r3
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f85c 	bl	800500a <__malloc_unlock>
 8004f52:	f104 000b 	add.w	r0, r4, #11
 8004f56:	1d23      	adds	r3, r4, #4
 8004f58:	f020 0007 	bic.w	r0, r0, #7
 8004f5c:	1ac3      	subs	r3, r0, r3
 8004f5e:	d0d3      	beq.n	8004f08 <_malloc_r+0x20>
 8004f60:	425a      	negs	r2, r3
 8004f62:	50e2      	str	r2, [r4, r3]
 8004f64:	e7d0      	b.n	8004f08 <_malloc_r+0x20>
 8004f66:	428c      	cmp	r4, r1
 8004f68:	684b      	ldr	r3, [r1, #4]
 8004f6a:	bf16      	itet	ne
 8004f6c:	6063      	strne	r3, [r4, #4]
 8004f6e:	6013      	streq	r3, [r2, #0]
 8004f70:	460c      	movne	r4, r1
 8004f72:	e7eb      	b.n	8004f4c <_malloc_r+0x64>
 8004f74:	460c      	mov	r4, r1
 8004f76:	6849      	ldr	r1, [r1, #4]
 8004f78:	e7cc      	b.n	8004f14 <_malloc_r+0x2c>
 8004f7a:	1cc4      	adds	r4, r0, #3
 8004f7c:	f024 0403 	bic.w	r4, r4, #3
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d005      	beq.n	8004f90 <_malloc_r+0xa8>
 8004f84:	1a21      	subs	r1, r4, r0
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 f82e 	bl	8004fe8 <_sbrk_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d0cf      	beq.n	8004f30 <_malloc_r+0x48>
 8004f90:	6025      	str	r5, [r4, #0]
 8004f92:	e7db      	b.n	8004f4c <_malloc_r+0x64>
 8004f94:	200002a8 	.word	0x200002a8
 8004f98:	200002ac 	.word	0x200002ac

08004f9c <_realloc_r>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	460e      	mov	r6, r1
 8004fa4:	b921      	cbnz	r1, 8004fb0 <_realloc_r+0x14>
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fac:	f7ff bf9c 	b.w	8004ee8 <_malloc_r>
 8004fb0:	b922      	cbnz	r2, 8004fbc <_realloc_r+0x20>
 8004fb2:	f7ff ff4b 	bl	8004e4c <_free_r>
 8004fb6:	4625      	mov	r5, r4
 8004fb8:	4628      	mov	r0, r5
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbc:	f000 f826 	bl	800500c <_malloc_usable_size_r>
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d20f      	bcs.n	8004fe4 <_realloc_r+0x48>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f7ff ff8e 	bl	8004ee8 <_malloc_r>
 8004fcc:	4605      	mov	r5, r0
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d0f2      	beq.n	8004fb8 <_realloc_r+0x1c>
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	f7ff fc11 	bl	80047fc <memcpy>
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f7ff ff35 	bl	8004e4c <_free_r>
 8004fe2:	e7e9      	b.n	8004fb8 <_realloc_r+0x1c>
 8004fe4:	4635      	mov	r5, r6
 8004fe6:	e7e7      	b.n	8004fb8 <_realloc_r+0x1c>

08004fe8 <_sbrk_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4c06      	ldr	r4, [pc, #24]	; (8005004 <_sbrk_r+0x1c>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4605      	mov	r5, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	f7fc fe08 	bl	8001c08 <_sbrk>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_sbrk_r+0x1a>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_sbrk_r+0x1a>
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20016ddc 	.word	0x20016ddc

08005008 <__malloc_lock>:
 8005008:	4770      	bx	lr

0800500a <__malloc_unlock>:
 800500a:	4770      	bx	lr

0800500c <_malloc_usable_size_r>:
 800500c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005010:	1f18      	subs	r0, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfbc      	itt	lt
 8005016:	580b      	ldrlt	r3, [r1, r0]
 8005018:	18c0      	addlt	r0, r0, r3
 800501a:	4770      	bx	lr
 800501c:	0000      	movs	r0, r0
	...

08005020 <sin>:
 8005020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005022:	ec51 0b10 	vmov	r0, r1, d0
 8005026:	4a20      	ldr	r2, [pc, #128]	; (80050a8 <sin+0x88>)
 8005028:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800502c:	4293      	cmp	r3, r2
 800502e:	dc07      	bgt.n	8005040 <sin+0x20>
 8005030:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80050a0 <sin+0x80>
 8005034:	2000      	movs	r0, #0
 8005036:	f000 fe37 	bl	8005ca8 <__kernel_sin>
 800503a:	ec51 0b10 	vmov	r0, r1, d0
 800503e:	e007      	b.n	8005050 <sin+0x30>
 8005040:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <sin+0x8c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	dd09      	ble.n	800505a <sin+0x3a>
 8005046:	ee10 2a10 	vmov	r2, s0
 800504a:	460b      	mov	r3, r1
 800504c:	f7fb f934 	bl	80002b8 <__aeabi_dsub>
 8005050:	ec41 0b10 	vmov	d0, r0, r1
 8005054:	b005      	add	sp, #20
 8005056:	f85d fb04 	ldr.w	pc, [sp], #4
 800505a:	4668      	mov	r0, sp
 800505c:	f000 f828 	bl	80050b0 <__ieee754_rem_pio2>
 8005060:	f000 0003 	and.w	r0, r0, #3
 8005064:	2801      	cmp	r0, #1
 8005066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800506a:	ed9d 0b00 	vldr	d0, [sp]
 800506e:	d004      	beq.n	800507a <sin+0x5a>
 8005070:	2802      	cmp	r0, #2
 8005072:	d005      	beq.n	8005080 <sin+0x60>
 8005074:	b970      	cbnz	r0, 8005094 <sin+0x74>
 8005076:	2001      	movs	r0, #1
 8005078:	e7dd      	b.n	8005036 <sin+0x16>
 800507a:	f000 fa0d 	bl	8005498 <__kernel_cos>
 800507e:	e7dc      	b.n	800503a <sin+0x1a>
 8005080:	2001      	movs	r0, #1
 8005082:	f000 fe11 	bl	8005ca8 <__kernel_sin>
 8005086:	ec53 2b10 	vmov	r2, r3, d0
 800508a:	ee10 0a10 	vmov	r0, s0
 800508e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005092:	e7dd      	b.n	8005050 <sin+0x30>
 8005094:	f000 fa00 	bl	8005498 <__kernel_cos>
 8005098:	e7f5      	b.n	8005086 <sin+0x66>
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w
	...
 80050a8:	3fe921fb 	.word	0x3fe921fb
 80050ac:	7fefffff 	.word	0x7fefffff

080050b0 <__ieee754_rem_pio2>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	ec57 6b10 	vmov	r6, r7, d0
 80050b8:	4bc3      	ldr	r3, [pc, #780]	; (80053c8 <__ieee754_rem_pio2+0x318>)
 80050ba:	b08d      	sub	sp, #52	; 0x34
 80050bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80050c0:	4598      	cmp	r8, r3
 80050c2:	4604      	mov	r4, r0
 80050c4:	9704      	str	r7, [sp, #16]
 80050c6:	dc07      	bgt.n	80050d8 <__ieee754_rem_pio2+0x28>
 80050c8:	2200      	movs	r2, #0
 80050ca:	2300      	movs	r3, #0
 80050cc:	ed84 0b00 	vstr	d0, [r4]
 80050d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80050d4:	2500      	movs	r5, #0
 80050d6:	e027      	b.n	8005128 <__ieee754_rem_pio2+0x78>
 80050d8:	4bbc      	ldr	r3, [pc, #752]	; (80053cc <__ieee754_rem_pio2+0x31c>)
 80050da:	4598      	cmp	r8, r3
 80050dc:	dc75      	bgt.n	80051ca <__ieee754_rem_pio2+0x11a>
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	4dbb      	ldr	r5, [pc, #748]	; (80053d0 <__ieee754_rem_pio2+0x320>)
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	ee10 0a10 	vmov	r0, s0
 80050e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2e0>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4639      	mov	r1, r7
 80050f0:	dd36      	ble.n	8005160 <__ieee754_rem_pio2+0xb0>
 80050f2:	f7fb f8e1 	bl	80002b8 <__aeabi_dsub>
 80050f6:	45a8      	cmp	r8, r5
 80050f8:	4606      	mov	r6, r0
 80050fa:	460f      	mov	r7, r1
 80050fc:	d018      	beq.n	8005130 <__ieee754_rem_pio2+0x80>
 80050fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e8>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb f8d8 	bl	80002b8 <__aeabi_dsub>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	e9c4 2300 	strd	r2, r3, [r4]
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb f8d0 	bl	80002b8 <__aeabi_dsub>
 8005118:	a39f      	add	r3, pc, #636	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e8>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f7fb f8cb 	bl	80002b8 <__aeabi_dsub>
 8005122:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005126:	2501      	movs	r5, #1
 8005128:	4628      	mov	r0, r5
 800512a:	b00d      	add	sp, #52	; 0x34
 800512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005130:	a39b      	add	r3, pc, #620	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2f0>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f8bf 	bl	80002b8 <__aeabi_dsub>
 800513a:	a39b      	add	r3, pc, #620	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f8>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	4606      	mov	r6, r0
 8005142:	460f      	mov	r7, r1
 8005144:	f7fb f8b8 	bl	80002b8 <__aeabi_dsub>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	e9c4 2300 	strd	r2, r3, [r4]
 8005150:	4630      	mov	r0, r6
 8005152:	4639      	mov	r1, r7
 8005154:	f7fb f8b0 	bl	80002b8 <__aeabi_dsub>
 8005158:	a393      	add	r3, pc, #588	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f8>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	e7de      	b.n	800511e <__ieee754_rem_pio2+0x6e>
 8005160:	f7fb f8ac 	bl	80002bc <__adddf3>
 8005164:	45a8      	cmp	r8, r5
 8005166:	4606      	mov	r6, r0
 8005168:	460f      	mov	r7, r1
 800516a:	d016      	beq.n	800519a <__ieee754_rem_pio2+0xea>
 800516c:	a38a      	add	r3, pc, #552	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e8>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f7fb f8a3 	bl	80002bc <__adddf3>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	e9c4 2300 	strd	r2, r3, [r4]
 800517e:	4630      	mov	r0, r6
 8005180:	4639      	mov	r1, r7
 8005182:	f7fb f899 	bl	80002b8 <__aeabi_dsub>
 8005186:	a384      	add	r3, pc, #528	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e8>)
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f7fb f896 	bl	80002bc <__adddf3>
 8005190:	f04f 35ff 	mov.w	r5, #4294967295
 8005194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005198:	e7c6      	b.n	8005128 <__ieee754_rem_pio2+0x78>
 800519a:	a381      	add	r3, pc, #516	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2f0>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb f88c 	bl	80002bc <__adddf3>
 80051a4:	a380      	add	r3, pc, #512	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f8>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	4606      	mov	r6, r0
 80051ac:	460f      	mov	r7, r1
 80051ae:	f7fb f885 	bl	80002bc <__adddf3>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	e9c4 2300 	strd	r2, r3, [r4]
 80051ba:	4630      	mov	r0, r6
 80051bc:	4639      	mov	r1, r7
 80051be:	f7fb f87b 	bl	80002b8 <__aeabi_dsub>
 80051c2:	a379      	add	r3, pc, #484	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	e7e0      	b.n	800518c <__ieee754_rem_pio2+0xdc>
 80051ca:	4b82      	ldr	r3, [pc, #520]	; (80053d4 <__ieee754_rem_pio2+0x324>)
 80051cc:	4598      	cmp	r8, r3
 80051ce:	f300 80d0 	bgt.w	8005372 <__ieee754_rem_pio2+0x2c2>
 80051d2:	f000 fe23 	bl	8005e1c <fabs>
 80051d6:	ec57 6b10 	vmov	r6, r7, d0
 80051da:	ee10 0a10 	vmov	r0, s0
 80051de:	a374      	add	r3, pc, #464	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x300>)
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb fa1f 	bl	8000628 <__aeabi_dmul>
 80051ea:	2200      	movs	r2, #0
 80051ec:	4b7a      	ldr	r3, [pc, #488]	; (80053d8 <__ieee754_rem_pio2+0x328>)
 80051ee:	f7fb f865 	bl	80002bc <__adddf3>
 80051f2:	f7fb fcb3 	bl	8000b5c <__aeabi_d2iz>
 80051f6:	4605      	mov	r5, r0
 80051f8:	f7fb f9ac 	bl	8000554 <__aeabi_i2d>
 80051fc:	a364      	add	r3, pc, #400	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2e0>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005206:	f7fb fa0f 	bl	8000628 <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4630      	mov	r0, r6
 8005210:	4639      	mov	r1, r7
 8005212:	f7fb f851 	bl	80002b8 <__aeabi_dsub>
 8005216:	a360      	add	r3, pc, #384	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e8>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	4682      	mov	sl, r0
 800521e:	468b      	mov	fp, r1
 8005220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005224:	f7fb fa00 	bl	8000628 <__aeabi_dmul>
 8005228:	2d1f      	cmp	r5, #31
 800522a:	4606      	mov	r6, r0
 800522c:	460f      	mov	r7, r1
 800522e:	dc0c      	bgt.n	800524a <__ieee754_rem_pio2+0x19a>
 8005230:	1e6a      	subs	r2, r5, #1
 8005232:	4b6a      	ldr	r3, [pc, #424]	; (80053dc <__ieee754_rem_pio2+0x32c>)
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	4543      	cmp	r3, r8
 800523a:	d006      	beq.n	800524a <__ieee754_rem_pio2+0x19a>
 800523c:	4632      	mov	r2, r6
 800523e:	463b      	mov	r3, r7
 8005240:	4650      	mov	r0, sl
 8005242:	4659      	mov	r1, fp
 8005244:	f7fb f838 	bl	80002b8 <__aeabi_dsub>
 8005248:	e00e      	b.n	8005268 <__ieee754_rem_pio2+0x1b8>
 800524a:	4632      	mov	r2, r6
 800524c:	463b      	mov	r3, r7
 800524e:	4650      	mov	r0, sl
 8005250:	4659      	mov	r1, fp
 8005252:	f7fb f831 	bl	80002b8 <__aeabi_dsub>
 8005256:	ea4f 5328 	mov.w	r3, r8, asr #20
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	9a05      	ldr	r2, [sp, #20]
 800525e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b10      	cmp	r3, #16
 8005266:	dc02      	bgt.n	800526e <__ieee754_rem_pio2+0x1be>
 8005268:	e9c4 0100 	strd	r0, r1, [r4]
 800526c:	e039      	b.n	80052e2 <__ieee754_rem_pio2+0x232>
 800526e:	a34c      	add	r3, pc, #304	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2f0>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fb f9d6 	bl	8000628 <__aeabi_dmul>
 800527c:	4606      	mov	r6, r0
 800527e:	460f      	mov	r7, r1
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4650      	mov	r0, sl
 8005286:	4659      	mov	r1, fp
 8005288:	f7fb f816 	bl	80002b8 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4680      	mov	r8, r0
 8005292:	4689      	mov	r9, r1
 8005294:	4650      	mov	r0, sl
 8005296:	4659      	mov	r1, fp
 8005298:	f7fb f80e 	bl	80002b8 <__aeabi_dsub>
 800529c:	4632      	mov	r2, r6
 800529e:	463b      	mov	r3, r7
 80052a0:	f7fb f80a 	bl	80002b8 <__aeabi_dsub>
 80052a4:	a340      	add	r3, pc, #256	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f8>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	4606      	mov	r6, r0
 80052ac:	460f      	mov	r7, r1
 80052ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b2:	f7fb f9b9 	bl	8000628 <__aeabi_dmul>
 80052b6:	4632      	mov	r2, r6
 80052b8:	463b      	mov	r3, r7
 80052ba:	f7fa fffd 	bl	80002b8 <__aeabi_dsub>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4606      	mov	r6, r0
 80052c4:	460f      	mov	r7, r1
 80052c6:	4640      	mov	r0, r8
 80052c8:	4649      	mov	r1, r9
 80052ca:	f7fa fff5 	bl	80002b8 <__aeabi_dsub>
 80052ce:	9a05      	ldr	r2, [sp, #20]
 80052d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b31      	cmp	r3, #49	; 0x31
 80052d8:	dc20      	bgt.n	800531c <__ieee754_rem_pio2+0x26c>
 80052da:	e9c4 0100 	strd	r0, r1, [r4]
 80052de:	46c2      	mov	sl, r8
 80052e0:	46cb      	mov	fp, r9
 80052e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80052e6:	4650      	mov	r0, sl
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	4659      	mov	r1, fp
 80052ee:	f7fa ffe3 	bl	80002b8 <__aeabi_dsub>
 80052f2:	463b      	mov	r3, r7
 80052f4:	4632      	mov	r2, r6
 80052f6:	f7fa ffdf 	bl	80002b8 <__aeabi_dsub>
 80052fa:	9b04      	ldr	r3, [sp, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005302:	f6bf af11 	bge.w	8005128 <__ieee754_rem_pio2+0x78>
 8005306:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	f8c4 8000 	str.w	r8, [r4]
 8005310:	60a0      	str	r0, [r4, #8]
 8005312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005316:	60e3      	str	r3, [r4, #12]
 8005318:	426d      	negs	r5, r5
 800531a:	e705      	b.n	8005128 <__ieee754_rem_pio2+0x78>
 800531c:	a326      	add	r3, pc, #152	; (adr r3, 80053b8 <__ieee754_rem_pio2+0x308>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005326:	f7fb f97f 	bl	8000628 <__aeabi_dmul>
 800532a:	4606      	mov	r6, r0
 800532c:	460f      	mov	r7, r1
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4640      	mov	r0, r8
 8005334:	4649      	mov	r1, r9
 8005336:	f7fa ffbf 	bl	80002b8 <__aeabi_dsub>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4682      	mov	sl, r0
 8005340:	468b      	mov	fp, r1
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f7fa ffb7 	bl	80002b8 <__aeabi_dsub>
 800534a:	4632      	mov	r2, r6
 800534c:	463b      	mov	r3, r7
 800534e:	f7fa ffb3 	bl	80002b8 <__aeabi_dsub>
 8005352:	a31b      	add	r3, pc, #108	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x310>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	4606      	mov	r6, r0
 800535a:	460f      	mov	r7, r1
 800535c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005360:	f7fb f962 	bl	8000628 <__aeabi_dmul>
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	f7fa ffa6 	bl	80002b8 <__aeabi_dsub>
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	e764      	b.n	800523c <__ieee754_rem_pio2+0x18c>
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <__ieee754_rem_pio2+0x330>)
 8005374:	4598      	cmp	r8, r3
 8005376:	dd35      	ble.n	80053e4 <__ieee754_rem_pio2+0x334>
 8005378:	ee10 2a10 	vmov	r2, s0
 800537c:	463b      	mov	r3, r7
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fa ff99 	bl	80002b8 <__aeabi_dsub>
 8005386:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800538a:	e9c4 0100 	strd	r0, r1, [r4]
 800538e:	e6a1      	b.n	80050d4 <__ieee754_rem_pio2+0x24>
 8005390:	54400000 	.word	0x54400000
 8005394:	3ff921fb 	.word	0x3ff921fb
 8005398:	1a626331 	.word	0x1a626331
 800539c:	3dd0b461 	.word	0x3dd0b461
 80053a0:	1a600000 	.word	0x1a600000
 80053a4:	3dd0b461 	.word	0x3dd0b461
 80053a8:	2e037073 	.word	0x2e037073
 80053ac:	3ba3198a 	.word	0x3ba3198a
 80053b0:	6dc9c883 	.word	0x6dc9c883
 80053b4:	3fe45f30 	.word	0x3fe45f30
 80053b8:	2e000000 	.word	0x2e000000
 80053bc:	3ba3198a 	.word	0x3ba3198a
 80053c0:	252049c1 	.word	0x252049c1
 80053c4:	397b839a 	.word	0x397b839a
 80053c8:	3fe921fb 	.word	0x3fe921fb
 80053cc:	4002d97b 	.word	0x4002d97b
 80053d0:	3ff921fb 	.word	0x3ff921fb
 80053d4:	413921fb 	.word	0x413921fb
 80053d8:	3fe00000 	.word	0x3fe00000
 80053dc:	080060f8 	.word	0x080060f8
 80053e0:	7fefffff 	.word	0x7fefffff
 80053e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80053e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80053ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80053f0:	4630      	mov	r0, r6
 80053f2:	460f      	mov	r7, r1
 80053f4:	f7fb fbb2 	bl	8000b5c <__aeabi_d2iz>
 80053f8:	f7fb f8ac 	bl	8000554 <__aeabi_i2d>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005408:	f7fa ff56 	bl	80002b8 <__aeabi_dsub>
 800540c:	2200      	movs	r2, #0
 800540e:	4b1f      	ldr	r3, [pc, #124]	; (800548c <__ieee754_rem_pio2+0x3dc>)
 8005410:	f7fb f90a 	bl	8000628 <__aeabi_dmul>
 8005414:	460f      	mov	r7, r1
 8005416:	4606      	mov	r6, r0
 8005418:	f7fb fba0 	bl	8000b5c <__aeabi_d2iz>
 800541c:	f7fb f89a 	bl	8000554 <__aeabi_i2d>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4630      	mov	r0, r6
 8005426:	4639      	mov	r1, r7
 8005428:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800542c:	f7fa ff44 	bl	80002b8 <__aeabi_dsub>
 8005430:	2200      	movs	r2, #0
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <__ieee754_rem_pio2+0x3dc>)
 8005434:	f7fb f8f8 	bl	8000628 <__aeabi_dmul>
 8005438:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800543c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005440:	f04f 0803 	mov.w	r8, #3
 8005444:	2600      	movs	r6, #0
 8005446:	2700      	movs	r7, #0
 8005448:	4632      	mov	r2, r6
 800544a:	463b      	mov	r3, r7
 800544c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005450:	f108 3aff 	add.w	sl, r8, #4294967295
 8005454:	f7fb fb50 	bl	8000af8 <__aeabi_dcmpeq>
 8005458:	b9b0      	cbnz	r0, 8005488 <__ieee754_rem_pio2+0x3d8>
 800545a:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <__ieee754_rem_pio2+0x3e0>)
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	2302      	movs	r3, #2
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	462a      	mov	r2, r5
 8005464:	4643      	mov	r3, r8
 8005466:	4621      	mov	r1, r4
 8005468:	a806      	add	r0, sp, #24
 800546a:	f000 f8dd 	bl	8005628 <__kernel_rem_pio2>
 800546e:	9b04      	ldr	r3, [sp, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	4605      	mov	r5, r0
 8005474:	f6bf ae58 	bge.w	8005128 <__ieee754_rem_pio2+0x78>
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	68e3      	ldr	r3, [r4, #12]
 8005482:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005486:	e746      	b.n	8005316 <__ieee754_rem_pio2+0x266>
 8005488:	46d0      	mov	r8, sl
 800548a:	e7dd      	b.n	8005448 <__ieee754_rem_pio2+0x398>
 800548c:	41700000 	.word	0x41700000
 8005490:	08006178 	.word	0x08006178
 8005494:	00000000 	.word	0x00000000

08005498 <__kernel_cos>:
 8005498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	ec59 8b10 	vmov	r8, r9, d0
 80054a0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80054a4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80054a8:	ed2d 8b02 	vpush	{d8}
 80054ac:	eeb0 8a41 	vmov.f32	s16, s2
 80054b0:	eef0 8a61 	vmov.f32	s17, s3
 80054b4:	da07      	bge.n	80054c6 <__kernel_cos+0x2e>
 80054b6:	ee10 0a10 	vmov	r0, s0
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fb fb4e 	bl	8000b5c <__aeabi_d2iz>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f000 8089 	beq.w	80055d8 <__kernel_cos+0x140>
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	4640      	mov	r0, r8
 80054cc:	4649      	mov	r1, r9
 80054ce:	f7fb f8ab 	bl	8000628 <__aeabi_dmul>
 80054d2:	2200      	movs	r2, #0
 80054d4:	4b4e      	ldr	r3, [pc, #312]	; (8005610 <__kernel_cos+0x178>)
 80054d6:	4604      	mov	r4, r0
 80054d8:	460d      	mov	r5, r1
 80054da:	f7fb f8a5 	bl	8000628 <__aeabi_dmul>
 80054de:	a340      	add	r3, pc, #256	; (adr r3, 80055e0 <__kernel_cos+0x148>)
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	4682      	mov	sl, r0
 80054e6:	468b      	mov	fp, r1
 80054e8:	4620      	mov	r0, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	f7fb f89c 	bl	8000628 <__aeabi_dmul>
 80054f0:	a33d      	add	r3, pc, #244	; (adr r3, 80055e8 <__kernel_cos+0x150>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fa fee1 	bl	80002bc <__adddf3>
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	f7fb f893 	bl	8000628 <__aeabi_dmul>
 8005502:	a33b      	add	r3, pc, #236	; (adr r3, 80055f0 <__kernel_cos+0x158>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fa fed6 	bl	80002b8 <__aeabi_dsub>
 800550c:	4622      	mov	r2, r4
 800550e:	462b      	mov	r3, r5
 8005510:	f7fb f88a 	bl	8000628 <__aeabi_dmul>
 8005514:	a338      	add	r3, pc, #224	; (adr r3, 80055f8 <__kernel_cos+0x160>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa fecf 	bl	80002bc <__adddf3>
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f7fb f881 	bl	8000628 <__aeabi_dmul>
 8005526:	a336      	add	r3, pc, #216	; (adr r3, 8005600 <__kernel_cos+0x168>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa fec4 	bl	80002b8 <__aeabi_dsub>
 8005530:	4622      	mov	r2, r4
 8005532:	462b      	mov	r3, r5
 8005534:	f7fb f878 	bl	8000628 <__aeabi_dmul>
 8005538:	a333      	add	r3, pc, #204	; (adr r3, 8005608 <__kernel_cos+0x170>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fa febd 	bl	80002bc <__adddf3>
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	f7fb f86f 	bl	8000628 <__aeabi_dmul>
 800554a:	4622      	mov	r2, r4
 800554c:	462b      	mov	r3, r5
 800554e:	f7fb f86b 	bl	8000628 <__aeabi_dmul>
 8005552:	ec53 2b18 	vmov	r2, r3, d8
 8005556:	4604      	mov	r4, r0
 8005558:	460d      	mov	r5, r1
 800555a:	4640      	mov	r0, r8
 800555c:	4649      	mov	r1, r9
 800555e:	f7fb f863 	bl	8000628 <__aeabi_dmul>
 8005562:	460b      	mov	r3, r1
 8005564:	4602      	mov	r2, r0
 8005566:	4629      	mov	r1, r5
 8005568:	4620      	mov	r0, r4
 800556a:	f7fa fea5 	bl	80002b8 <__aeabi_dsub>
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <__kernel_cos+0x17c>)
 8005570:	429e      	cmp	r6, r3
 8005572:	4680      	mov	r8, r0
 8005574:	4689      	mov	r9, r1
 8005576:	dc11      	bgt.n	800559c <__kernel_cos+0x104>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4650      	mov	r0, sl
 800557e:	4659      	mov	r1, fp
 8005580:	f7fa fe9a 	bl	80002b8 <__aeabi_dsub>
 8005584:	460b      	mov	r3, r1
 8005586:	4924      	ldr	r1, [pc, #144]	; (8005618 <__kernel_cos+0x180>)
 8005588:	4602      	mov	r2, r0
 800558a:	2000      	movs	r0, #0
 800558c:	f7fa fe94 	bl	80002b8 <__aeabi_dsub>
 8005590:	ecbd 8b02 	vpop	{d8}
 8005594:	ec41 0b10 	vmov	d0, r0, r1
 8005598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	4b1f      	ldr	r3, [pc, #124]	; (800561c <__kernel_cos+0x184>)
 800559e:	491e      	ldr	r1, [pc, #120]	; (8005618 <__kernel_cos+0x180>)
 80055a0:	429e      	cmp	r6, r3
 80055a2:	bfcc      	ite	gt
 80055a4:	4d1e      	ldrgt	r5, [pc, #120]	; (8005620 <__kernel_cos+0x188>)
 80055a6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80055aa:	2400      	movs	r4, #0
 80055ac:	4622      	mov	r2, r4
 80055ae:	462b      	mov	r3, r5
 80055b0:	2000      	movs	r0, #0
 80055b2:	f7fa fe81 	bl	80002b8 <__aeabi_dsub>
 80055b6:	4622      	mov	r2, r4
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	462b      	mov	r3, r5
 80055be:	4650      	mov	r0, sl
 80055c0:	4659      	mov	r1, fp
 80055c2:	f7fa fe79 	bl	80002b8 <__aeabi_dsub>
 80055c6:	4642      	mov	r2, r8
 80055c8:	464b      	mov	r3, r9
 80055ca:	f7fa fe75 	bl	80002b8 <__aeabi_dsub>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	e7d9      	b.n	800558c <__kernel_cos+0xf4>
 80055d8:	2000      	movs	r0, #0
 80055da:	490f      	ldr	r1, [pc, #60]	; (8005618 <__kernel_cos+0x180>)
 80055dc:	e7d8      	b.n	8005590 <__kernel_cos+0xf8>
 80055de:	bf00      	nop
 80055e0:	be8838d4 	.word	0xbe8838d4
 80055e4:	bda8fae9 	.word	0xbda8fae9
 80055e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80055ec:	3e21ee9e 	.word	0x3e21ee9e
 80055f0:	809c52ad 	.word	0x809c52ad
 80055f4:	3e927e4f 	.word	0x3e927e4f
 80055f8:	19cb1590 	.word	0x19cb1590
 80055fc:	3efa01a0 	.word	0x3efa01a0
 8005600:	16c15177 	.word	0x16c15177
 8005604:	3f56c16c 	.word	0x3f56c16c
 8005608:	5555554c 	.word	0x5555554c
 800560c:	3fa55555 	.word	0x3fa55555
 8005610:	3fe00000 	.word	0x3fe00000
 8005614:	3fd33332 	.word	0x3fd33332
 8005618:	3ff00000 	.word	0x3ff00000
 800561c:	3fe90000 	.word	0x3fe90000
 8005620:	3fd20000 	.word	0x3fd20000
 8005624:	00000000 	.word	0x00000000

08005628 <__kernel_rem_pio2>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	ed2d 8b02 	vpush	{d8}
 8005630:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005634:	1ed4      	subs	r4, r2, #3
 8005636:	9308      	str	r3, [sp, #32]
 8005638:	9101      	str	r1, [sp, #4]
 800563a:	4bc5      	ldr	r3, [pc, #788]	; (8005950 <__kernel_rem_pio2+0x328>)
 800563c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800563e:	9009      	str	r0, [sp, #36]	; 0x24
 8005640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	9b08      	ldr	r3, [sp, #32]
 8005648:	3b01      	subs	r3, #1
 800564a:	9307      	str	r3, [sp, #28]
 800564c:	2318      	movs	r3, #24
 800564e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005652:	f06f 0317 	mvn.w	r3, #23
 8005656:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800565a:	fb04 3303 	mla	r3, r4, r3, r3
 800565e:	eb03 0a02 	add.w	sl, r3, r2
 8005662:	9b04      	ldr	r3, [sp, #16]
 8005664:	9a07      	ldr	r2, [sp, #28]
 8005666:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005940 <__kernel_rem_pio2+0x318>
 800566a:	eb03 0802 	add.w	r8, r3, r2
 800566e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005670:	1aa7      	subs	r7, r4, r2
 8005672:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005676:	ae22      	add	r6, sp, #136	; 0x88
 8005678:	2500      	movs	r5, #0
 800567a:	4545      	cmp	r5, r8
 800567c:	dd13      	ble.n	80056a6 <__kernel_rem_pio2+0x7e>
 800567e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005940 <__kernel_rem_pio2+0x318>
 8005682:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005686:	2600      	movs	r6, #0
 8005688:	9b04      	ldr	r3, [sp, #16]
 800568a:	429e      	cmp	r6, r3
 800568c:	dc32      	bgt.n	80056f4 <__kernel_rem_pio2+0xcc>
 800568e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005690:	9302      	str	r3, [sp, #8]
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	199d      	adds	r5, r3, r6
 8005696:	ab22      	add	r3, sp, #136	; 0x88
 8005698:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800569c:	9306      	str	r3, [sp, #24]
 800569e:	ec59 8b18 	vmov	r8, r9, d8
 80056a2:	2700      	movs	r7, #0
 80056a4:	e01f      	b.n	80056e6 <__kernel_rem_pio2+0xbe>
 80056a6:	42ef      	cmn	r7, r5
 80056a8:	d407      	bmi.n	80056ba <__kernel_rem_pio2+0x92>
 80056aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056ae:	f7fa ff51 	bl	8000554 <__aeabi_i2d>
 80056b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056b6:	3501      	adds	r5, #1
 80056b8:	e7df      	b.n	800567a <__kernel_rem_pio2+0x52>
 80056ba:	ec51 0b18 	vmov	r0, r1, d8
 80056be:	e7f8      	b.n	80056b2 <__kernel_rem_pio2+0x8a>
 80056c0:	9906      	ldr	r1, [sp, #24]
 80056c2:	9d02      	ldr	r5, [sp, #8]
 80056c4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80056c8:	9106      	str	r1, [sp, #24]
 80056ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80056ce:	9502      	str	r5, [sp, #8]
 80056d0:	f7fa ffaa 	bl	8000628 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4640      	mov	r0, r8
 80056da:	4649      	mov	r1, r9
 80056dc:	f7fa fdee 	bl	80002bc <__adddf3>
 80056e0:	3701      	adds	r7, #1
 80056e2:	4680      	mov	r8, r0
 80056e4:	4689      	mov	r9, r1
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	429f      	cmp	r7, r3
 80056ea:	dde9      	ble.n	80056c0 <__kernel_rem_pio2+0x98>
 80056ec:	e8eb 8902 	strd	r8, r9, [fp], #8
 80056f0:	3601      	adds	r6, #1
 80056f2:	e7c9      	b.n	8005688 <__kernel_rem_pio2+0x60>
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	aa0e      	add	r2, sp, #56	; 0x38
 80056f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056fc:	930c      	str	r3, [sp, #48]	; 0x30
 80056fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005700:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005704:	9c04      	ldr	r4, [sp, #16]
 8005706:	930b      	str	r3, [sp, #44]	; 0x2c
 8005708:	ab9a      	add	r3, sp, #616	; 0x268
 800570a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800570e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005716:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800571a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800571e:	ab9a      	add	r3, sp, #616	; 0x268
 8005720:	445b      	add	r3, fp
 8005722:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005726:	2500      	movs	r5, #0
 8005728:	1b63      	subs	r3, r4, r5
 800572a:	2b00      	cmp	r3, #0
 800572c:	dc78      	bgt.n	8005820 <__kernel_rem_pio2+0x1f8>
 800572e:	4650      	mov	r0, sl
 8005730:	ec49 8b10 	vmov	d0, r8, r9
 8005734:	f000 fc00 	bl	8005f38 <scalbn>
 8005738:	ec57 6b10 	vmov	r6, r7, d0
 800573c:	2200      	movs	r2, #0
 800573e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005742:	ee10 0a10 	vmov	r0, s0
 8005746:	4639      	mov	r1, r7
 8005748:	f7fa ff6e 	bl	8000628 <__aeabi_dmul>
 800574c:	ec41 0b10 	vmov	d0, r0, r1
 8005750:	f000 fb6e 	bl	8005e30 <floor>
 8005754:	2200      	movs	r2, #0
 8005756:	ec51 0b10 	vmov	r0, r1, d0
 800575a:	4b7e      	ldr	r3, [pc, #504]	; (8005954 <__kernel_rem_pio2+0x32c>)
 800575c:	f7fa ff64 	bl	8000628 <__aeabi_dmul>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4630      	mov	r0, r6
 8005766:	4639      	mov	r1, r7
 8005768:	f7fa fda6 	bl	80002b8 <__aeabi_dsub>
 800576c:	460f      	mov	r7, r1
 800576e:	4606      	mov	r6, r0
 8005770:	f7fb f9f4 	bl	8000b5c <__aeabi_d2iz>
 8005774:	9006      	str	r0, [sp, #24]
 8005776:	f7fa feed 	bl	8000554 <__aeabi_i2d>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7fa fd99 	bl	80002b8 <__aeabi_dsub>
 8005786:	f1ba 0f00 	cmp.w	sl, #0
 800578a:	4606      	mov	r6, r0
 800578c:	460f      	mov	r7, r1
 800578e:	dd6c      	ble.n	800586a <__kernel_rem_pio2+0x242>
 8005790:	1e62      	subs	r2, r4, #1
 8005792:	ab0e      	add	r3, sp, #56	; 0x38
 8005794:	f1ca 0118 	rsb	r1, sl, #24
 8005798:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800579c:	9d06      	ldr	r5, [sp, #24]
 800579e:	fa40 f301 	asr.w	r3, r0, r1
 80057a2:	441d      	add	r5, r3
 80057a4:	408b      	lsls	r3, r1
 80057a6:	1ac0      	subs	r0, r0, r3
 80057a8:	ab0e      	add	r3, sp, #56	; 0x38
 80057aa:	9506      	str	r5, [sp, #24]
 80057ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80057b0:	f1ca 0317 	rsb	r3, sl, #23
 80057b4:	fa40 f303 	asr.w	r3, r0, r3
 80057b8:	9302      	str	r3, [sp, #8]
 80057ba:	9b02      	ldr	r3, [sp, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dd62      	ble.n	8005886 <__kernel_rem_pio2+0x25e>
 80057c0:	9b06      	ldr	r3, [sp, #24]
 80057c2:	2200      	movs	r2, #0
 80057c4:	3301      	adds	r3, #1
 80057c6:	9306      	str	r3, [sp, #24]
 80057c8:	4615      	mov	r5, r2
 80057ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80057ce:	4294      	cmp	r4, r2
 80057d0:	f300 8095 	bgt.w	80058fe <__kernel_rem_pio2+0x2d6>
 80057d4:	f1ba 0f00 	cmp.w	sl, #0
 80057d8:	dd07      	ble.n	80057ea <__kernel_rem_pio2+0x1c2>
 80057da:	f1ba 0f01 	cmp.w	sl, #1
 80057de:	f000 80a2 	beq.w	8005926 <__kernel_rem_pio2+0x2fe>
 80057e2:	f1ba 0f02 	cmp.w	sl, #2
 80057e6:	f000 80c1 	beq.w	800596c <__kernel_rem_pio2+0x344>
 80057ea:	9b02      	ldr	r3, [sp, #8]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d14a      	bne.n	8005886 <__kernel_rem_pio2+0x25e>
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	2000      	movs	r0, #0
 80057f6:	4958      	ldr	r1, [pc, #352]	; (8005958 <__kernel_rem_pio2+0x330>)
 80057f8:	f7fa fd5e 	bl	80002b8 <__aeabi_dsub>
 80057fc:	4606      	mov	r6, r0
 80057fe:	460f      	mov	r7, r1
 8005800:	2d00      	cmp	r5, #0
 8005802:	d040      	beq.n	8005886 <__kernel_rem_pio2+0x25e>
 8005804:	4650      	mov	r0, sl
 8005806:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005948 <__kernel_rem_pio2+0x320>
 800580a:	f000 fb95 	bl	8005f38 <scalbn>
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	ec53 2b10 	vmov	r2, r3, d0
 8005816:	f7fa fd4f 	bl	80002b8 <__aeabi_dsub>
 800581a:	4606      	mov	r6, r0
 800581c:	460f      	mov	r7, r1
 800581e:	e032      	b.n	8005886 <__kernel_rem_pio2+0x25e>
 8005820:	2200      	movs	r2, #0
 8005822:	4b4e      	ldr	r3, [pc, #312]	; (800595c <__kernel_rem_pio2+0x334>)
 8005824:	4640      	mov	r0, r8
 8005826:	4649      	mov	r1, r9
 8005828:	f7fa fefe 	bl	8000628 <__aeabi_dmul>
 800582c:	f7fb f996 	bl	8000b5c <__aeabi_d2iz>
 8005830:	f7fa fe90 	bl	8000554 <__aeabi_i2d>
 8005834:	2200      	movs	r2, #0
 8005836:	4b4a      	ldr	r3, [pc, #296]	; (8005960 <__kernel_rem_pio2+0x338>)
 8005838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583c:	f7fa fef4 	bl	8000628 <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4640      	mov	r0, r8
 8005846:	4649      	mov	r1, r9
 8005848:	f7fa fd36 	bl	80002b8 <__aeabi_dsub>
 800584c:	f7fb f986 	bl	8000b5c <__aeabi_d2iz>
 8005850:	ab0e      	add	r3, sp, #56	; 0x38
 8005852:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005856:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800585a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585e:	f7fa fd2d 	bl	80002bc <__adddf3>
 8005862:	3501      	adds	r5, #1
 8005864:	4680      	mov	r8, r0
 8005866:	4689      	mov	r9, r1
 8005868:	e75e      	b.n	8005728 <__kernel_rem_pio2+0x100>
 800586a:	d105      	bne.n	8005878 <__kernel_rem_pio2+0x250>
 800586c:	1e63      	subs	r3, r4, #1
 800586e:	aa0e      	add	r2, sp, #56	; 0x38
 8005870:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005874:	15c3      	asrs	r3, r0, #23
 8005876:	e79f      	b.n	80057b8 <__kernel_rem_pio2+0x190>
 8005878:	2200      	movs	r2, #0
 800587a:	4b3a      	ldr	r3, [pc, #232]	; (8005964 <__kernel_rem_pio2+0x33c>)
 800587c:	f7fb f95a 	bl	8000b34 <__aeabi_dcmpge>
 8005880:	2800      	cmp	r0, #0
 8005882:	d139      	bne.n	80058f8 <__kernel_rem_pio2+0x2d0>
 8005884:	9002      	str	r0, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	4630      	mov	r0, r6
 800588c:	4639      	mov	r1, r7
 800588e:	f7fb f933 	bl	8000af8 <__aeabi_dcmpeq>
 8005892:	2800      	cmp	r0, #0
 8005894:	f000 80c7 	beq.w	8005a26 <__kernel_rem_pio2+0x3fe>
 8005898:	1e65      	subs	r5, r4, #1
 800589a:	462b      	mov	r3, r5
 800589c:	2200      	movs	r2, #0
 800589e:	9904      	ldr	r1, [sp, #16]
 80058a0:	428b      	cmp	r3, r1
 80058a2:	da6a      	bge.n	800597a <__kernel_rem_pio2+0x352>
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	f000 8088 	beq.w	80059ba <__kernel_rem_pio2+0x392>
 80058aa:	ab0e      	add	r3, sp, #56	; 0x38
 80058ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80058b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80b4 	beq.w	8005a22 <__kernel_rem_pio2+0x3fa>
 80058ba:	4650      	mov	r0, sl
 80058bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005948 <__kernel_rem_pio2+0x320>
 80058c0:	f000 fb3a 	bl	8005f38 <scalbn>
 80058c4:	00ec      	lsls	r4, r5, #3
 80058c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80058c8:	191e      	adds	r6, r3, r4
 80058ca:	ec59 8b10 	vmov	r8, r9, d0
 80058ce:	f106 0a08 	add.w	sl, r6, #8
 80058d2:	462f      	mov	r7, r5
 80058d4:	2f00      	cmp	r7, #0
 80058d6:	f280 80df 	bge.w	8005a98 <__kernel_rem_pio2+0x470>
 80058da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005940 <__kernel_rem_pio2+0x318>
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	eba5 030a 	sub.w	r3, r5, sl
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f2c0 810a 	blt.w	8005b00 <__kernel_rem_pio2+0x4d8>
 80058ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005968 <__kernel_rem_pio2+0x340>
 80058f0:	ec59 8b18 	vmov	r8, r9, d8
 80058f4:	2700      	movs	r7, #0
 80058f6:	e0f5      	b.n	8005ae4 <__kernel_rem_pio2+0x4bc>
 80058f8:	2302      	movs	r3, #2
 80058fa:	9302      	str	r3, [sp, #8]
 80058fc:	e760      	b.n	80057c0 <__kernel_rem_pio2+0x198>
 80058fe:	ab0e      	add	r3, sp, #56	; 0x38
 8005900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005904:	b94d      	cbnz	r5, 800591a <__kernel_rem_pio2+0x2f2>
 8005906:	b12b      	cbz	r3, 8005914 <__kernel_rem_pio2+0x2ec>
 8005908:	a80e      	add	r0, sp, #56	; 0x38
 800590a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800590e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005912:	2301      	movs	r3, #1
 8005914:	3201      	adds	r2, #1
 8005916:	461d      	mov	r5, r3
 8005918:	e759      	b.n	80057ce <__kernel_rem_pio2+0x1a6>
 800591a:	a80e      	add	r0, sp, #56	; 0x38
 800591c:	1acb      	subs	r3, r1, r3
 800591e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005922:	462b      	mov	r3, r5
 8005924:	e7f6      	b.n	8005914 <__kernel_rem_pio2+0x2ec>
 8005926:	1e62      	subs	r2, r4, #1
 8005928:	ab0e      	add	r3, sp, #56	; 0x38
 800592a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005932:	a90e      	add	r1, sp, #56	; 0x38
 8005934:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005938:	e757      	b.n	80057ea <__kernel_rem_pio2+0x1c2>
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
	...
 800594c:	3ff00000 	.word	0x3ff00000
 8005950:	080062c0 	.word	0x080062c0
 8005954:	40200000 	.word	0x40200000
 8005958:	3ff00000 	.word	0x3ff00000
 800595c:	3e700000 	.word	0x3e700000
 8005960:	41700000 	.word	0x41700000
 8005964:	3fe00000 	.word	0x3fe00000
 8005968:	08006280 	.word	0x08006280
 800596c:	1e62      	subs	r2, r4, #1
 800596e:	ab0e      	add	r3, sp, #56	; 0x38
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005978:	e7db      	b.n	8005932 <__kernel_rem_pio2+0x30a>
 800597a:	a90e      	add	r1, sp, #56	; 0x38
 800597c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005980:	3b01      	subs	r3, #1
 8005982:	430a      	orrs	r2, r1
 8005984:	e78b      	b.n	800589e <__kernel_rem_pio2+0x276>
 8005986:	3301      	adds	r3, #1
 8005988:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800598c:	2900      	cmp	r1, #0
 800598e:	d0fa      	beq.n	8005986 <__kernel_rem_pio2+0x35e>
 8005990:	9a08      	ldr	r2, [sp, #32]
 8005992:	4422      	add	r2, r4
 8005994:	00d2      	lsls	r2, r2, #3
 8005996:	a922      	add	r1, sp, #136	; 0x88
 8005998:	18e3      	adds	r3, r4, r3
 800599a:	9206      	str	r2, [sp, #24]
 800599c:	440a      	add	r2, r1
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	f10b 0108 	add.w	r1, fp, #8
 80059a4:	f102 0308 	add.w	r3, r2, #8
 80059a8:	1c66      	adds	r6, r4, #1
 80059aa:	910a      	str	r1, [sp, #40]	; 0x28
 80059ac:	2500      	movs	r5, #0
 80059ae:	930d      	str	r3, [sp, #52]	; 0x34
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	42b3      	cmp	r3, r6
 80059b4:	da04      	bge.n	80059c0 <__kernel_rem_pio2+0x398>
 80059b6:	461c      	mov	r4, r3
 80059b8:	e6a6      	b.n	8005708 <__kernel_rem_pio2+0xe0>
 80059ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059bc:	2301      	movs	r3, #1
 80059be:	e7e3      	b.n	8005988 <__kernel_rem_pio2+0x360>
 80059c0:	9b06      	ldr	r3, [sp, #24]
 80059c2:	18ef      	adds	r7, r5, r3
 80059c4:	ab22      	add	r3, sp, #136	; 0x88
 80059c6:	441f      	add	r7, r3
 80059c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059ce:	f7fa fdc1 	bl	8000554 <__aeabi_i2d>
 80059d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d4:	461c      	mov	r4, r3
 80059d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d8:	e9c7 0100 	strd	r0, r1, [r7]
 80059dc:	eb03 0b05 	add.w	fp, r3, r5
 80059e0:	2700      	movs	r7, #0
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	f04f 0900 	mov.w	r9, #0
 80059ea:	9b07      	ldr	r3, [sp, #28]
 80059ec:	429f      	cmp	r7, r3
 80059ee:	dd08      	ble.n	8005a02 <__kernel_rem_pio2+0x3da>
 80059f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f2:	aa72      	add	r2, sp, #456	; 0x1c8
 80059f4:	18eb      	adds	r3, r5, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80059fc:	3601      	adds	r6, #1
 80059fe:	3508      	adds	r5, #8
 8005a00:	e7d6      	b.n	80059b0 <__kernel_rem_pio2+0x388>
 8005a02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005a0a:	f7fa fe0d 	bl	8000628 <__aeabi_dmul>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4640      	mov	r0, r8
 8005a14:	4649      	mov	r1, r9
 8005a16:	f7fa fc51 	bl	80002bc <__adddf3>
 8005a1a:	3701      	adds	r7, #1
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	4689      	mov	r9, r1
 8005a20:	e7e3      	b.n	80059ea <__kernel_rem_pio2+0x3c2>
 8005a22:	3d01      	subs	r5, #1
 8005a24:	e741      	b.n	80058aa <__kernel_rem_pio2+0x282>
 8005a26:	f1ca 0000 	rsb	r0, sl, #0
 8005a2a:	ec47 6b10 	vmov	d0, r6, r7
 8005a2e:	f000 fa83 	bl	8005f38 <scalbn>
 8005a32:	ec57 6b10 	vmov	r6, r7, d0
 8005a36:	2200      	movs	r2, #0
 8005a38:	4b99      	ldr	r3, [pc, #612]	; (8005ca0 <__kernel_rem_pio2+0x678>)
 8005a3a:	ee10 0a10 	vmov	r0, s0
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fb f878 	bl	8000b34 <__aeabi_dcmpge>
 8005a44:	b1f8      	cbz	r0, 8005a86 <__kernel_rem_pio2+0x45e>
 8005a46:	2200      	movs	r2, #0
 8005a48:	4b96      	ldr	r3, [pc, #600]	; (8005ca4 <__kernel_rem_pio2+0x67c>)
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fa fdeb 	bl	8000628 <__aeabi_dmul>
 8005a52:	f7fb f883 	bl	8000b5c <__aeabi_d2iz>
 8005a56:	4680      	mov	r8, r0
 8005a58:	f7fa fd7c 	bl	8000554 <__aeabi_i2d>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4b90      	ldr	r3, [pc, #576]	; (8005ca0 <__kernel_rem_pio2+0x678>)
 8005a60:	f7fa fde2 	bl	8000628 <__aeabi_dmul>
 8005a64:	460b      	mov	r3, r1
 8005a66:	4602      	mov	r2, r0
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7fa fc24 	bl	80002b8 <__aeabi_dsub>
 8005a70:	f7fb f874 	bl	8000b5c <__aeabi_d2iz>
 8005a74:	1c65      	adds	r5, r4, #1
 8005a76:	ab0e      	add	r3, sp, #56	; 0x38
 8005a78:	f10a 0a18 	add.w	sl, sl, #24
 8005a7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a80:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005a84:	e719      	b.n	80058ba <__kernel_rem_pio2+0x292>
 8005a86:	4630      	mov	r0, r6
 8005a88:	4639      	mov	r1, r7
 8005a8a:	f7fb f867 	bl	8000b5c <__aeabi_d2iz>
 8005a8e:	ab0e      	add	r3, sp, #56	; 0x38
 8005a90:	4625      	mov	r5, r4
 8005a92:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a96:	e710      	b.n	80058ba <__kernel_rem_pio2+0x292>
 8005a98:	ab0e      	add	r3, sp, #56	; 0x38
 8005a9a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005a9e:	f7fa fd59 	bl	8000554 <__aeabi_i2d>
 8005aa2:	4642      	mov	r2, r8
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	f7fa fdbf 	bl	8000628 <__aeabi_dmul>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005ab0:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <__kernel_rem_pio2+0x67c>)
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	f7fa fdb7 	bl	8000628 <__aeabi_dmul>
 8005aba:	3f01      	subs	r7, #1
 8005abc:	4680      	mov	r8, r0
 8005abe:	4689      	mov	r9, r1
 8005ac0:	e708      	b.n	80058d4 <__kernel_rem_pio2+0x2ac>
 8005ac2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005ace:	f7fa fdab 	bl	8000628 <__aeabi_dmul>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	4649      	mov	r1, r9
 8005ada:	f7fa fbef 	bl	80002bc <__adddf3>
 8005ade:	3701      	adds	r7, #1
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	4689      	mov	r9, r1
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	429f      	cmp	r7, r3
 8005ae8:	dc01      	bgt.n	8005aee <__kernel_rem_pio2+0x4c6>
 8005aea:	45ba      	cmp	sl, r7
 8005aec:	dae9      	bge.n	8005ac2 <__kernel_rem_pio2+0x49a>
 8005aee:	ab4a      	add	r3, sp, #296	; 0x128
 8005af0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005af4:	e9c3 8900 	strd	r8, r9, [r3]
 8005af8:	f10a 0a01 	add.w	sl, sl, #1
 8005afc:	3e08      	subs	r6, #8
 8005afe:	e6f0      	b.n	80058e2 <__kernel_rem_pio2+0x2ba>
 8005b00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d85b      	bhi.n	8005bbe <__kernel_rem_pio2+0x596>
 8005b06:	e8df f003 	tbb	[pc, r3]
 8005b0a:	264a      	.short	0x264a
 8005b0c:	0226      	.short	0x0226
 8005b0e:	ab9a      	add	r3, sp, #616	; 0x268
 8005b10:	441c      	add	r4, r3
 8005b12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005b16:	46a2      	mov	sl, r4
 8005b18:	46ab      	mov	fp, r5
 8005b1a:	f1bb 0f00 	cmp.w	fp, #0
 8005b1e:	dc6c      	bgt.n	8005bfa <__kernel_rem_pio2+0x5d2>
 8005b20:	46a2      	mov	sl, r4
 8005b22:	46ab      	mov	fp, r5
 8005b24:	f1bb 0f01 	cmp.w	fp, #1
 8005b28:	f300 8086 	bgt.w	8005c38 <__kernel_rem_pio2+0x610>
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	2100      	movs	r1, #0
 8005b30:	2d01      	cmp	r5, #1
 8005b32:	f300 80a0 	bgt.w	8005c76 <__kernel_rem_pio2+0x64e>
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005b3c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 809e 	bne.w	8005c82 <__kernel_rem_pio2+0x65a>
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	e9c3 7800 	strd	r7, r8, [r3]
 8005b4c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005b50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005b54:	e033      	b.n	8005bbe <__kernel_rem_pio2+0x596>
 8005b56:	3408      	adds	r4, #8
 8005b58:	ab4a      	add	r3, sp, #296	; 0x128
 8005b5a:	441c      	add	r4, r3
 8005b5c:	462e      	mov	r6, r5
 8005b5e:	2000      	movs	r0, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	da3a      	bge.n	8005bdc <__kernel_rem_pio2+0x5b4>
 8005b66:	9b02      	ldr	r3, [sp, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d03d      	beq.n	8005be8 <__kernel_rem_pio2+0x5c0>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b72:	9c01      	ldr	r4, [sp, #4]
 8005b74:	e9c4 2300 	strd	r2, r3, [r4]
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005b80:	f7fa fb9a 	bl	80002b8 <__aeabi_dsub>
 8005b84:	ae4c      	add	r6, sp, #304	; 0x130
 8005b86:	2401      	movs	r4, #1
 8005b88:	42a5      	cmp	r5, r4
 8005b8a:	da30      	bge.n	8005bee <__kernel_rem_pio2+0x5c6>
 8005b8c:	9b02      	ldr	r3, [sp, #8]
 8005b8e:	b113      	cbz	r3, 8005b96 <__kernel_rem_pio2+0x56e>
 8005b90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b94:	4619      	mov	r1, r3
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005b9c:	e00f      	b.n	8005bbe <__kernel_rem_pio2+0x596>
 8005b9e:	ab9a      	add	r3, sp, #616	; 0x268
 8005ba0:	441c      	add	r4, r3
 8005ba2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	2100      	movs	r1, #0
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	da10      	bge.n	8005bd0 <__kernel_rem_pio2+0x5a8>
 8005bae:	9b02      	ldr	r3, [sp, #8]
 8005bb0:	b113      	cbz	r3, 8005bb8 <__kernel_rem_pio2+0x590>
 8005bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	e9c3 0100 	strd	r0, r1, [r3]
 8005bbe:	9b06      	ldr	r3, [sp, #24]
 8005bc0:	f003 0007 	and.w	r0, r3, #7
 8005bc4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005bc8:	ecbd 8b02 	vpop	{d8}
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bd4:	f7fa fb72 	bl	80002bc <__adddf3>
 8005bd8:	3d01      	subs	r5, #1
 8005bda:	e7e6      	b.n	8005baa <__kernel_rem_pio2+0x582>
 8005bdc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005be0:	f7fa fb6c 	bl	80002bc <__adddf3>
 8005be4:	3e01      	subs	r6, #1
 8005be6:	e7bc      	b.n	8005b62 <__kernel_rem_pio2+0x53a>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	e7c1      	b.n	8005b72 <__kernel_rem_pio2+0x54a>
 8005bee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005bf2:	f7fa fb63 	bl	80002bc <__adddf3>
 8005bf6:	3401      	adds	r4, #1
 8005bf8:	e7c6      	b.n	8005b88 <__kernel_rem_pio2+0x560>
 8005bfa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005bfe:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c02:	4640      	mov	r0, r8
 8005c04:	ec53 2b17 	vmov	r2, r3, d7
 8005c08:	4649      	mov	r1, r9
 8005c0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c0e:	f7fa fb55 	bl	80002bc <__adddf3>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	f7fa fb4b 	bl	80002b8 <__aeabi_dsub>
 8005c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c26:	f7fa fb49 	bl	80002bc <__adddf3>
 8005c2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c2e:	e9ca 0100 	strd	r0, r1, [sl]
 8005c32:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005c36:	e770      	b.n	8005b1a <__kernel_rem_pio2+0x4f2>
 8005c38:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005c3c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c40:	4630      	mov	r0, r6
 8005c42:	ec53 2b17 	vmov	r2, r3, d7
 8005c46:	4639      	mov	r1, r7
 8005c48:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c4c:	f7fa fb36 	bl	80002bc <__adddf3>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4680      	mov	r8, r0
 8005c56:	4689      	mov	r9, r1
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa fb2c 	bl	80002b8 <__aeabi_dsub>
 8005c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c64:	f7fa fb2a 	bl	80002bc <__adddf3>
 8005c68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c6c:	e9ca 0100 	strd	r0, r1, [sl]
 8005c70:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005c74:	e756      	b.n	8005b24 <__kernel_rem_pio2+0x4fc>
 8005c76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c7a:	f7fa fb1f 	bl	80002bc <__adddf3>
 8005c7e:	3d01      	subs	r5, #1
 8005c80:	e756      	b.n	8005b30 <__kernel_rem_pio2+0x508>
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	9a01      	ldr	r2, [sp, #4]
 8005c86:	601f      	str	r7, [r3, #0]
 8005c88:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005c8c:	605c      	str	r4, [r3, #4]
 8005c8e:	609d      	str	r5, [r3, #8]
 8005c90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c94:	60d3      	str	r3, [r2, #12]
 8005c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c9a:	6110      	str	r0, [r2, #16]
 8005c9c:	6153      	str	r3, [r2, #20]
 8005c9e:	e78e      	b.n	8005bbe <__kernel_rem_pio2+0x596>
 8005ca0:	41700000 	.word	0x41700000
 8005ca4:	3e700000 	.word	0x3e700000

08005ca8 <__kernel_sin>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	ec55 4b10 	vmov	r4, r5, d0
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005cb6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005cba:	ed8d 1b00 	vstr	d1, [sp]
 8005cbe:	9002      	str	r0, [sp, #8]
 8005cc0:	da06      	bge.n	8005cd0 <__kernel_sin+0x28>
 8005cc2:	ee10 0a10 	vmov	r0, s0
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa ff48 	bl	8000b5c <__aeabi_d2iz>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d051      	beq.n	8005d74 <__kernel_sin+0xcc>
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	462b      	mov	r3, r5
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fca6 	bl	8000628 <__aeabi_dmul>
 8005cdc:	4682      	mov	sl, r0
 8005cde:	468b      	mov	fp, r1
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7fa fc9e 	bl	8000628 <__aeabi_dmul>
 8005cec:	a341      	add	r3, pc, #260	; (adr r3, 8005df4 <__kernel_sin+0x14c>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	4689      	mov	r9, r1
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	f7fa fc95 	bl	8000628 <__aeabi_dmul>
 8005cfe:	a33f      	add	r3, pc, #252	; (adr r3, 8005dfc <__kernel_sin+0x154>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fad8 	bl	80002b8 <__aeabi_dsub>
 8005d08:	4652      	mov	r2, sl
 8005d0a:	465b      	mov	r3, fp
 8005d0c:	f7fa fc8c 	bl	8000628 <__aeabi_dmul>
 8005d10:	a33c      	add	r3, pc, #240	; (adr r3, 8005e04 <__kernel_sin+0x15c>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fad1 	bl	80002bc <__adddf3>
 8005d1a:	4652      	mov	r2, sl
 8005d1c:	465b      	mov	r3, fp
 8005d1e:	f7fa fc83 	bl	8000628 <__aeabi_dmul>
 8005d22:	a33a      	add	r3, pc, #232	; (adr r3, 8005e0c <__kernel_sin+0x164>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fac6 	bl	80002b8 <__aeabi_dsub>
 8005d2c:	4652      	mov	r2, sl
 8005d2e:	465b      	mov	r3, fp
 8005d30:	f7fa fc7a 	bl	8000628 <__aeabi_dmul>
 8005d34:	a337      	add	r3, pc, #220	; (adr r3, 8005e14 <__kernel_sin+0x16c>)
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa fabf 	bl	80002bc <__adddf3>
 8005d3e:	9b02      	ldr	r3, [sp, #8]
 8005d40:	4606      	mov	r6, r0
 8005d42:	460f      	mov	r7, r1
 8005d44:	b9db      	cbnz	r3, 8005d7e <__kernel_sin+0xd6>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	f7fa fc6b 	bl	8000628 <__aeabi_dmul>
 8005d52:	a325      	add	r3, pc, #148	; (adr r3, 8005de8 <__kernel_sin+0x140>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f7fa faae 	bl	80002b8 <__aeabi_dsub>
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	f7fa fc62 	bl	8000628 <__aeabi_dmul>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4620      	mov	r0, r4
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	f7fa faa6 	bl	80002bc <__adddf3>
 8005d70:	4604      	mov	r4, r0
 8005d72:	460d      	mov	r5, r1
 8005d74:	ec45 4b10 	vmov	d0, r4, r5
 8005d78:	b005      	add	sp, #20
 8005d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7e:	2200      	movs	r2, #0
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <__kernel_sin+0x148>)
 8005d82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d86:	f7fa fc4f 	bl	8000628 <__aeabi_dmul>
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d90:	463b      	mov	r3, r7
 8005d92:	4640      	mov	r0, r8
 8005d94:	4649      	mov	r1, r9
 8005d96:	f7fa fc47 	bl	8000628 <__aeabi_dmul>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da2:	f7fa fa89 	bl	80002b8 <__aeabi_dsub>
 8005da6:	4652      	mov	r2, sl
 8005da8:	465b      	mov	r3, fp
 8005daa:	f7fa fc3d 	bl	8000628 <__aeabi_dmul>
 8005dae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005db2:	f7fa fa81 	bl	80002b8 <__aeabi_dsub>
 8005db6:	a30c      	add	r3, pc, #48	; (adr r3, 8005de8 <__kernel_sin+0x140>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	460f      	mov	r7, r1
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	f7fa fc30 	bl	8000628 <__aeabi_dmul>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4630      	mov	r0, r6
 8005dce:	4639      	mov	r1, r7
 8005dd0:	f7fa fa74 	bl	80002bc <__adddf3>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fa6c 	bl	80002b8 <__aeabi_dsub>
 8005de0:	e7c6      	b.n	8005d70 <__kernel_sin+0xc8>
 8005de2:	bf00      	nop
 8005de4:	f3af 8000 	nop.w
 8005de8:	55555549 	.word	0x55555549
 8005dec:	3fc55555 	.word	0x3fc55555
 8005df0:	3fe00000 	.word	0x3fe00000
 8005df4:	5acfd57c 	.word	0x5acfd57c
 8005df8:	3de5d93a 	.word	0x3de5d93a
 8005dfc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e00:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e04:	57b1fe7d 	.word	0x57b1fe7d
 8005e08:	3ec71de3 	.word	0x3ec71de3
 8005e0c:	19c161d5 	.word	0x19c161d5
 8005e10:	3f2a01a0 	.word	0x3f2a01a0
 8005e14:	1110f8a6 	.word	0x1110f8a6
 8005e18:	3f811111 	.word	0x3f811111

08005e1c <fabs>:
 8005e1c:	ec51 0b10 	vmov	r0, r1, d0
 8005e20:	ee10 2a10 	vmov	r2, s0
 8005e24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e28:	ec43 2b10 	vmov	d0, r2, r3
 8005e2c:	4770      	bx	lr
	...

08005e30 <floor>:
 8005e30:	ec51 0b10 	vmov	r0, r1, d0
 8005e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005e40:	2e13      	cmp	r6, #19
 8005e42:	460c      	mov	r4, r1
 8005e44:	ee10 5a10 	vmov	r5, s0
 8005e48:	4680      	mov	r8, r0
 8005e4a:	dc34      	bgt.n	8005eb6 <floor+0x86>
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	da16      	bge.n	8005e7e <floor+0x4e>
 8005e50:	a335      	add	r3, pc, #212	; (adr r3, 8005f28 <floor+0xf8>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fa31 	bl	80002bc <__adddf3>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f7fa fe73 	bl	8000b48 <__aeabi_dcmpgt>
 8005e62:	b148      	cbz	r0, 8005e78 <floor+0x48>
 8005e64:	2c00      	cmp	r4, #0
 8005e66:	da59      	bge.n	8005f1c <floor+0xec>
 8005e68:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005e6c:	4a30      	ldr	r2, [pc, #192]	; (8005f30 <floor+0x100>)
 8005e6e:	432b      	orrs	r3, r5
 8005e70:	2500      	movs	r5, #0
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	bf18      	it	ne
 8005e76:	4614      	movne	r4, r2
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	e025      	b.n	8005eca <floor+0x9a>
 8005e7e:	4f2d      	ldr	r7, [pc, #180]	; (8005f34 <floor+0x104>)
 8005e80:	4137      	asrs	r7, r6
 8005e82:	ea01 0307 	and.w	r3, r1, r7
 8005e86:	4303      	orrs	r3, r0
 8005e88:	d01f      	beq.n	8005eca <floor+0x9a>
 8005e8a:	a327      	add	r3, pc, #156	; (adr r3, 8005f28 <floor+0xf8>)
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f7fa fa14 	bl	80002bc <__adddf3>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f7fa fe56 	bl	8000b48 <__aeabi_dcmpgt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d0eb      	beq.n	8005e78 <floor+0x48>
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	bfbe      	ittt	lt
 8005ea4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005ea8:	fa43 f606 	asrlt.w	r6, r3, r6
 8005eac:	19a4      	addlt	r4, r4, r6
 8005eae:	ea24 0407 	bic.w	r4, r4, r7
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	e7e0      	b.n	8005e78 <floor+0x48>
 8005eb6:	2e33      	cmp	r6, #51	; 0x33
 8005eb8:	dd0b      	ble.n	8005ed2 <floor+0xa2>
 8005eba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ebe:	d104      	bne.n	8005eca <floor+0x9a>
 8005ec0:	ee10 2a10 	vmov	r2, s0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	f7fa f9f9 	bl	80002bc <__adddf3>
 8005eca:	ec41 0b10 	vmov	d0, r0, r1
 8005ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eda:	fa23 f707 	lsr.w	r7, r3, r7
 8005ede:	4207      	tst	r7, r0
 8005ee0:	d0f3      	beq.n	8005eca <floor+0x9a>
 8005ee2:	a311      	add	r3, pc, #68	; (adr r3, 8005f28 <floor+0xf8>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa f9e8 	bl	80002bc <__adddf3>
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f7fa fe2a 	bl	8000b48 <__aeabi_dcmpgt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0bf      	beq.n	8005e78 <floor+0x48>
 8005ef8:	2c00      	cmp	r4, #0
 8005efa:	da02      	bge.n	8005f02 <floor+0xd2>
 8005efc:	2e14      	cmp	r6, #20
 8005efe:	d103      	bne.n	8005f08 <floor+0xd8>
 8005f00:	3401      	adds	r4, #1
 8005f02:	ea25 0507 	bic.w	r5, r5, r7
 8005f06:	e7b7      	b.n	8005e78 <floor+0x48>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f0e:	fa03 f606 	lsl.w	r6, r3, r6
 8005f12:	4435      	add	r5, r6
 8005f14:	4545      	cmp	r5, r8
 8005f16:	bf38      	it	cc
 8005f18:	18e4      	addcc	r4, r4, r3
 8005f1a:	e7f2      	b.n	8005f02 <floor+0xd2>
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	462c      	mov	r4, r5
 8005f20:	e7aa      	b.n	8005e78 <floor+0x48>
 8005f22:	bf00      	nop
 8005f24:	f3af 8000 	nop.w
 8005f28:	8800759c 	.word	0x8800759c
 8005f2c:	7e37e43c 	.word	0x7e37e43c
 8005f30:	bff00000 	.word	0xbff00000
 8005f34:	000fffff 	.word	0x000fffff

08005f38 <scalbn>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	ec55 4b10 	vmov	r4, r5, d0
 8005f3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005f42:	4606      	mov	r6, r0
 8005f44:	462b      	mov	r3, r5
 8005f46:	b9aa      	cbnz	r2, 8005f74 <scalbn+0x3c>
 8005f48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f4c:	4323      	orrs	r3, r4
 8005f4e:	d03b      	beq.n	8005fc8 <scalbn+0x90>
 8005f50:	4b31      	ldr	r3, [pc, #196]	; (8006018 <scalbn+0xe0>)
 8005f52:	4629      	mov	r1, r5
 8005f54:	2200      	movs	r2, #0
 8005f56:	ee10 0a10 	vmov	r0, s0
 8005f5a:	f7fa fb65 	bl	8000628 <__aeabi_dmul>
 8005f5e:	4b2f      	ldr	r3, [pc, #188]	; (800601c <scalbn+0xe4>)
 8005f60:	429e      	cmp	r6, r3
 8005f62:	4604      	mov	r4, r0
 8005f64:	460d      	mov	r5, r1
 8005f66:	da12      	bge.n	8005f8e <scalbn+0x56>
 8005f68:	a327      	add	r3, pc, #156	; (adr r3, 8006008 <scalbn+0xd0>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa fb5b 	bl	8000628 <__aeabi_dmul>
 8005f72:	e009      	b.n	8005f88 <scalbn+0x50>
 8005f74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	d10c      	bne.n	8005f96 <scalbn+0x5e>
 8005f7c:	ee10 2a10 	vmov	r2, s0
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa f99a 	bl	80002bc <__adddf3>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	e01c      	b.n	8005fc8 <scalbn+0x90>
 8005f8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f92:	460b      	mov	r3, r1
 8005f94:	3a36      	subs	r2, #54	; 0x36
 8005f96:	4432      	add	r2, r6
 8005f98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005f9c:	428a      	cmp	r2, r1
 8005f9e:	dd0b      	ble.n	8005fb8 <scalbn+0x80>
 8005fa0:	ec45 4b11 	vmov	d1, r4, r5
 8005fa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006010 <scalbn+0xd8>
 8005fa8:	f000 f83c 	bl	8006024 <copysign>
 8005fac:	a318      	add	r3, pc, #96	; (adr r3, 8006010 <scalbn+0xd8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	ec51 0b10 	vmov	r0, r1, d0
 8005fb6:	e7da      	b.n	8005f6e <scalbn+0x36>
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	dd08      	ble.n	8005fce <scalbn+0x96>
 8005fbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fc8:	ec45 4b10 	vmov	d0, r4, r5
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005fd2:	da0d      	bge.n	8005ff0 <scalbn+0xb8>
 8005fd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005fd8:	429e      	cmp	r6, r3
 8005fda:	ec45 4b11 	vmov	d1, r4, r5
 8005fde:	dce1      	bgt.n	8005fa4 <scalbn+0x6c>
 8005fe0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006008 <scalbn+0xd0>
 8005fe4:	f000 f81e 	bl	8006024 <copysign>
 8005fe8:	a307      	add	r3, pc, #28	; (adr r3, 8006008 <scalbn+0xd0>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	e7e0      	b.n	8005fb2 <scalbn+0x7a>
 8005ff0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ff4:	3236      	adds	r2, #54	; 0x36
 8005ff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ffa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	2200      	movs	r2, #0
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <scalbn+0xe8>)
 8006006:	e7b2      	b.n	8005f6e <scalbn+0x36>
 8006008:	c2f8f359 	.word	0xc2f8f359
 800600c:	01a56e1f 	.word	0x01a56e1f
 8006010:	8800759c 	.word	0x8800759c
 8006014:	7e37e43c 	.word	0x7e37e43c
 8006018:	43500000 	.word	0x43500000
 800601c:	ffff3cb0 	.word	0xffff3cb0
 8006020:	3c900000 	.word	0x3c900000

08006024 <copysign>:
 8006024:	ec51 0b10 	vmov	r0, r1, d0
 8006028:	ee11 0a90 	vmov	r0, s3
 800602c:	ee10 2a10 	vmov	r2, s0
 8006030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006034:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006038:	ea41 0300 	orr.w	r3, r1, r0
 800603c:	ec43 2b10 	vmov	d0, r2, r3
 8006040:	4770      	bx	lr
	...

08006044 <_init>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr

08006050 <_fini>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr
