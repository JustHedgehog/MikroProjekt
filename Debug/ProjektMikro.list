
ProjektMikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08006048  08006048  00016048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b8  080062b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080062b8  080062b8  000162b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c0  080062c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080062c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014d68  20000078  0800633c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014de0  0800633c  00024de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000913a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001866  00000000  00000000  000291de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  0002aa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016363  00000000  00000000  0002b970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fd9  00000000  00000000  00041cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ad84  00000000  00000000  00048cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3a30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000d3aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800602c 	.word	0x0800602c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800602c 	.word	0x0800602c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MySysTick>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void MySysTick(int arg){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	static uint16_t ms=0;
	ms++;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MySysTick+0x38>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MySysTick+0x38>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	if(ms>arg)
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MySysTick+0x38>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	da05      	bge.n	8000ed8 <MySysTick+0x2c>
	{
		ms=0;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MySysTick+0x38>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	801a      	strh	r2, [r3, #0]
		ms_set=1;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <MySysTick+0x3c>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
	}

}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	200000ac 	.word	0x200000ac
 8000ee8:	20000094 	.word	0x20000094

08000eec <USART_RX_IsEmpty>:

uint8_t USART_RX_IsEmpty(){
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	if(USART_RX_Busy == USART_RX_Empty)
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <USART_RX_IsEmpty+0x20>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <USART_RX_IsEmpty+0x24>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d101      	bne.n	8000f00 <USART_RX_IsEmpty+0x14>
	{
		return 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e000      	b.n	8000f02 <USART_RX_IsEmpty+0x16>
	}else{
		return 1;
 8000f00:	2301      	movs	r3, #1
	}
}//Funkcja sprawdzajacy czy bufor odbiorczy jest pusty
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200000a4 	.word	0x200000a4
 8000f10:	200000a0 	.word	0x200000a0

08000f14 <USART_GC>:

uint8_t USART_GC(){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(USART_RX_Empty!=USART_RX_Busy)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <USART_GC+0x48>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <USART_GC+0x4c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d013      	beq.n	8000f4e <USART_GC+0x3a>
	{
		tmp = USART_RxBuf[USART_RX_Busy];
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <USART_GC+0x4c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <USART_GC+0x50>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	71fb      	strb	r3, [r7, #7]
		USART_RX_Busy++;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <USART_GC+0x4c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <USART_GC+0x4c>)
 8000f38:	6013      	str	r3, [r2, #0]
		if(USART_RX_Busy >= USART_RXBUF_LEN) USART_RX_Busy =0;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <USART_GC+0x4c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f42:	db02      	blt.n	8000f4a <USART_GC+0x36>
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <USART_GC+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
		return tmp;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	e000      	b.n	8000f50 <USART_GC+0x3c>
	}else
	{
		return 0;
 8000f4e:	2300      	movs	r3, #0
	}
} //Funkcja zwracająca znak
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200000a0 	.word	0x200000a0
 8000f60:	200000a4 	.word	0x200000a4
 8000f64:	20000c34 	.word	0x20000c34

08000f68 <USART_GD>:

uint8_t USART_GD(char *buf){
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	static uint8_t bf[500];
	static uint8_t index=0;
	int i;
	uint8_t len_com;
	while(USART_RX_IsEmpty())
 8000f70:	e031      	b.n	8000fd6 <USART_GD+0x6e>
	{
		bf[index] = USART_GC();
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <USART_GD+0x84>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461c      	mov	r4, r3
 8000f78:	f7ff ffcc 	bl	8000f14 <USART_GC>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <USART_GD+0x88>)
 8000f82:	551a      	strb	r2, [r3, r4]
		if((bf[index] == 59))
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <USART_GD+0x84>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <USART_GD+0x88>)
 8000f8c:	5c9b      	ldrb	r3, [r3, r2]
 8000f8e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f90:	d11b      	bne.n	8000fca <USART_GD+0x62>
		{
			for(i=0 ; i<=index ; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e00a      	b.n	8000fae <USART_GD+0x46>
			{
				buf[i]=bf[i];
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4914      	ldr	r1, [pc, #80]	; (8000ff0 <USART_GD+0x88>)
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	440a      	add	r2, r1
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	701a      	strb	r2, [r3, #0]
			for(i=0 ; i<=index ; i++)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <USART_GD+0x84>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	ddee      	ble.n	8000f98 <USART_GD+0x30>
			}
			len_com=index;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <USART_GD+0x84>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	72fb      	strb	r3, [r7, #11]
			index=0;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <USART_GD+0x84>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
			return len_com;
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	e00b      	b.n	8000fe2 <USART_GD+0x7a>
		}else
		{
			index++;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <USART_GD+0x84>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <USART_GD+0x84>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	while(USART_RX_IsEmpty())
 8000fd6:	f7ff ff89 	bl	8000eec <USART_RX_IsEmpty>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1c8      	bne.n	8000f72 <USART_GD+0xa>
			if(index>=500) index=0;
		}
	}
	return 0;
 8000fe0:	2300      	movs	r3, #0
}//Funkcja odbierająca dane
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000ae 	.word	0x200000ae
 8000ff0:	200000b0 	.word	0x200000b0

08000ff4 <USART_send>:

void USART_send(char* format,...){
 8000ff4:	b40f      	push	{r0, r1, r2, r3}
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000ffc:	af00      	add	r7, sp, #0
	char tmp_s[512];
	int i;
	__IO int index;
	va_list arglist;
	va_start(arglist,format);
 8000ffe:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_s,format,arglist);
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	f107 000c 	add.w	r0, r7, #12
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8001012:	f003 fc11 	bl	8004838 <vsiprintf>
	va_end(arglist);
	index=USART_TX_Empty;
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <USART_send+0x100>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_s);i++){
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001026:	e020      	b.n	800106a <USART_send+0x76>
		USART_TxBuf[index] = tmp_s[i];
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8001036:	440a      	add	r2, r1
 8001038:	7811      	ldrb	r1, [r2, #0]
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <USART_send+0x104>)
 800103c:	54d1      	strb	r1, [r2, r3]
		index++;
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	601a      	str	r2, [r3, #0]
		if(index >= USART_TXBUF_LEN) index=0;
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001056:	db03      	blt.n	8001060 <USART_send+0x6c>
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_s);i++){
 8001060:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001064:	3301      	adds	r3, #1
 8001066:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8c0 	bl	80001f4 <strlen>
 8001074:	4602      	mov	r2, r0
 8001076:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800107a:	429a      	cmp	r2, r3
 800107c:	d8d4      	bhi.n	8001028 <USART_send+0x34>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107e:	b672      	cpsid	i
	}

	__disable_irq();
	if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){ //2 parametr sprawdza bufor nadajnika
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <USART_send+0x100>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <USART_send+0x108>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d125      	bne.n	80010d8 <USART_send+0xe4>
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <USART_send+0x10c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	2b80      	cmp	r3, #128	; 0x80
 8001098:	d11e      	bne.n	80010d8 <USART_send+0xe4>
		USART_TX_Empty = index;
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <USART_send+0x100>)
 80010a2:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <USART_send+0x108>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <USART_send+0x104>)
 80010aa:	5cd2      	ldrb	r2, [r2, r3]
 80010ac:	1cfb      	adds	r3, r7, #3
 80010ae:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <USART_send+0x108>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <USART_send+0x108>)
 80010b8:	6013      	str	r3, [r2, #0]
		if(USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <USART_send+0x108>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010c2:	db02      	blt.n	80010ca <USART_send+0xd6>
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <USART_send+0x108>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2,&tmp,1);
 80010ca:	1cfb      	adds	r3, r7, #3
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <USART_send+0x10c>)
 80010d2:	f002 fd1a 	bl	8003b0a <HAL_UART_Transmit_IT>
	if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){ //2 parametr sprawdza bufor nadajnika
 80010d6:	e004      	b.n	80010e2 <USART_send+0xee>
	}else{
		USART_TX_Empty = index;
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <USART_send+0x100>)
 80010e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010e2:	b662      	cpsie	i
	}
	__enable_irq();
}//Funkcja wysyłająca dane
 80010e4:	bf00      	nop
 80010e6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80010ea:	46bd      	mov	sp, r7
 80010ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f0:	b004      	add	sp, #16
 80010f2:	4770      	bx	lr
 80010f4:	20000098 	.word	0x20000098
 80010f8:	20000464 	.word	0x20000464
 80010fc:	2000009c 	.word	0x2000009c
 8001100:	20014d90 	.word	0x20014d90

08001104 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_UART_TxCpltCallback+0x58>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d11e      	bne.n	8001152 <HAL_UART_TxCpltCallback+0x4e>
		if(USART_TX_Empty != USART_TX_Busy){
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_UART_TxCpltCallback+0x5c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_UART_TxCpltCallback+0x60>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d018      	beq.n	8001152 <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp= USART_TxBuf[USART_TX_Busy];
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_UART_TxCpltCallback+0x60>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_UART_TxCpltCallback+0x64>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	73fb      	strb	r3, [r7, #15]
			USART_TX_Busy++;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_UART_TxCpltCallback+0x60>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_UART_TxCpltCallback+0x60>)
 8001132:	6013      	str	r3, [r2, #0]
			if(USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy =0;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_UART_TxCpltCallback+0x60>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800113c:	db02      	blt.n	8001144 <HAL_UART_TxCpltCallback+0x40>
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_UART_TxCpltCallback+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp , 1);
 8001144:	f107 030f 	add.w	r3, r7, #15
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <HAL_UART_TxCpltCallback+0x58>)
 800114e:	f002 fcdc 	bl	8003b0a <HAL_UART_Transmit_IT>
		}
	}
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20014d90 	.word	0x20014d90
 8001160:	20000098 	.word	0x20000098
 8001164:	2000009c 	.word	0x2000009c
 8001168:	20000464 	.word	0x20000464

0800116c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_UART_RxCpltCallback+0x44>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d115      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x3c>
		USART_RX_Empty++;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_UART_RxCpltCallback+0x48>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_UART_RxCpltCallback+0x48>)
 8001184:	6013      	str	r3, [r2, #0]
		if(USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty=0;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_UART_RxCpltCallback+0x48>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800118e:	db02      	blt.n	8001196 <HAL_UART_RxCpltCallback+0x2a>
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_UART_RxCpltCallback+0x48>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_UART_RxCpltCallback+0x48>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_UART_RxCpltCallback+0x4c>)
 800119c:	4413      	add	r3, r2
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <HAL_UART_RxCpltCallback+0x44>)
 80011a4:	f002 fcf6 	bl	8003b94 <HAL_UART_Receive_IT>
	}
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20014d90 	.word	0x20014d90
 80011b4:	200000a0 	.word	0x200000a0
 80011b8:	20000c34 	.word	0x20000c34
 80011bc:	00000000 	.word	0x00000000

080011c0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	temp = (adcval*100.0)/1023.0;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_ADC_ConvCpltCallback+0x50>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9b1 	bl	8000534 <__aeabi_ui2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_ADC_ConvCpltCallback+0x54>)
 80011d8:	f7ff fa26 	bl	8000628 <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4618      	mov	r0, r3
 80011e2:	4621      	mov	r1, r4
 80011e4:	a308      	add	r3, pc, #32	; (adr r3, 8001208 <HAL_ADC_ConvCpltCallback+0x48>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff fb47 	bl	800087c <__aeabi_ddiv>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff fcb1 	bl	8000b5c <__aeabi_d2iz>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_ADC_ConvCpltCallback+0x58>)
 80011fe:	601a      	str	r2, [r3, #0]

}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	00000000 	.word	0x00000000
 800120c:	408ff800 	.word	0x408ff800
 8001210:	20014dd0 	.word	0x20014dd0
 8001214:	40590000 	.word	0x40590000
 8001218:	200003b4 	.word	0x200003b4
 800121c:	00000000 	.word	0x00000000

08001220 <generacja_sinusa>:

void generacja_sinusa(double  *tablica_wartosci ) {
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

	int n,f=1; // n = ilość próbek na jeden okres sygnału
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
	double faza_sygnalu;
	uint16_t i = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	83fb      	strh	r3, [r7, #30]
	n = fs / f; //obliczenie ilości próbek w momencie zmiany f
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <generacja_sinusa+0xd8>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	fb92 f3f3 	sdiv	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]

	while (i < n) {
 800123e:	e04a      	b.n	80012d6 <generacja_sinusa+0xb6>
		faza_sygnalu = ((i * 2 * PI * f) / fs);
 8001240:	8bfb      	ldrh	r3, [r7, #30]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f985 	bl	8000554 <__aeabi_i2d>
 800124a:	a429      	add	r4, pc, #164	; (adr r4, 80012f0 <generacja_sinusa+0xd0>)
 800124c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	f7ff f9e8 	bl	8000628 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4625      	mov	r5, r4
 800125e:	461c      	mov	r4, r3
 8001260:	69b8      	ldr	r0, [r7, #24]
 8001262:	f7ff f977 	bl	8000554 <__aeabi_i2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9db 	bl	8000628 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4625      	mov	r5, r4
 8001278:	461c      	mov	r4, r3
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <generacja_sinusa+0xd8>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f968 	bl	8000554 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff faf6 	bl	800087c <__aeabi_ddiv>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	e9c7 3402 	strd	r3, r4, [r7, #8]
		*(tablica_wartosci+i) = 2048 + (sin(faza_sygnalu) * 2048);
 8001298:	ed97 0b02 	vldr	d0, [r7, #8]
 800129c:	f003 feb4 	bl	8005008 <sin>
 80012a0:	ec51 0b10 	vmov	r0, r1, d0
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <generacja_sinusa+0xdc>)
 80012aa:	f7ff f9bd 	bl	8000628 <__aeabi_dmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	460c      	mov	r4, r1
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	8bfb      	ldrh	r3, [r7, #30]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	18d5      	adds	r5, r2, r3
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <generacja_sinusa+0xdc>)
 80012c4:	f7fe fffa 	bl	80002bc <__adddf3>
 80012c8:	4603      	mov	r3, r0
 80012ca:	460c      	mov	r4, r1
 80012cc:	e9c5 3400 	strd	r3, r4, [r5]
		i = i + 1;
 80012d0:	8bfb      	ldrh	r3, [r7, #30]
 80012d2:	3301      	adds	r3, #1
 80012d4:	83fb      	strh	r3, [r7, #30]
	while (i < n) {
 80012d6:	8bfb      	ldrh	r3, [r7, #30]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dcb0      	bgt.n	8001240 <generacja_sinusa+0x20>
	}
	i = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	83fb      	strh	r3, [r7, #30]
}// Funkcja generująca sinusa
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	51eb851f 	.word	0x51eb851f
 80012f4:	40091eb8 	.word	0x40091eb8
 80012f8:	20000000 	.word	0x20000000
 80012fc:	40a00000 	.word	0x40a00000

08001300 <clean_frame>:


void clean_frame(char * tab ,int len){
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]

	for(int i = 0 ; i<=len ; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e007      	b.n	8001320 <clean_frame+0x20>
	{
		*(tab+i) = '\0';
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<=len ; i++)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	ddf3      	ble.n	8001310 <clean_frame+0x10>
	}
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <clean_after_all>:


void clean_after_all(int len){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

	fr_busy = 0;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <clean_after_all+0x3c>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
	clean_frame(frame, len);
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <clean_after_all+0x40>)
 8001346:	f7ff ffdb 	bl	8001300 <clean_frame>
	clean_frame(command, (len - 6));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3b06      	subs	r3, #6
 800134e:	4619      	mov	r1, r3
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <clean_after_all+0x44>)
 8001352:	f7ff ffd5 	bl	8001300 <clean_frame>
	clean_frame(sender_name, 3);
 8001356:	2103      	movs	r1, #3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <clean_after_all+0x48>)
 800135a:	f7ff ffd1 	bl	8001300 <clean_frame>
	clean_frame(receiver_name, 3);
 800135e:	2103      	movs	r1, #3
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <clean_after_all+0x4c>)
 8001362:	f7ff ffcd 	bl	8001300 <clean_frame>

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000a8 	.word	0x200000a8
 8001374:	20001404 	.word	0x20001404
 8001378:	200002b4 	.word	0x200002b4
 800137c:	200002b0 	.word	0x200002b0
 8001380:	20000400 	.word	0x20000400

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fc82 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f950 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f000 fa56 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 8001398:	f000 fa34 	bl	8001804 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800139c:	f000 fa08 	bl	80017b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013a0:	f000 f9b2 	bl	8001708 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4992      	ldr	r1, [pc, #584]	; (80015f0 <main+0x26c>)
 80013a8:	4892      	ldr	r0, [pc, #584]	; (80015f4 <main+0x270>)
 80013aa:	f002 fbf3 	bl	8003b94 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, &adcval, 1); // Start ADC z DMA
 80013ae:	2201      	movs	r2, #1
 80013b0:	4991      	ldr	r1, [pc, #580]	; (80015f8 <main+0x274>)
 80013b2:	4892      	ldr	r0, [pc, #584]	; (80015fc <main+0x278>)
 80013b4:	f000 fd24 	bl	8001e00 <HAL_ADC_Start_DMA>

  int len=0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  char bx[500];
  generacja_sinusa(tablica_wartosci);
 80013be:	4890      	ldr	r0, [pc, #576]	; (8001600 <main+0x27c>)
 80013c0:	f7ff ff2e 	bl	8001220 <generacja_sinusa>
  clean_frame(frame, len);
 80013c4:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 80013c8:	488e      	ldr	r0, [pc, #568]	; (8001604 <main+0x280>)
 80013ca:	f7ff ff99 	bl	8001300 <clean_frame>
  while (1)
  {
		len = USART_GD(bx);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fdc9 	bl	8000f68 <USART_GD>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		int y=0,i=0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

		if (len > 0) {
 80013e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	ddee      	ble.n	80013ce <main+0x4a>
			while(i<=len)
 80013f0:	e0f3      	b.n	80015da <main+0x256>
			{
				if(len<7){break;}
 80013f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	f340 80f7 	ble.w	80015ea <main+0x266>
				else{
					char singlefrchar = bx[i];
 80013fc:	1d3a      	adds	r2, r7, #4
 80013fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
					if(bx[i] == FRSTART && fr_busy == 1)
 800140a:	1d3a      	adds	r2, r7, #4
 800140c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b3a      	cmp	r3, #58	; 0x3a
 8001416:	d10f      	bne.n	8001438 <main+0xb4>
 8001418:	4b7b      	ldr	r3, [pc, #492]	; (8001608 <main+0x284>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d10b      	bne.n	8001438 <main+0xb4>
					{
						clean_frame(frame, y);
 8001420:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001424:	4877      	ldr	r0, [pc, #476]	; (8001604 <main+0x280>)
 8001426:	f7ff ff6b 	bl	8001300 <clean_frame>
						y=0;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
						fr_busy = 0;
 8001430:	4b75      	ldr	r3, [pc, #468]	; (8001608 <main+0x284>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e0d0      	b.n	80015da <main+0x256>
					}else{
						if(singlefrchar == FRSTART){fr_busy = 1;++i;}
 8001438:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 800143c:	2b3a      	cmp	r3, #58	; 0x3a
 800143e:	d107      	bne.n	8001450 <main+0xcc>
 8001440:	4b71      	ldr	r3, [pc, #452]	; (8001608 <main+0x284>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
						if(fr_busy){
 8001450:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <main+0x284>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80ab 	beq.w	80015b0 <main+0x22c>
							switch(singlefrchar){
 800145a:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 800145e:	2b3b      	cmp	r3, #59	; 0x3b
 8001460:	d047      	beq.n	80014f2 <main+0x16e>
 8001462:	2b5c      	cmp	r3, #92	; 0x5c
 8001464:	f040 8098 	bne.w	8001598 <main+0x214>
								case FRCOD:
								{
									if(bx[i+1] == FRCODS){frame[y] = FRSTART;i++;}
 8001468:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800146c:	3301      	adds	r3, #1
 800146e:	1d3a      	adds	r2, r7, #4
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	2b61      	cmp	r3, #97	; 0x61
 8001474:	d10b      	bne.n	800148e <main+0x10a>
 8001476:	4a63      	ldr	r2, [pc, #396]	; (8001604 <main+0x280>)
 8001478:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800147c:	4413      	add	r3, r2
 800147e:	223a      	movs	r2, #58	; 0x3a
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001486:	3301      	adds	r3, #1
 8001488:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
									else if(bx[i+1] == FRCODE){frame[y] = FREND;i++;}
									else if(bx[i+1 == FRCOD]){frame[y] = FRCOD; i++;}
									else{frame[y] = FRCOD;}
									break;
 800148c:	e091      	b.n	80015b2 <main+0x22e>
									else if(bx[i+1] == FRCODE){frame[y] = FREND;i++;}
 800148e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001492:	3301      	adds	r3, #1
 8001494:	1d3a      	adds	r2, r7, #4
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	2b62      	cmp	r3, #98	; 0x62
 800149a:	d10b      	bne.n	80014b4 <main+0x130>
 800149c:	4a59      	ldr	r2, [pc, #356]	; (8001604 <main+0x280>)
 800149e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014a2:	4413      	add	r3, r2
 80014a4:	223b      	movs	r2, #59	; 0x3b
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ac:	3301      	adds	r3, #1
 80014ae:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
									break;
 80014b2:	e07e      	b.n	80015b2 <main+0x22e>
									else if(bx[i+1 == FRCOD]){frame[y] = FRCOD; i++;}
 80014b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b8:	2b5b      	cmp	r3, #91	; 0x5b
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	5c9b      	ldrb	r3, [r3, r2]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <main+0x160>
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <main+0x280>)
 80014ce:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014d2:	4413      	add	r3, r2
 80014d4:	225c      	movs	r2, #92	; 0x5c
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014dc:	3301      	adds	r3, #1
 80014de:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
									break;
 80014e2:	e066      	b.n	80015b2 <main+0x22e>
									else{frame[y] = FRCOD;}
 80014e4:	4a47      	ldr	r2, [pc, #284]	; (8001604 <main+0x280>)
 80014e6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014ea:	4413      	add	r3, r2
 80014ec:	225c      	movs	r2, #92	; 0x5c
 80014ee:	701a      	strb	r2, [r3, #0]
									break;
 80014f0:	e05f      	b.n	80015b2 <main+0x22e>
								}
								case FREND:
								{
//									funkcja wykonująca komende tutaj prolly
									memcpy(sender_name , &frame[0], 3);
 80014f2:	4b46      	ldr	r3, [pc, #280]	; (800160c <main+0x288>)
 80014f4:	4a43      	ldr	r2, [pc, #268]	; (8001604 <main+0x280>)
 80014f6:	8811      	ldrh	r1, [r2, #0]
 80014f8:	7892      	ldrb	r2, [r2, #2]
 80014fa:	8019      	strh	r1, [r3, #0]
 80014fc:	709a      	strb	r2, [r3, #2]
									memcpy(receiver_name , &frame[3], 3);
 80014fe:	4a44      	ldr	r2, [pc, #272]	; (8001610 <main+0x28c>)
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <main+0x280>)
 8001502:	3303      	adds	r3, #3
 8001504:	8819      	ldrh	r1, [r3, #0]
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	8011      	strh	r1, [r2, #0]
 800150a:	7093      	strb	r3, [r2, #2]
									memcpy(command , &frame[6], (y-6));
 800150c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001510:	3b06      	subs	r3, #6
 8001512:	461a      	mov	r2, r3
 8001514:	493f      	ldr	r1, [pc, #252]	; (8001614 <main+0x290>)
 8001516:	4840      	ldr	r0, [pc, #256]	; (8001618 <main+0x294>)
 8001518:	f003 f964 	bl	80047e4 <memcpy>
//									wykonywanie komendy
									if(strcmp("STM",receiver_name) == 0 && strcmp("STM", sender_name) != 0){
 800151c:	493c      	ldr	r1, [pc, #240]	; (8001610 <main+0x28c>)
 800151e:	483f      	ldr	r0, [pc, #252]	; (800161c <main+0x298>)
 8001520:	f7fe fe5e 	bl	80001e0 <strcmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d130      	bne.n	800158c <main+0x208>
 800152a:	4938      	ldr	r1, [pc, #224]	; (800160c <main+0x288>)
 800152c:	483b      	ldr	r0, [pc, #236]	; (800161c <main+0x298>)
 800152e:	f7fe fe57 	bl	80001e0 <strcmp>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d029      	beq.n	800158c <main+0x208>
										if(command[0] == 0){
 8001538:	4b37      	ldr	r3, [pc, #220]	; (8001618 <main+0x294>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <main+0x1ce>
											USART_send(":STM%sFREMPTY;\r\n" , sender_name);
 8001540:	4932      	ldr	r1, [pc, #200]	; (800160c <main+0x288>)
 8001542:	4837      	ldr	r0, [pc, #220]	; (8001620 <main+0x29c>)
 8001544:	f7ff fd56 	bl	8000ff4 <USART_send>
											clean_after_all(y);
 8001548:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800154c:	f7ff fef2 	bl	8001334 <clean_after_all>
										if(command[0] == 0){
 8001550:	e021      	b.n	8001596 <main+0x212>
										}else{
											if(strcmp("temp",command)==0){
 8001552:	4931      	ldr	r1, [pc, #196]	; (8001618 <main+0x294>)
 8001554:	4833      	ldr	r0, [pc, #204]	; (8001624 <main+0x2a0>)
 8001556:	f7fe fe43 	bl	80001e0 <strcmp>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <main+0x1f4>
												USART_send(":STM%stemp,%i;\r\n", sender_name,temp);
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <main+0x2a4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4929      	ldr	r1, [pc, #164]	; (800160c <main+0x288>)
 8001568:	4830      	ldr	r0, [pc, #192]	; (800162c <main+0x2a8>)
 800156a:	f7ff fd43 	bl	8000ff4 <USART_send>
												clean_after_all(y);
 800156e:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001572:	f7ff fedf 	bl	8001334 <clean_after_all>
										if(command[0] == 0){
 8001576:	e00e      	b.n	8001596 <main+0x212>
											}else{
												USART_send(":STM%s%s;\r\n",sender_name , command);
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <main+0x294>)
 800157a:	4924      	ldr	r1, [pc, #144]	; (800160c <main+0x288>)
 800157c:	482c      	ldr	r0, [pc, #176]	; (8001630 <main+0x2ac>)
 800157e:	f7ff fd39 	bl	8000ff4 <USART_send>
												clean_after_all(y);
 8001582:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001586:	f7ff fed5 	bl	8001334 <clean_after_all>
										if(command[0] == 0){
 800158a:	e004      	b.n	8001596 <main+0x212>
											}
										}
									}else{
										clean_after_all(y);
 800158c:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001590:	f7ff fed0 	bl	8001334 <clean_after_all>
									}
									break;
 8001594:	e00d      	b.n	80015b2 <main+0x22e>
 8001596:	e00c      	b.n	80015b2 <main+0x22e>
								}
								default :
								{
									frame[y] = bx[i];
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800159e:	4413      	add	r3, r2
 80015a0:	7819      	ldrb	r1, [r3, #0]
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <main+0x280>)
 80015a4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e000      	b.n	80015b2 <main+0x22e>
								}
							}
						}
 80015b0:	bf00      	nop
						y++;
 80015b2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015b6:	3301      	adds	r3, #1
 80015b8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
						if(y > 263)
 80015bc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015c0:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80015c4:	db04      	blt.n	80015d0 <main+0x24c>
						{
							clean_after_all(len);
 80015c6:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 80015ca:	f7ff feb3 	bl	8001334 <clean_after_all>
							break;
 80015ce:	e00d      	b.n	80015ec <main+0x268>
						}
						i++;
 80015d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d4:	3301      	adds	r3, #1
 80015d6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
			while(i<=len)
 80015da:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80015de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015e2:	429a      	cmp	r2, r3
 80015e4:	f77f af05 	ble.w	80013f2 <main+0x6e>
 80015e8:	e6f1      	b.n	80013ce <main+0x4a>
				if(len<7){break;}
 80015ea:	bf00      	nop
  {
 80015ec:	e6ef      	b.n	80013ce <main+0x4a>
 80015ee:	bf00      	nop
 80015f0:	20000c34 	.word	0x20000c34
 80015f4:	20014d90 	.word	0x20014d90
 80015f8:	20014dd0 	.word	0x20014dd0
 80015fc:	200003b8 	.word	0x200003b8
 8001600:	20001510 	.word	0x20001510
 8001604:	20001404 	.word	0x20001404
 8001608:	200000a8 	.word	0x200000a8
 800160c:	200002b0 	.word	0x200002b0
 8001610:	20000400 	.word	0x20000400
 8001614:	2000140a 	.word	0x2000140a
 8001618:	200002b4 	.word	0x200002b4
 800161c:	08006048 	.word	0x08006048
 8001620:	0800604c 	.word	0x0800604c
 8001624:	08006060 	.word	0x08006060
 8001628:	200003b4 	.word	0x200003b4
 800162c:	08006068 	.word	0x08006068
 8001630:	0800607c 	.word	0x0800607c

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f8d9 	bl	80047fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <SystemClock_Config+0xcc>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <SystemClock_Config+0xcc>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <SystemClock_Config+0xcc>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <SystemClock_Config+0xd0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <SystemClock_Config+0xd0>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <SystemClock_Config+0xd0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2310      	movs	r3, #16
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169c:	2302      	movs	r3, #2
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016a4:	2310      	movs	r3, #16
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016ae:	2304      	movs	r3, #4
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b2:	2304      	movs	r3, #4
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 fd76 	bl	80031ac <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016c6:	f000 f92d 	bl	8001924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 ffd0 	bl	800368c <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016f2:	f000 f917 	bl	8001924 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	; 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800171c:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <MX_ADC1_Init+0xa0>)
 800171e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800172a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800172e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001732:	2201      	movs	r2, #1
 8001734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001738:	2201      	movs	r2, #1
 800173a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <MX_ADC1_Init+0xa4>)
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001758:	2201      	movs	r2, #1
 800175a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_ADC1_Init+0x9c>)
 8001766:	2201      	movs	r2, #1
 8001768:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800176c:	f000 fb04 	bl	8001d78 <HAL_ADC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001776:	f000 f8d5 	bl	8001924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001782:	2307      	movs	r3, #7
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_ADC1_Init+0x9c>)
 800178c:	f000 fc20 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001796:	f000 f8c5 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200003b8 	.word	0x200003b8
 80017a8:	40012000 	.word	0x40012000
 80017ac:	0f000001 	.word	0x0f000001

080017b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USART2_UART_Init+0x4c>)
 80017e8:	f002 f942 	bl	8003a70 <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017f2:	f000 f897 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20014d90 	.word	0x20014d90
 8001800:	40004400 	.word	0x40004400

08001804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_DMA_Init+0x3c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <MX_DMA_Init+0x3c>)
 8001814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_DMA_Init+0x3c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2038      	movs	r0, #56	; 0x38
 800182c:	f000 ff5b 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001830:	2038      	movs	r0, #56	; 0x38
 8001832:	f000 ff74 	bl	800271e <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <MX_GPIO_Init+0xd0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <MX_GPIO_Init+0xd0>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <MX_GPIO_Init+0xd0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MX_GPIO_Init+0xd0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a25      	ldr	r2, [pc, #148]	; (8001914 <MX_GPIO_Init+0xd0>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <MX_GPIO_Init+0xd0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <MX_GPIO_Init+0xd0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <MX_GPIO_Init+0xd0>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <MX_GPIO_Init+0xd0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_GPIO_Init+0xd0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <MX_GPIO_Init+0xd0>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_GPIO_Init+0xd0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2120      	movs	r1, #32
 80018ce:	4812      	ldr	r0, [pc, #72]	; (8001918 <MX_GPIO_Init+0xd4>)
 80018d0:	f001 fc52 	bl	8003178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_BLUE_Pin */
  GPIO_InitStruct.Pin = SW_BLUE_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_GPIO_Init+0xd8>)
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_BLUE_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_GPIO_Init+0xdc>)
 80018ea:	f001 fac3 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ee:	2320      	movs	r3, #32
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_GPIO_Init+0xd4>)
 8001906:	f001 fab5 	bl	8002e74 <HAL_GPIO_Init>

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	10210000 	.word	0x10210000
 8001920:	40020800 	.word	0x40020800

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001972:	2007      	movs	r0, #7
 8001974:	f000 feac 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_ADC_MspInit+0xdc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d157      	bne.n	8001a56 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e2:	2303      	movs	r3, #3
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	481d      	ldr	r0, [pc, #116]	; (8001a68 <HAL_ADC_MspInit+0xe4>)
 80019f2:	f001 fa3f 	bl	8002e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_ADC_MspInit+0xec>)
 80019fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a3c:	f000 fe8a 	bl	8002754 <HAL_DMA_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a46:	f7ff ff6d 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40012000 	.word	0x40012000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	20000404 	.word	0x20000404
 8001a70:	40026410 	.word	0x40026410

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_UART_MspInit+0x94>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d133      	bne.n	8001afe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_UART_MspInit+0x98>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_UART_MspInit+0x98>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_UART_MspInit+0x98>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0x98>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_UART_MspInit+0x98>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_UART_MspInit+0x98>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <HAL_UART_MspInit+0x9c>)
 8001aea:	f001 f9c3 	bl	8002e74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2026      	movs	r0, #38	; 0x26
 8001af4:	f000 fdf7 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001af8:	2026      	movs	r0, #38	; 0x26
 8001afa:	f000 fe10 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MySysTick(arg);
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Handler+0x18>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f99d 	bl	8000eac <MySysTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 f8e1 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20014dd4 	.word	0x20014dd4

08001b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART2_IRQHandler+0x10>)
 8001b86:	f002 f85b 	bl	8003c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20014d90 	.word	0x20014d90

08001b94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <DMA2_Stream0_IRQHandler+0x10>)
 8001b9a:	f000 ff03 	bl	80029a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000404 	.word	0x20000404

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f002 fdda 	bl	8004790 <__errno>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	230c      	movs	r3, #12
 8001be0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20020000 	.word	0x20020000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	200002a4 	.word	0x200002a4
 8001c10:	20014de0 	.word	0x20014de0

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <SystemInit+0x28>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <SystemInit+0x28>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SystemInit+0x28>)
 8001c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3

  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff ffd3 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f002 fd95 	bl	800479c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fb87 	bl	8001384 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c7c:	080062c8 	.word	0x080062c8
  ldr  r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c84:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c88:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001c8c:	20014de0 	.word	0x20014de0

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_Init+0x40>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_Init+0x40>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_Init+0x40>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 fd07 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fe34 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fd1f 	bl	800273a <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 fce7 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	20014dd8 	.word	0x20014dd8

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20014dd8 	.word	0x20014dd8

08001d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e033      	b.n	8001df6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fdf4 	bl	8001984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dbe:	f023 0302 	bic.w	r3, r3, #2
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fa32 	bl	8002234 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f023 0303 	bic.w	r3, r3, #3
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
 8001de6:	e001      	b.n	8001dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x1e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0b1      	b.n	8001f82 <HAL_ADC_Start_DMA+0x182>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d018      	beq.n	8001e66 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e44:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_ADC_Start_DMA+0x18c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_ADC_Start_DMA+0x190>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0c9a      	lsrs	r2, r3, #18
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f040 8085 	bne.w	8001f80 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ea0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f023 0206 	bic.w	r2, r3, #6
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ec2:	e002      	b.n	8001eca <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_ADC_Start_DMA+0x194>)
 8001ed4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <HAL_ADC_Start_DMA+0x198>)
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_ADC_Start_DMA+0x19c>)
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_ADC_Start_DMA+0x1a0>)
 8001eec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	334c      	adds	r3, #76	; 0x4c
 8001f22:	4619      	mov	r1, r3
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f000 fcc2 	bl	80028b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10f      	bne.n	8001f58 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11c      	bne.n	8001f80 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	e013      	b.n	8001f80 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <HAL_ADC_Start_DMA+0x1a4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10e      	bne.n	8001f80 <HAL_ADC_Start_DMA+0x180>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f7e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	431bde83 	.word	0x431bde83
 8001f94:	40012300 	.word	0x40012300
 8001f98:	0800242d 	.word	0x0800242d
 8001f9c:	080024e7 	.word	0x080024e7
 8001fa0:	08002503 	.word	0x08002503
 8001fa4:	40012000 	.word	0x40012000

08001fa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e113      	b.n	8002214 <HAL_ADC_ConfigChannel+0x244>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	d925      	bls.n	8002048 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	3b1e      	subs	r3, #30
 8002012:	2207      	movs	r2, #7
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43da      	mvns	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	400a      	ands	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68d9      	ldr	r1, [r3, #12]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	4603      	mov	r3, r0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4403      	add	r3, r0
 800203a:	3b1e      	subs	r3, #30
 800203c:	409a      	lsls	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	e022      	b.n	800208e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6919      	ldr	r1, [r3, #16]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	2207      	movs	r2, #7
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	400a      	ands	r2, r1
 800206a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	4603      	mov	r3, r0
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4403      	add	r3, r0
 8002084:	409a      	lsls	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d824      	bhi.n	80020e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b05      	subs	r3, #5
 80020a8:	221f      	movs	r2, #31
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b05      	subs	r3, #5
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	e04c      	b.n	800217a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d824      	bhi.n	8002132 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b23      	subs	r3, #35	; 0x23
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43da      	mvns	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	400a      	ands	r2, r1
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b23      	subs	r3, #35	; 0x23
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
 8002130:	e023      	b.n	800217a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b41      	subs	r3, #65	; 0x41
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	400a      	ands	r2, r1
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b41      	subs	r3, #65	; 0x41
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_ADC_ConfigChannel+0x250>)
 800217c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_ADC_ConfigChannel+0x254>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10f      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d10b      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_ADC_ConfigChannel+0x254>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12b      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_ADC_ConfigChannel+0x258>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x1f4>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b11      	cmp	r3, #17
 80021c2:	d122      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x258>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d111      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x25c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x260>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9a      	lsrs	r2, r3, #18
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021fc:	e002      	b.n	8002204 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3b01      	subs	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40012300 	.word	0x40012300
 8002224:	40012000 	.word	0x40012000
 8002228:	10000012 	.word	0x10000012
 800222c:	20000004 	.word	0x20000004
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223c:	4b79      	ldr	r3, [pc, #484]	; (8002424 <ADC_Init+0x1f0>)
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	4a58      	ldr	r2, [pc, #352]	; (8002428 <ADC_Init+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e00f      	b.n	8002332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002330:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0202 	bic.w	r2, r2, #2
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	005a      	lsls	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800237e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	3b01      	subs	r3, #1
 800238c:	035a      	lsls	r2, r3, #13
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e007      	b.n	80023a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	051a      	lsls	r2, r3, #20
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	029a      	lsls	r2, r3, #10
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40012300 	.word	0x40012300
 8002428:	0f000001 	.word	0x0f000001

0800242c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002442:	2b00      	cmp	r3, #0
 8002444:	d13c      	bne.n	80024c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12b      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d127      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002480:	2b00      	cmp	r3, #0
 8002482:	d119      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0220 	bic.w	r2, r2, #32
 8002492:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7fe fe81 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024be:	e00e      	b.n	80024de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fd75 	bl	8001fbc <HAL_ADC_ErrorCallback>
}
 80024d2:	e004      	b.n	80024de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fd57 	bl	8001fa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fd4a 	bl	8001fbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff fafe 	bl	8001d60 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e099      	b.n	80028a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002790:	e00f      	b.n	80027b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002792:	f7ff fae5 	bl	8001d60 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b05      	cmp	r3, #5
 800279e:	d908      	bls.n	80027b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e078      	b.n	80028a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e8      	bne.n	8002792 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4b38      	ldr	r3, [pc, #224]	; (80028ac <HAL_DMA_Init+0x158>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2b04      	cmp	r3, #4
 800280a:	d107      	bne.n	800281c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4313      	orrs	r3, r2
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0307 	bic.w	r3, r3, #7
 8002832:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b04      	cmp	r3, #4
 8002844:	d117      	bne.n	8002876 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fa91 	bl	8002d80 <DMA_CheckFifoParam>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002872:	2301      	movs	r3, #1
 8002874:	e016      	b.n	80028a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa48 	bl	8002d14 <DMA_CalcBaseAndBitshift>
 8002884:	4603      	mov	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	223f      	movs	r2, #63	; 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	f010803f 	.word	0xf010803f

080028b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_DMA_Start_IT+0x26>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e040      	b.n	8002958 <HAL_DMA_Start_IT+0xa8>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d12f      	bne.n	800294a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f9da 	bl	8002cb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	223f      	movs	r2, #63	; 0x3f
 800290a:	409a      	lsls	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0216 	orr.w	r2, r2, #22
 800291e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0208 	orr.w	r2, r2, #8
 8002936:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e005      	b.n	8002956 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002956:	7dfb      	ldrb	r3, [r7, #23]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00c      	b.n	8002998 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2205      	movs	r2, #5
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029b0:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_DMA_IRQHandler+0x258>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a92      	ldr	r2, [pc, #584]	; (8002c00 <HAL_DMA_IRQHandler+0x25c>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a9b      	lsrs	r3, r3, #10
 80029bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2208      	movs	r2, #8
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	2208      	movs	r2, #8
 80029fe:	409a      	lsls	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	2201      	movs	r2, #1
 8002a34:	409a      	lsls	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f043 0202 	orr.w	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d012      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2204      	movs	r2, #4
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2210      	movs	r2, #16
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d043      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03c      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d018      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d024      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
 8002ad2:	e01f      	b.n	8002b14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0208 	bic.w	r2, r2, #8
 8002b02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2220      	movs	r2, #32
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 808e 	beq.w	8002c42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8086 	beq.w	8002c42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d136      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0216 	bic.w	r2, r2, #22
 8002b5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_DMA_IRQHandler+0x1da>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0208 	bic.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	223f      	movs	r2, #63	; 0x3f
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d07d      	beq.n	8002cae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
        }
        return;
 8002bba:	e078      	b.n	8002cae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01c      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d108      	bne.n	8002bea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d030      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e02b      	b.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d027      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e022      	b.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
 8002bfc:	20000004 	.word	0x20000004
 8002c00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0210 	bic.w	r2, r2, #16
 8002c20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d032      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d022      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d307      	bcc.n	8002c8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f2      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x2ca>
 8002c88:	e000      	b.n	8002c8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e000      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cae:	bf00      	nop
    }
  }
}
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop

08002cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d108      	bne.n	8002cf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cf6:	e007      	b.n	8002d08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3b10      	subs	r3, #16
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <DMA_CalcBaseAndBitshift+0x64>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <DMA_CalcBaseAndBitshift+0x68>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d909      	bls.n	8002d56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	659a      	str	r2, [r3, #88]	; 0x58
 8002d54:	e007      	b.n	8002d66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	aaaaaaab 	.word	0xaaaaaaab
 8002d7c:	080060a0 	.word	0x080060a0

08002d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d855      	bhi.n	8002e4c <DMA_CheckFifoParam+0xcc>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <DMA_CheckFifoParam+0x28>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dcb 	.word	0x08002dcb
 8002db0:	08002db9 	.word	0x08002db9
 8002db4:	08002e4d 	.word	0x08002e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d045      	beq.n	8002e50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e042      	b.n	8002e50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd2:	d13f      	bne.n	8002e54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e03c      	b.n	8002e54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	d121      	bne.n	8002e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d836      	bhi.n	8002e58 <DMA_CheckFifoParam+0xd8>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x70>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e07 	.word	0x08002e07
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e19 	.word	0x08002e19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e02f      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e16:	e021      	b.n	8002e5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e20:	d11e      	bne.n	8002e60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e26:	e01b      	b.n	8002e60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <DMA_CheckFifoParam+0xb4>
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d003      	beq.n	8002e3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e32:	e018      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e015      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4a:	e00b      	b.n	8002e64 <DMA_CheckFifoParam+0xe4>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e00a      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e50:	bf00      	nop
 8002e52:	e008      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e54:	bf00      	nop
 8002e56:	e006      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e004      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e5c:	bf00      	nop
 8002e5e:	e002      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e64:	bf00      	nop
    }
  } 
  
  return status; 
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e159      	b.n	8003144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8148 	bne.w	800313e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00b      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec2:	2b11      	cmp	r3, #17
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	d130      	bne.n	8002f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 0201 	and.w	r2, r3, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0xfc>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a2 	beq.w	800313e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b56      	ldr	r3, [pc, #344]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a55      	ldr	r2, [pc, #340]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_GPIO_Init+0x2e8>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a48      	ldr	r2, [pc, #288]	; (8003160 <HAL_GPIO_Init+0x2ec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x202>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_GPIO_Init+0x2f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x1fe>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_GPIO_Init+0x2f4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x1fa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a45      	ldr	r2, [pc, #276]	; (800316c <HAL_GPIO_Init+0x2f8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x1f6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_GPIO_Init+0x2fc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x1f2>
 8003062:	2304      	movs	r3, #4
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003066:	2307      	movs	r3, #7
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x204>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x204>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4934      	ldr	r1, [pc, #208]	; (800315c <HAL_GPIO_Init+0x2e8>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ba:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_GPIO_Init+0x300>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f aea2 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3724      	adds	r7, #36	; 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40023800 	.word	0x40023800
 800315c:	40013800 	.word	0x40013800
 8003160:	40020000 	.word	0x40020000
 8003164:	40020400 	.word	0x40020400
 8003168:	40020800 	.word	0x40020800
 800316c:	40020c00 	.word	0x40020c00
 8003170:	40021000 	.word	0x40021000
 8003174:	40013c00 	.word	0x40013c00

08003178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
 8003184:	4613      	mov	r3, r2
 8003186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003194:	e003      	b.n	800319e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	041a      	lsls	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	619a      	str	r2, [r3, #24]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e25b      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d075      	beq.n	80032b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ca:	4ba3      	ldr	r3, [pc, #652]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4ba0      	ldr	r3, [pc, #640]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d112      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b9d      	ldr	r3, [pc, #628]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ee:	d10b      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	4b99      	ldr	r3, [pc, #612]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x108>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d157      	bne.n	80032b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e236      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x74>
 8003212:	4b91      	ldr	r3, [pc, #580]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a90      	ldr	r2, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a8a      	ldr	r2, [pc, #552]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a87      	ldr	r2, [pc, #540]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003244:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a80      	ldr	r2, [pc, #512]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fd7c 	bl	8001d60 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fd78 	bl	8001d60 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1fb      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xc0>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fd68 	bl	8001d60 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fd64 	bl	8001d60 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1e7      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0xe8>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1bb      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b56      	ldr	r3, [pc, #344]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4952      	ldr	r1, [pc, #328]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCC_OscConfig+0x2b0>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fd1d 	bl	8001d60 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332a:	f7fe fd19 	bl	8001d60 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e19c      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4940      	ldr	r1, [pc, #256]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCC_OscConfig+0x2b0>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fcfc 	bl	8001d60 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe fcf8 	bl	8001d60 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e17b      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d030      	beq.n	80033f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b30      	ldr	r3, [pc, #192]	; (8003460 <HAL_RCC_OscConfig+0x2b4>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fcdc 	bl	8001d60 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe fcd8 	bl	8001d60 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e15b      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x200>
 80033ca:	e015      	b.n	80033f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x2b4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fcc5 	bl	8001d60 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033da:	f7fe fcc1 	bl	8001d60 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e144      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a0 	beq.w	8003546 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x2b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d121      	bne.n	8003486 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCC_OscConfig+0x2b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_RCC_OscConfig+0x2b8>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fe fc87 	bl	8001d60 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e011      	b.n	800347a <HAL_RCC_OscConfig+0x2ce>
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	42470000 	.word	0x42470000
 8003460:	42470e80 	.word	0x42470e80
 8003464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fe fc7a 	bl	8001d60 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0fd      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b81      	ldr	r3, [pc, #516]	; (8003680 <HAL_RCC_OscConfig+0x4d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x2f0>
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a7c      	ldr	r2, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	e01c      	b.n	80034d6 <HAL_RCC_OscConfig+0x32a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x312>
 80034a4:	4b77      	ldr	r3, [pc, #476]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a76      	ldr	r2, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	4b74      	ldr	r3, [pc, #464]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x32a>
 80034be:	4b71      	ldr	r3, [pc, #452]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a70      	ldr	r2, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b6e      	ldr	r3, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a6d      	ldr	r2, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fc3f 	bl	8001d60 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fc3b 	bl	8001d60 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0bc      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCC_OscConfig+0x33a>
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe fc29 	bl	8001d60 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe fc25 	bl	8001d60 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0a6      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8092 	beq.w	8003674 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d05c      	beq.n	8003616 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d141      	bne.n	80035e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCC_OscConfig+0x4dc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fbf9 	bl	8001d60 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fbf5 	bl	8001d60 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e078      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	019b      	lsls	r3, r3, #6
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	4933      	ldr	r1, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_RCC_OscConfig+0x4dc>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fbce 	bl	8001d60 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fbca 	bl	8001d60 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e04d      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x41c>
 80035e6:	e045      	b.n	8003674 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x4dc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fbb7 	bl	8001d60 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fbb3 	bl	8001d60 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e036      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x44a>
 8003614:	e02e      	b.n	8003674 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e029      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	429a      	cmp	r2, r3
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d115      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003650:	4293      	cmp	r3, r2
 8003652:	d10d      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40007000 	.word	0x40007000
 8003684:	40023800 	.word	0x40023800
 8003688:	42470060 	.word	0x42470060

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0cc      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90c      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d044      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e067      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4934      	ldr	r1, [pc, #208]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe faf0 	bl	8001d60 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fe faec 	bl	8001d60 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e04f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20c      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4601      	mov	r1, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	fa21 f303 	lsr.w	r3, r1, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fa50 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00
 8003848:	40023800 	.word	0x40023800
 800384c:	08006088 	.word	0x08006088
 8003850:	20000004 	.word	0x20000004
 8003854:	20000008 	.word	0x20000008

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	2300      	movs	r3, #0
 8003868:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b04      	cmp	r3, #4
 8003878:	d007      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x32>
 800387a:	2b08      	cmp	r3, #8
 800387c:	d008      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x38>
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 80b4 	bne.w	80039ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b5e      	ldr	r3, [pc, #376]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003886:	60bb      	str	r3, [r7, #8]
       break;
 8003888:	e0b3      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800388c:	60bb      	str	r3, [r7, #8]
      break;
 800388e:	e0b0      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389a:	4b58      	ldr	r3, [pc, #352]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04a      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b55      	ldr	r3, [pc, #340]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	ea03 0501 	and.w	r5, r3, r1
 80038bc:	ea04 0602 	and.w	r6, r4, r2
 80038c0:	4629      	mov	r1, r5
 80038c2:	4632      	mov	r2, r6
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	0154      	lsls	r4, r2, #5
 80038ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038d2:	014b      	lsls	r3, r1, #5
 80038d4:	4619      	mov	r1, r3
 80038d6:	4622      	mov	r2, r4
 80038d8:	1b49      	subs	r1, r1, r5
 80038da:	eb62 0206 	sbc.w	r2, r2, r6
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	0194      	lsls	r4, r2, #6
 80038e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038ec:	018b      	lsls	r3, r1, #6
 80038ee:	1a5b      	subs	r3, r3, r1
 80038f0:	eb64 0402 	sbc.w	r4, r4, r2
 80038f4:	f04f 0100 	mov.w	r1, #0
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	00e2      	lsls	r2, r4, #3
 80038fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003902:	00d9      	lsls	r1, r3, #3
 8003904:	460b      	mov	r3, r1
 8003906:	4614      	mov	r4, r2
 8003908:	195b      	adds	r3, r3, r5
 800390a:	eb44 0406 	adc.w	r4, r4, r6
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	0262      	lsls	r2, r4, #9
 8003918:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800391c:	0259      	lsls	r1, r3, #9
 800391e:	460b      	mov	r3, r1
 8003920:	4614      	mov	r4, r2
 8003922:	4618      	mov	r0, r3
 8003924:	4621      	mov	r1, r4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f04f 0400 	mov.w	r4, #0
 800392c:	461a      	mov	r2, r3
 800392e:	4623      	mov	r3, r4
 8003930:	f7fd f93c 	bl	8000bac <__aeabi_uldivmod>
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e049      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	f04f 0400 	mov.w	r4, #0
 8003946:	f240 11ff 	movw	r1, #511	; 0x1ff
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	ea03 0501 	and.w	r5, r3, r1
 8003952:	ea04 0602 	and.w	r6, r4, r2
 8003956:	4629      	mov	r1, r5
 8003958:	4632      	mov	r2, r6
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	f04f 0400 	mov.w	r4, #0
 8003962:	0154      	lsls	r4, r2, #5
 8003964:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003968:	014b      	lsls	r3, r1, #5
 800396a:	4619      	mov	r1, r3
 800396c:	4622      	mov	r2, r4
 800396e:	1b49      	subs	r1, r1, r5
 8003970:	eb62 0206 	sbc.w	r2, r2, r6
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	0194      	lsls	r4, r2, #6
 800397e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003982:	018b      	lsls	r3, r1, #6
 8003984:	1a5b      	subs	r3, r3, r1
 8003986:	eb64 0402 	sbc.w	r4, r4, r2
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	00e2      	lsls	r2, r4, #3
 8003994:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003998:	00d9      	lsls	r1, r3, #3
 800399a:	460b      	mov	r3, r1
 800399c:	4614      	mov	r4, r2
 800399e:	195b      	adds	r3, r3, r5
 80039a0:	eb44 0406 	adc.w	r4, r4, r6
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	02a2      	lsls	r2, r4, #10
 80039ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039b2:	0299      	lsls	r1, r3, #10
 80039b4:	460b      	mov	r3, r1
 80039b6:	4614      	mov	r4, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	4621      	mov	r1, r4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	461a      	mov	r2, r3
 80039c4:	4623      	mov	r3, r4
 80039c6:	f7fd f8f1 	bl	8000bac <__aeabi_uldivmod>
 80039ca:	4603      	mov	r3, r0
 80039cc:	460c      	mov	r4, r1
 80039ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	60bb      	str	r3, [r7, #8]
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ee:	60bb      	str	r3, [r7, #8]
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	68bb      	ldr	r3, [r7, #8]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000004 	.word	0x20000004

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4a03      	ldr	r2, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08006098 	.word	0x08006098

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08006098 	.word	0x08006098

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03f      	b.n	8003b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd ffec 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 faef 	bl	8004098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d130      	bne.n	8003b86 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Transmit_IT+0x26>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e029      	b.n	8003b88 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Transmit_IT+0x38>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e022      	b.n	8003b88 <HAL_UART_Transmit_IT+0x7e>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b80:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d140      	bne.n	8003c30 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_UART_Receive_IT+0x26>
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e039      	b.n	8003c32 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Receive_IT+0x38>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e032      	b.n	8003c32 <HAL_UART_Receive_IT+0x9e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2222      	movs	r2, #34	; 0x22
 8003bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c0a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0220 	orr.w	r2, r2, #32
 8003c2a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_UART_IRQHandler+0x52>
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f982 	bl	8003f94 <UART_Receive_IT>
      return;
 8003c90:	e0d1      	b.n	8003e36 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80b0 	beq.w	8003dfa <HAL_UART_IRQHandler+0x1ba>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x70>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a5 	beq.w	8003dfa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x90>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xb0>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f043 0202 	orr.w	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_UART_IRQHandler+0xd0>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00f      	beq.n	8003d3a <HAL_UART_IRQHandler+0xfa>
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <HAL_UART_IRQHandler+0xee>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	f043 0208 	orr.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d078      	beq.n	8003e34 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_UART_IRQHandler+0x11c>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f91c 	bl	8003f94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_UART_IRQHandler+0x144>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d031      	beq.n	8003de8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f865 	bl	8003e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d123      	bne.n	8003de0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_UART_IRQHandler+0x1fc>)
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe fdcf 	bl	8002960 <HAL_DMA_Abort_IT>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d016      	beq.n	8003df6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd6:	e00e      	b.n	8003df6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f831 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dde:	e00a      	b.n	8003df6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f82d 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de6:	e006      	b.n	8003df6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f829 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003df4:	e01e      	b.n	8003e34 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	bf00      	nop
    return;
 8003df8:	e01c      	b.n	8003e34 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1d6>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f852 	bl	8003eb8 <UART_Transmit_IT>
    return;
 8003e14:	e00f      	b.n	8003e36 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_UART_IRQHandler+0x1f6>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f89a 	bl	8003f64 <UART_EndTransmit_IT>
    return;
 8003e30:	bf00      	nop
 8003e32:	e000      	b.n	8003e36 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e34:	bf00      	nop
  }
}
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08003e91 	.word	0x08003e91

08003e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ffc8 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d144      	bne.n	8003f56 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d11a      	bne.n	8003f0c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]
 8003efe:	e00e      	b.n	8003f1e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]
 8003f0a:	e008      	b.n	8003f1e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6211      	str	r1, [r2, #32]
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fd f8bd 	bl	8001104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b22      	cmp	r3, #34	; 0x22
 8003fa6:	d171      	bne.n	800408c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	d123      	bne.n	8003ffa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10e      	bne.n	8003fde <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
 8003fdc:	e029      	b.n	8004032 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff8:	e01b      	b.n	8004032 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6858      	ldr	r0, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	1c59      	adds	r1, r3, #1
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6291      	str	r1, [r2, #40]	; 0x28
 8004012:	b2c2      	uxtb	r2, r0
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e00c      	b.n	8004032 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	1c58      	adds	r0, r3, #1
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	6288      	str	r0, [r1, #40]	; 0x28
 800402a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4619      	mov	r1, r3
 8004040:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004042:	2b00      	cmp	r3, #0
 8004044:	d120      	bne.n	8004088 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0220 	bic.w	r2, r2, #32
 8004054:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd f874 	bl	800116c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e002      	b.n	800408e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040da:	f023 030c 	bic.w	r3, r3, #12
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	f040 818b 	bne.w	8004420 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4ac1      	ldr	r2, [pc, #772]	; (8004414 <UART_SetConfig+0x37c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d005      	beq.n	8004120 <UART_SetConfig+0x88>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4abf      	ldr	r2, [pc, #764]	; (8004418 <UART_SetConfig+0x380>)
 800411a:	4293      	cmp	r3, r2
 800411c:	f040 80bd 	bne.w	800429a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7ff fc92 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8004124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	461d      	mov	r5, r3
 800412a:	f04f 0600 	mov.w	r6, #0
 800412e:	46a8      	mov	r8, r5
 8004130:	46b1      	mov	r9, r6
 8004132:	eb18 0308 	adds.w	r3, r8, r8
 8004136:	eb49 0409 	adc.w	r4, r9, r9
 800413a:	4698      	mov	r8, r3
 800413c:	46a1      	mov	r9, r4
 800413e:	eb18 0805 	adds.w	r8, r8, r5
 8004142:	eb49 0906 	adc.w	r9, r9, r6
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800415a:	4688      	mov	r8, r1
 800415c:	4691      	mov	r9, r2
 800415e:	eb18 0005 	adds.w	r0, r8, r5
 8004162:	eb49 0106 	adc.w	r1, r9, r6
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	461d      	mov	r5, r3
 800416c:	f04f 0600 	mov.w	r6, #0
 8004170:	196b      	adds	r3, r5, r5
 8004172:	eb46 0406 	adc.w	r4, r6, r6
 8004176:	461a      	mov	r2, r3
 8004178:	4623      	mov	r3, r4
 800417a:	f7fc fd17 	bl	8000bac <__aeabi_uldivmod>
 800417e:	4603      	mov	r3, r0
 8004180:	460c      	mov	r4, r1
 8004182:	461a      	mov	r2, r3
 8004184:	4ba5      	ldr	r3, [pc, #660]	; (800441c <UART_SetConfig+0x384>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	461d      	mov	r5, r3
 8004194:	f04f 0600 	mov.w	r6, #0
 8004198:	46a9      	mov	r9, r5
 800419a:	46b2      	mov	sl, r6
 800419c:	eb19 0309 	adds.w	r3, r9, r9
 80041a0:	eb4a 040a 	adc.w	r4, sl, sl
 80041a4:	4699      	mov	r9, r3
 80041a6:	46a2      	mov	sl, r4
 80041a8:	eb19 0905 	adds.w	r9, r9, r5
 80041ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c4:	4689      	mov	r9, r1
 80041c6:	4692      	mov	sl, r2
 80041c8:	eb19 0005 	adds.w	r0, r9, r5
 80041cc:	eb4a 0106 	adc.w	r1, sl, r6
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	461d      	mov	r5, r3
 80041d6:	f04f 0600 	mov.w	r6, #0
 80041da:	196b      	adds	r3, r5, r5
 80041dc:	eb46 0406 	adc.w	r4, r6, r6
 80041e0:	461a      	mov	r2, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	f7fc fce2 	bl	8000bac <__aeabi_uldivmod>
 80041e8:	4603      	mov	r3, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b8b      	ldr	r3, [pc, #556]	; (800441c <UART_SetConfig+0x384>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a86      	ldr	r2, [pc, #536]	; (800441c <UART_SetConfig+0x384>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004210:	4498      	add	r8, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	461d      	mov	r5, r3
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	46a9      	mov	r9, r5
 800421c:	46b2      	mov	sl, r6
 800421e:	eb19 0309 	adds.w	r3, r9, r9
 8004222:	eb4a 040a 	adc.w	r4, sl, sl
 8004226:	4699      	mov	r9, r3
 8004228:	46a2      	mov	sl, r4
 800422a:	eb19 0905 	adds.w	r9, r9, r5
 800422e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004246:	4689      	mov	r9, r1
 8004248:	4692      	mov	sl, r2
 800424a:	eb19 0005 	adds.w	r0, r9, r5
 800424e:	eb4a 0106 	adc.w	r1, sl, r6
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	461d      	mov	r5, r3
 8004258:	f04f 0600 	mov.w	r6, #0
 800425c:	196b      	adds	r3, r5, r5
 800425e:	eb46 0406 	adc.w	r4, r6, r6
 8004262:	461a      	mov	r2, r3
 8004264:	4623      	mov	r3, r4
 8004266:	f7fc fca1 	bl	8000bac <__aeabi_uldivmod>
 800426a:	4603      	mov	r3, r0
 800426c:	460c      	mov	r4, r1
 800426e:	461a      	mov	r2, r3
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <UART_SetConfig+0x384>)
 8004272:	fba3 1302 	umull	r1, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2164      	movs	r1, #100	; 0x64
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	3332      	adds	r3, #50	; 0x32
 8004284:	4a65      	ldr	r2, [pc, #404]	; (800441c <UART_SetConfig+0x384>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f003 0207 	and.w	r2, r3, #7
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4442      	add	r2, r8
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	e26f      	b.n	800477a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429a:	f7ff fbc1 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800429e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	461d      	mov	r5, r3
 80042a4:	f04f 0600 	mov.w	r6, #0
 80042a8:	46a8      	mov	r8, r5
 80042aa:	46b1      	mov	r9, r6
 80042ac:	eb18 0308 	adds.w	r3, r8, r8
 80042b0:	eb49 0409 	adc.w	r4, r9, r9
 80042b4:	4698      	mov	r8, r3
 80042b6:	46a1      	mov	r9, r4
 80042b8:	eb18 0805 	adds.w	r8, r8, r5
 80042bc:	eb49 0906 	adc.w	r9, r9, r6
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042d4:	4688      	mov	r8, r1
 80042d6:	4691      	mov	r9, r2
 80042d8:	eb18 0005 	adds.w	r0, r8, r5
 80042dc:	eb49 0106 	adc.w	r1, r9, r6
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	461d      	mov	r5, r3
 80042e6:	f04f 0600 	mov.w	r6, #0
 80042ea:	196b      	adds	r3, r5, r5
 80042ec:	eb46 0406 	adc.w	r4, r6, r6
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fc fc5a 	bl	8000bac <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <UART_SetConfig+0x384>)
 8004300:	fba3 2302 	umull	r2, r3, r3, r2
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	461d      	mov	r5, r3
 800430e:	f04f 0600 	mov.w	r6, #0
 8004312:	46a9      	mov	r9, r5
 8004314:	46b2      	mov	sl, r6
 8004316:	eb19 0309 	adds.w	r3, r9, r9
 800431a:	eb4a 040a 	adc.w	r4, sl, sl
 800431e:	4699      	mov	r9, r3
 8004320:	46a2      	mov	sl, r4
 8004322:	eb19 0905 	adds.w	r9, r9, r5
 8004326:	eb4a 0a06 	adc.w	sl, sl, r6
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433e:	4689      	mov	r9, r1
 8004340:	4692      	mov	sl, r2
 8004342:	eb19 0005 	adds.w	r0, r9, r5
 8004346:	eb4a 0106 	adc.w	r1, sl, r6
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	461d      	mov	r5, r3
 8004350:	f04f 0600 	mov.w	r6, #0
 8004354:	196b      	adds	r3, r5, r5
 8004356:	eb46 0406 	adc.w	r4, r6, r6
 800435a:	461a      	mov	r2, r3
 800435c:	4623      	mov	r3, r4
 800435e:	f7fc fc25 	bl	8000bac <__aeabi_uldivmod>
 8004362:	4603      	mov	r3, r0
 8004364:	460c      	mov	r4, r1
 8004366:	461a      	mov	r2, r3
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <UART_SetConfig+0x384>)
 800436a:	fba3 1302 	umull	r1, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2164      	movs	r1, #100	; 0x64
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	3332      	adds	r3, #50	; 0x32
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <UART_SetConfig+0x384>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800438a:	4498      	add	r8, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	461d      	mov	r5, r3
 8004390:	f04f 0600 	mov.w	r6, #0
 8004394:	46a9      	mov	r9, r5
 8004396:	46b2      	mov	sl, r6
 8004398:	eb19 0309 	adds.w	r3, r9, r9
 800439c:	eb4a 040a 	adc.w	r4, sl, sl
 80043a0:	4699      	mov	r9, r3
 80043a2:	46a2      	mov	sl, r4
 80043a4:	eb19 0905 	adds.w	r9, r9, r5
 80043a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c0:	4689      	mov	r9, r1
 80043c2:	4692      	mov	sl, r2
 80043c4:	eb19 0005 	adds.w	r0, r9, r5
 80043c8:	eb4a 0106 	adc.w	r1, sl, r6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	461d      	mov	r5, r3
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	196b      	adds	r3, r5, r5
 80043d8:	eb46 0406 	adc.w	r4, r6, r6
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fc fbe4 	bl	8000bac <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <UART_SetConfig+0x384>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a07      	ldr	r2, [pc, #28]	; (800441c <UART_SetConfig+0x384>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4442      	add	r2, r8
 8004410:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004412:	e1b2      	b.n	800477a <UART_SetConfig+0x6e2>
 8004414:	40011000 	.word	0x40011000
 8004418:	40011400 	.word	0x40011400
 800441c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4ad7      	ldr	r2, [pc, #860]	; (8004784 <UART_SetConfig+0x6ec>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d005      	beq.n	8004436 <UART_SetConfig+0x39e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4ad6      	ldr	r2, [pc, #856]	; (8004788 <UART_SetConfig+0x6f0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	f040 80d1 	bne.w	80045d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004436:	f7ff fb07 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 800443a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	469a      	mov	sl, r3
 8004440:	f04f 0b00 	mov.w	fp, #0
 8004444:	46d0      	mov	r8, sl
 8004446:	46d9      	mov	r9, fp
 8004448:	eb18 0308 	adds.w	r3, r8, r8
 800444c:	eb49 0409 	adc.w	r4, r9, r9
 8004450:	4698      	mov	r8, r3
 8004452:	46a1      	mov	r9, r4
 8004454:	eb18 080a 	adds.w	r8, r8, sl
 8004458:	eb49 090b 	adc.w	r9, r9, fp
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800446c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004470:	4688      	mov	r8, r1
 8004472:	4691      	mov	r9, r2
 8004474:	eb1a 0508 	adds.w	r5, sl, r8
 8004478:	eb4b 0609 	adc.w	r6, fp, r9
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4619      	mov	r1, r3
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f04f 0400 	mov.w	r4, #0
 800448e:	0094      	lsls	r4, r2, #2
 8004490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004494:	008b      	lsls	r3, r1, #2
 8004496:	461a      	mov	r2, r3
 8004498:	4623      	mov	r3, r4
 800449a:	4628      	mov	r0, r5
 800449c:	4631      	mov	r1, r6
 800449e:	f7fc fb85 	bl	8000bac <__aeabi_uldivmod>
 80044a2:	4603      	mov	r3, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	461a      	mov	r2, r3
 80044a8:	4bb8      	ldr	r3, [pc, #736]	; (800478c <UART_SetConfig+0x6f4>)
 80044aa:	fba3 2302 	umull	r2, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	469b      	mov	fp, r3
 80044b8:	f04f 0c00 	mov.w	ip, #0
 80044bc:	46d9      	mov	r9, fp
 80044be:	46e2      	mov	sl, ip
 80044c0:	eb19 0309 	adds.w	r3, r9, r9
 80044c4:	eb4a 040a 	adc.w	r4, sl, sl
 80044c8:	4699      	mov	r9, r3
 80044ca:	46a2      	mov	sl, r4
 80044cc:	eb19 090b 	adds.w	r9, r9, fp
 80044d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e8:	4689      	mov	r9, r1
 80044ea:	4692      	mov	sl, r2
 80044ec:	eb1b 0509 	adds.w	r5, fp, r9
 80044f0:	eb4c 060a 	adc.w	r6, ip, sl
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	0094      	lsls	r4, r2, #2
 8004508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800450c:	008b      	lsls	r3, r1, #2
 800450e:	461a      	mov	r2, r3
 8004510:	4623      	mov	r3, r4
 8004512:	4628      	mov	r0, r5
 8004514:	4631      	mov	r1, r6
 8004516:	f7fc fb49 	bl	8000bac <__aeabi_uldivmod>
 800451a:	4603      	mov	r3, r0
 800451c:	460c      	mov	r4, r1
 800451e:	461a      	mov	r2, r3
 8004520:	4b9a      	ldr	r3, [pc, #616]	; (800478c <UART_SetConfig+0x6f4>)
 8004522:	fba3 1302 	umull	r1, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2164      	movs	r1, #100	; 0x64
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	3332      	adds	r3, #50	; 0x32
 8004534:	4a95      	ldr	r2, [pc, #596]	; (800478c <UART_SetConfig+0x6f4>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004540:	4498      	add	r8, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	469b      	mov	fp, r3
 8004546:	f04f 0c00 	mov.w	ip, #0
 800454a:	46d9      	mov	r9, fp
 800454c:	46e2      	mov	sl, ip
 800454e:	eb19 0309 	adds.w	r3, r9, r9
 8004552:	eb4a 040a 	adc.w	r4, sl, sl
 8004556:	4699      	mov	r9, r3
 8004558:	46a2      	mov	sl, r4
 800455a:	eb19 090b 	adds.w	r9, r9, fp
 800455e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004572:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004576:	4689      	mov	r9, r1
 8004578:	4692      	mov	sl, r2
 800457a:	eb1b 0509 	adds.w	r5, fp, r9
 800457e:	eb4c 060a 	adc.w	r6, ip, sl
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4619      	mov	r1, r3
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	0094      	lsls	r4, r2, #2
 8004596:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800459a:	008b      	lsls	r3, r1, #2
 800459c:	461a      	mov	r2, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	4631      	mov	r1, r6
 80045a4:	f7fc fb02 	bl	8000bac <__aeabi_uldivmod>
 80045a8:	4603      	mov	r3, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b77      	ldr	r3, [pc, #476]	; (800478c <UART_SetConfig+0x6f4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	; 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	4a72      	ldr	r2, [pc, #456]	; (800478c <UART_SetConfig+0x6f4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 020f 	and.w	r2, r3, #15
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4442      	add	r2, r8
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	e0d0      	b.n	800477a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7ff fa22 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80045dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	469a      	mov	sl, r3
 80045e2:	f04f 0b00 	mov.w	fp, #0
 80045e6:	46d0      	mov	r8, sl
 80045e8:	46d9      	mov	r9, fp
 80045ea:	eb18 0308 	adds.w	r3, r8, r8
 80045ee:	eb49 0409 	adc.w	r4, r9, r9
 80045f2:	4698      	mov	r8, r3
 80045f4:	46a1      	mov	r9, r4
 80045f6:	eb18 080a 	adds.w	r8, r8, sl
 80045fa:	eb49 090b 	adc.w	r9, r9, fp
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800460a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800460e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004612:	4688      	mov	r8, r1
 8004614:	4691      	mov	r9, r2
 8004616:	eb1a 0508 	adds.w	r5, sl, r8
 800461a:	eb4b 0609 	adc.w	r6, fp, r9
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4619      	mov	r1, r3
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	0094      	lsls	r4, r2, #2
 8004632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004636:	008b      	lsls	r3, r1, #2
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	4628      	mov	r0, r5
 800463e:	4631      	mov	r1, r6
 8004640:	f7fc fab4 	bl	8000bac <__aeabi_uldivmod>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	461a      	mov	r2, r3
 800464a:	4b50      	ldr	r3, [pc, #320]	; (800478c <UART_SetConfig+0x6f4>)
 800464c:	fba3 2302 	umull	r2, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	469b      	mov	fp, r3
 800465a:	f04f 0c00 	mov.w	ip, #0
 800465e:	46d9      	mov	r9, fp
 8004660:	46e2      	mov	sl, ip
 8004662:	eb19 0309 	adds.w	r3, r9, r9
 8004666:	eb4a 040a 	adc.w	r4, sl, sl
 800466a:	4699      	mov	r9, r3
 800466c:	46a2      	mov	sl, r4
 800466e:	eb19 090b 	adds.w	r9, r9, fp
 8004672:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800468a:	4689      	mov	r9, r1
 800468c:	4692      	mov	sl, r2
 800468e:	eb1b 0509 	adds.w	r5, fp, r9
 8004692:	eb4c 060a 	adc.w	r6, ip, sl
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4619      	mov	r1, r3
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	0094      	lsls	r4, r2, #2
 80046aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ae:	008b      	lsls	r3, r1, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	4631      	mov	r1, r6
 80046b8:	f7fc fa78 	bl	8000bac <__aeabi_uldivmod>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b32      	ldr	r3, [pc, #200]	; (800478c <UART_SetConfig+0x6f4>)
 80046c4:	fba3 1302 	umull	r1, r3, r3, r2
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	2164      	movs	r1, #100	; 0x64
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	3332      	adds	r3, #50	; 0x32
 80046d6:	4a2d      	ldr	r2, [pc, #180]	; (800478c <UART_SetConfig+0x6f4>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e2:	4498      	add	r8, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	469b      	mov	fp, r3
 80046e8:	f04f 0c00 	mov.w	ip, #0
 80046ec:	46d9      	mov	r9, fp
 80046ee:	46e2      	mov	sl, ip
 80046f0:	eb19 0309 	adds.w	r3, r9, r9
 80046f4:	eb4a 040a 	adc.w	r4, sl, sl
 80046f8:	4699      	mov	r9, r3
 80046fa:	46a2      	mov	sl, r4
 80046fc:	eb19 090b 	adds.w	r9, r9, fp
 8004700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004718:	4689      	mov	r9, r1
 800471a:	4692      	mov	sl, r2
 800471c:	eb1b 0509 	adds.w	r5, fp, r9
 8004720:	eb4c 060a 	adc.w	r6, ip, sl
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	f04f 0400 	mov.w	r4, #0
 8004736:	0094      	lsls	r4, r2, #2
 8004738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800473c:	008b      	lsls	r3, r1, #2
 800473e:	461a      	mov	r2, r3
 8004740:	4623      	mov	r3, r4
 8004742:	4628      	mov	r0, r5
 8004744:	4631      	mov	r1, r6
 8004746:	f7fc fa31 	bl	8000bac <__aeabi_uldivmod>
 800474a:	4603      	mov	r3, r0
 800474c:	460c      	mov	r4, r1
 800474e:	461a      	mov	r2, r3
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <UART_SetConfig+0x6f4>)
 8004752:	fba3 1302 	umull	r1, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2164      	movs	r1, #100	; 0x64
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	3332      	adds	r3, #50	; 0x32
 8004764:	4a09      	ldr	r2, [pc, #36]	; (800478c <UART_SetConfig+0x6f4>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4442      	add	r2, r8
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	e7ff      	b.n	800477a <UART_SetConfig+0x6e2>
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004784:	40011000 	.word	0x40011000
 8004788:	40011400 	.word	0x40011400
 800478c:	51eb851f 	.word	0x51eb851f

08004790 <__errno>:
 8004790:	4b01      	ldr	r3, [pc, #4]	; (8004798 <__errno+0x8>)
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000010 	.word	0x20000010

0800479c <__libc_init_array>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4e0d      	ldr	r6, [pc, #52]	; (80047d4 <__libc_init_array+0x38>)
 80047a0:	4c0d      	ldr	r4, [pc, #52]	; (80047d8 <__libc_init_array+0x3c>)
 80047a2:	1ba4      	subs	r4, r4, r6
 80047a4:	10a4      	asrs	r4, r4, #2
 80047a6:	2500      	movs	r5, #0
 80047a8:	42a5      	cmp	r5, r4
 80047aa:	d109      	bne.n	80047c0 <__libc_init_array+0x24>
 80047ac:	4e0b      	ldr	r6, [pc, #44]	; (80047dc <__libc_init_array+0x40>)
 80047ae:	4c0c      	ldr	r4, [pc, #48]	; (80047e0 <__libc_init_array+0x44>)
 80047b0:	f001 fc3c 	bl	800602c <_init>
 80047b4:	1ba4      	subs	r4, r4, r6
 80047b6:	10a4      	asrs	r4, r4, #2
 80047b8:	2500      	movs	r5, #0
 80047ba:	42a5      	cmp	r5, r4
 80047bc:	d105      	bne.n	80047ca <__libc_init_array+0x2e>
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c4:	4798      	blx	r3
 80047c6:	3501      	adds	r5, #1
 80047c8:	e7ee      	b.n	80047a8 <__libc_init_array+0xc>
 80047ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ce:	4798      	blx	r3
 80047d0:	3501      	adds	r5, #1
 80047d2:	e7f2      	b.n	80047ba <__libc_init_array+0x1e>
 80047d4:	080062c0 	.word	0x080062c0
 80047d8:	080062c0 	.word	0x080062c0
 80047dc:	080062c0 	.word	0x080062c0
 80047e0:	080062c4 	.word	0x080062c4

080047e4 <memcpy>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	1e43      	subs	r3, r0, #1
 80047e8:	440a      	add	r2, r1
 80047ea:	4291      	cmp	r1, r2
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xc>
 80047ee:	bd10      	pop	{r4, pc}
 80047f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f8:	e7f7      	b.n	80047ea <memcpy+0x6>

080047fa <memset>:
 80047fa:	4402      	add	r2, r0
 80047fc:	4603      	mov	r3, r0
 80047fe:	4293      	cmp	r3, r2
 8004800:	d100      	bne.n	8004804 <memset+0xa>
 8004802:	4770      	bx	lr
 8004804:	f803 1b01 	strb.w	r1, [r3], #1
 8004808:	e7f9      	b.n	80047fe <memset+0x4>
	...

0800480c <_vsiprintf_r>:
 800480c:	b500      	push	{lr}
 800480e:	b09b      	sub	sp, #108	; 0x6c
 8004810:	9100      	str	r1, [sp, #0]
 8004812:	9104      	str	r1, [sp, #16]
 8004814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004818:	9105      	str	r1, [sp, #20]
 800481a:	9102      	str	r1, [sp, #8]
 800481c:	4905      	ldr	r1, [pc, #20]	; (8004834 <_vsiprintf_r+0x28>)
 800481e:	9103      	str	r1, [sp, #12]
 8004820:	4669      	mov	r1, sp
 8004822:	f000 f86d 	bl	8004900 <_svfiprintf_r>
 8004826:	9b00      	ldr	r3, [sp, #0]
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	b01b      	add	sp, #108	; 0x6c
 800482e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004832:	bf00      	nop
 8004834:	ffff0208 	.word	0xffff0208

08004838 <vsiprintf>:
 8004838:	4613      	mov	r3, r2
 800483a:	460a      	mov	r2, r1
 800483c:	4601      	mov	r1, r0
 800483e:	4802      	ldr	r0, [pc, #8]	; (8004848 <vsiprintf+0x10>)
 8004840:	6800      	ldr	r0, [r0, #0]
 8004842:	f7ff bfe3 	b.w	800480c <_vsiprintf_r>
 8004846:	bf00      	nop
 8004848:	20000010 	.word	0x20000010

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	429e      	cmp	r6, r3
 8004854:	4682      	mov	sl, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4690      	mov	r8, r2
 800485a:	4699      	mov	r9, r3
 800485c:	d837      	bhi.n	80048ce <__ssputs_r+0x82>
 800485e:	898a      	ldrh	r2, [r1, #12]
 8004860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004864:	d031      	beq.n	80048ca <__ssputs_r+0x7e>
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	6909      	ldr	r1, [r1, #16]
 800486a:	1a6f      	subs	r7, r5, r1
 800486c:	6965      	ldr	r5, [r4, #20]
 800486e:	2302      	movs	r3, #2
 8004870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004874:	fb95 f5f3 	sdiv	r5, r5, r3
 8004878:	f109 0301 	add.w	r3, r9, #1
 800487c:	443b      	add	r3, r7
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d530      	bpl.n	80048ea <__ssputs_r+0x9e>
 8004888:	4629      	mov	r1, r5
 800488a:	f000 fb21 	bl	8004ed0 <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b950      	cbnz	r0, 80048a8 <__ssputs_r+0x5c>
 8004892:	230c      	movs	r3, #12
 8004894:	f8ca 3000 	str.w	r3, [sl]
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	463a      	mov	r2, r7
 80048aa:	6921      	ldr	r1, [r4, #16]
 80048ac:	f7ff ff9a 	bl	80047e4 <memcpy>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	6126      	str	r6, [r4, #16]
 80048be:	6165      	str	r5, [r4, #20]
 80048c0:	443e      	add	r6, r7
 80048c2:	1bed      	subs	r5, r5, r7
 80048c4:	6026      	str	r6, [r4, #0]
 80048c6:	60a5      	str	r5, [r4, #8]
 80048c8:	464e      	mov	r6, r9
 80048ca:	454e      	cmp	r6, r9
 80048cc:	d900      	bls.n	80048d0 <__ssputs_r+0x84>
 80048ce:	464e      	mov	r6, r9
 80048d0:	4632      	mov	r2, r6
 80048d2:	4641      	mov	r1, r8
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	f000 fa93 	bl	8004e00 <memmove>
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	1b9b      	subs	r3, r3, r6
 80048de:	60a3      	str	r3, [r4, #8]
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	441e      	add	r6, r3
 80048e4:	6026      	str	r6, [r4, #0]
 80048e6:	2000      	movs	r0, #0
 80048e8:	e7dc      	b.n	80048a4 <__ssputs_r+0x58>
 80048ea:	462a      	mov	r2, r5
 80048ec:	f000 fb4a 	bl	8004f84 <_realloc_r>
 80048f0:	4606      	mov	r6, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d1e2      	bne.n	80048bc <__ssputs_r+0x70>
 80048f6:	6921      	ldr	r1, [r4, #16]
 80048f8:	4650      	mov	r0, sl
 80048fa:	f000 fa9b 	bl	8004e34 <_free_r>
 80048fe:	e7c8      	b.n	8004892 <__ssputs_r+0x46>

08004900 <_svfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	461d      	mov	r5, r3
 8004906:	898b      	ldrh	r3, [r1, #12]
 8004908:	061f      	lsls	r7, r3, #24
 800490a:	b09d      	sub	sp, #116	; 0x74
 800490c:	4680      	mov	r8, r0
 800490e:	460c      	mov	r4, r1
 8004910:	4616      	mov	r6, r2
 8004912:	d50f      	bpl.n	8004934 <_svfiprintf_r+0x34>
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	b96b      	cbnz	r3, 8004934 <_svfiprintf_r+0x34>
 8004918:	2140      	movs	r1, #64	; 0x40
 800491a:	f000 fad9 	bl	8004ed0 <_malloc_r>
 800491e:	6020      	str	r0, [r4, #0]
 8004920:	6120      	str	r0, [r4, #16]
 8004922:	b928      	cbnz	r0, 8004930 <_svfiprintf_r+0x30>
 8004924:	230c      	movs	r3, #12
 8004926:	f8c8 3000 	str.w	r3, [r8]
 800492a:	f04f 30ff 	mov.w	r0, #4294967295
 800492e:	e0c8      	b.n	8004ac2 <_svfiprintf_r+0x1c2>
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	6163      	str	r3, [r4, #20]
 8004934:	2300      	movs	r3, #0
 8004936:	9309      	str	r3, [sp, #36]	; 0x24
 8004938:	2320      	movs	r3, #32
 800493a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493e:	2330      	movs	r3, #48	; 0x30
 8004940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004944:	9503      	str	r5, [sp, #12]
 8004946:	f04f 0b01 	mov.w	fp, #1
 800494a:	4637      	mov	r7, r6
 800494c:	463d      	mov	r5, r7
 800494e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004952:	b10b      	cbz	r3, 8004958 <_svfiprintf_r+0x58>
 8004954:	2b25      	cmp	r3, #37	; 0x25
 8004956:	d13e      	bne.n	80049d6 <_svfiprintf_r+0xd6>
 8004958:	ebb7 0a06 	subs.w	sl, r7, r6
 800495c:	d00b      	beq.n	8004976 <_svfiprintf_r+0x76>
 800495e:	4653      	mov	r3, sl
 8004960:	4632      	mov	r2, r6
 8004962:	4621      	mov	r1, r4
 8004964:	4640      	mov	r0, r8
 8004966:	f7ff ff71 	bl	800484c <__ssputs_r>
 800496a:	3001      	adds	r0, #1
 800496c:	f000 80a4 	beq.w	8004ab8 <_svfiprintf_r+0x1b8>
 8004970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004972:	4453      	add	r3, sl
 8004974:	9309      	str	r3, [sp, #36]	; 0x24
 8004976:	783b      	ldrb	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 809d 	beq.w	8004ab8 <_svfiprintf_r+0x1b8>
 800497e:	2300      	movs	r3, #0
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	9307      	str	r3, [sp, #28]
 800498c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004990:	931a      	str	r3, [sp, #104]	; 0x68
 8004992:	462f      	mov	r7, r5
 8004994:	2205      	movs	r2, #5
 8004996:	f817 1b01 	ldrb.w	r1, [r7], #1
 800499a:	4850      	ldr	r0, [pc, #320]	; (8004adc <_svfiprintf_r+0x1dc>)
 800499c:	f7fb fc38 	bl	8000210 <memchr>
 80049a0:	9b04      	ldr	r3, [sp, #16]
 80049a2:	b9d0      	cbnz	r0, 80049da <_svfiprintf_r+0xda>
 80049a4:	06d9      	lsls	r1, r3, #27
 80049a6:	bf44      	itt	mi
 80049a8:	2220      	movmi	r2, #32
 80049aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049ae:	071a      	lsls	r2, r3, #28
 80049b0:	bf44      	itt	mi
 80049b2:	222b      	movmi	r2, #43	; 0x2b
 80049b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049b8:	782a      	ldrb	r2, [r5, #0]
 80049ba:	2a2a      	cmp	r2, #42	; 0x2a
 80049bc:	d015      	beq.n	80049ea <_svfiprintf_r+0xea>
 80049be:	9a07      	ldr	r2, [sp, #28]
 80049c0:	462f      	mov	r7, r5
 80049c2:	2000      	movs	r0, #0
 80049c4:	250a      	movs	r5, #10
 80049c6:	4639      	mov	r1, r7
 80049c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049cc:	3b30      	subs	r3, #48	; 0x30
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	d94d      	bls.n	8004a6e <_svfiprintf_r+0x16e>
 80049d2:	b1b8      	cbz	r0, 8004a04 <_svfiprintf_r+0x104>
 80049d4:	e00f      	b.n	80049f6 <_svfiprintf_r+0xf6>
 80049d6:	462f      	mov	r7, r5
 80049d8:	e7b8      	b.n	800494c <_svfiprintf_r+0x4c>
 80049da:	4a40      	ldr	r2, [pc, #256]	; (8004adc <_svfiprintf_r+0x1dc>)
 80049dc:	1a80      	subs	r0, r0, r2
 80049de:	fa0b f000 	lsl.w	r0, fp, r0
 80049e2:	4318      	orrs	r0, r3
 80049e4:	9004      	str	r0, [sp, #16]
 80049e6:	463d      	mov	r5, r7
 80049e8:	e7d3      	b.n	8004992 <_svfiprintf_r+0x92>
 80049ea:	9a03      	ldr	r2, [sp, #12]
 80049ec:	1d11      	adds	r1, r2, #4
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	9103      	str	r1, [sp, #12]
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	db01      	blt.n	80049fa <_svfiprintf_r+0xfa>
 80049f6:	9207      	str	r2, [sp, #28]
 80049f8:	e004      	b.n	8004a04 <_svfiprintf_r+0x104>
 80049fa:	4252      	negs	r2, r2
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	9207      	str	r2, [sp, #28]
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	783b      	ldrb	r3, [r7, #0]
 8004a06:	2b2e      	cmp	r3, #46	; 0x2e
 8004a08:	d10c      	bne.n	8004a24 <_svfiprintf_r+0x124>
 8004a0a:	787b      	ldrb	r3, [r7, #1]
 8004a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0e:	d133      	bne.n	8004a78 <_svfiprintf_r+0x178>
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	1d1a      	adds	r2, r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	9203      	str	r2, [sp, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bfb8      	it	lt
 8004a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a20:	3702      	adds	r7, #2
 8004a22:	9305      	str	r3, [sp, #20]
 8004a24:	4d2e      	ldr	r5, [pc, #184]	; (8004ae0 <_svfiprintf_r+0x1e0>)
 8004a26:	7839      	ldrb	r1, [r7, #0]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7fb fbf0 	bl	8000210 <memchr>
 8004a30:	b138      	cbz	r0, 8004a42 <_svfiprintf_r+0x142>
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	1b40      	subs	r0, r0, r5
 8004a36:	fa03 f000 	lsl.w	r0, r3, r0
 8004a3a:	9b04      	ldr	r3, [sp, #16]
 8004a3c:	4303      	orrs	r3, r0
 8004a3e:	3701      	adds	r7, #1
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	7839      	ldrb	r1, [r7, #0]
 8004a44:	4827      	ldr	r0, [pc, #156]	; (8004ae4 <_svfiprintf_r+0x1e4>)
 8004a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a4a:	2206      	movs	r2, #6
 8004a4c:	1c7e      	adds	r6, r7, #1
 8004a4e:	f7fb fbdf 	bl	8000210 <memchr>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d038      	beq.n	8004ac8 <_svfiprintf_r+0x1c8>
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <_svfiprintf_r+0x1e8>)
 8004a58:	bb13      	cbnz	r3, 8004aa0 <_svfiprintf_r+0x1a0>
 8004a5a:	9b03      	ldr	r3, [sp, #12]
 8004a5c:	3307      	adds	r3, #7
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	3308      	adds	r3, #8
 8004a64:	9303      	str	r3, [sp, #12]
 8004a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a68:	444b      	add	r3, r9
 8004a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6c:	e76d      	b.n	800494a <_svfiprintf_r+0x4a>
 8004a6e:	fb05 3202 	mla	r2, r5, r2, r3
 8004a72:	2001      	movs	r0, #1
 8004a74:	460f      	mov	r7, r1
 8004a76:	e7a6      	b.n	80049c6 <_svfiprintf_r+0xc6>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	3701      	adds	r7, #1
 8004a7c:	9305      	str	r3, [sp, #20]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	250a      	movs	r5, #10
 8004a82:	4638      	mov	r0, r7
 8004a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a88:	3a30      	subs	r2, #48	; 0x30
 8004a8a:	2a09      	cmp	r2, #9
 8004a8c:	d903      	bls.n	8004a96 <_svfiprintf_r+0x196>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0c8      	beq.n	8004a24 <_svfiprintf_r+0x124>
 8004a92:	9105      	str	r1, [sp, #20]
 8004a94:	e7c6      	b.n	8004a24 <_svfiprintf_r+0x124>
 8004a96:	fb05 2101 	mla	r1, r5, r1, r2
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	e7f0      	b.n	8004a82 <_svfiprintf_r+0x182>
 8004aa0:	ab03      	add	r3, sp, #12
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <_svfiprintf_r+0x1ec>)
 8004aa8:	a904      	add	r1, sp, #16
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f3af 8000 	nop.w
 8004ab0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	d1d6      	bne.n	8004a66 <_svfiprintf_r+0x166>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	065b      	lsls	r3, r3, #25
 8004abc:	f53f af35 	bmi.w	800492a <_svfiprintf_r+0x2a>
 8004ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ac2:	b01d      	add	sp, #116	; 0x74
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac8:	ab03      	add	r3, sp, #12
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4622      	mov	r2, r4
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <_svfiprintf_r+0x1ec>)
 8004ad0:	a904      	add	r1, sp, #16
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	f000 f882 	bl	8004bdc <_printf_i>
 8004ad8:	e7ea      	b.n	8004ab0 <_svfiprintf_r+0x1b0>
 8004ada:	bf00      	nop
 8004adc:	080060a8 	.word	0x080060a8
 8004ae0:	080060ae 	.word	0x080060ae
 8004ae4:	080060b2 	.word	0x080060b2
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	0800484d 	.word	0x0800484d

08004af0 <_printf_common>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4691      	mov	r9, r2
 8004af6:	461f      	mov	r7, r3
 8004af8:	688a      	ldr	r2, [r1, #8]
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	bfb8      	it	lt
 8004b04:	4613      	movlt	r3, r2
 8004b06:	f8c9 3000 	str.w	r3, [r9]
 8004b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460c      	mov	r4, r1
 8004b12:	b112      	cbz	r2, 8004b1a <_printf_common+0x2a>
 8004b14:	3301      	adds	r3, #1
 8004b16:	f8c9 3000 	str.w	r3, [r9]
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	0699      	lsls	r1, r3, #26
 8004b1e:	bf42      	ittt	mi
 8004b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b24:	3302      	addmi	r3, #2
 8004b26:	f8c9 3000 	strmi.w	r3, [r9]
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	f015 0506 	ands.w	r5, r5, #6
 8004b30:	d107      	bne.n	8004b42 <_printf_common+0x52>
 8004b32:	f104 0a19 	add.w	sl, r4, #25
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	f8d9 2000 	ldr.w	r2, [r9]
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	42ab      	cmp	r3, r5
 8004b40:	dc28      	bgt.n	8004b94 <_printf_common+0xa4>
 8004b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	3300      	adds	r3, #0
 8004b4a:	bf18      	it	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	0692      	lsls	r2, r2, #26
 8004b50:	d42d      	bmi.n	8004bae <_printf_common+0xbe>
 8004b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b56:	4639      	mov	r1, r7
 8004b58:	4630      	mov	r0, r6
 8004b5a:	47c0      	blx	r8
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d020      	beq.n	8004ba2 <_printf_common+0xb2>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	68e5      	ldr	r5, [r4, #12]
 8004b64:	f8d9 2000 	ldr.w	r2, [r9]
 8004b68:	f003 0306 	and.w	r3, r3, #6
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	bf08      	it	eq
 8004b70:	1aad      	subeq	r5, r5, r2
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	6922      	ldr	r2, [r4, #16]
 8004b76:	bf0c      	ite	eq
 8004b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b7c:	2500      	movne	r5, #0
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	bfc4      	itt	gt
 8004b82:	1a9b      	subgt	r3, r3, r2
 8004b84:	18ed      	addgt	r5, r5, r3
 8004b86:	f04f 0900 	mov.w	r9, #0
 8004b8a:	341a      	adds	r4, #26
 8004b8c:	454d      	cmp	r5, r9
 8004b8e:	d11a      	bne.n	8004bc6 <_printf_common+0xd6>
 8004b90:	2000      	movs	r0, #0
 8004b92:	e008      	b.n	8004ba6 <_printf_common+0xb6>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4652      	mov	r2, sl
 8004b98:	4639      	mov	r1, r7
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d103      	bne.n	8004baa <_printf_common+0xba>
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004baa:	3501      	adds	r5, #1
 8004bac:	e7c3      	b.n	8004b36 <_printf_common+0x46>
 8004bae:	18e1      	adds	r1, r4, r3
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	2030      	movs	r0, #48	; 0x30
 8004bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb8:	4422      	add	r2, r4
 8004bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	e7c5      	b.n	8004b52 <_printf_common+0x62>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4639      	mov	r1, r7
 8004bcc:	4630      	mov	r0, r6
 8004bce:	47c0      	blx	r8
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d0e6      	beq.n	8004ba2 <_printf_common+0xb2>
 8004bd4:	f109 0901 	add.w	r9, r9, #1
 8004bd8:	e7d8      	b.n	8004b8c <_printf_common+0x9c>
	...

08004bdc <_printf_i>:
 8004bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004be0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004be4:	460c      	mov	r4, r1
 8004be6:	7e09      	ldrb	r1, [r1, #24]
 8004be8:	b085      	sub	sp, #20
 8004bea:	296e      	cmp	r1, #110	; 0x6e
 8004bec:	4617      	mov	r7, r2
 8004bee:	4606      	mov	r6, r0
 8004bf0:	4698      	mov	r8, r3
 8004bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf4:	f000 80b3 	beq.w	8004d5e <_printf_i+0x182>
 8004bf8:	d822      	bhi.n	8004c40 <_printf_i+0x64>
 8004bfa:	2963      	cmp	r1, #99	; 0x63
 8004bfc:	d036      	beq.n	8004c6c <_printf_i+0x90>
 8004bfe:	d80a      	bhi.n	8004c16 <_printf_i+0x3a>
 8004c00:	2900      	cmp	r1, #0
 8004c02:	f000 80b9 	beq.w	8004d78 <_printf_i+0x19c>
 8004c06:	2958      	cmp	r1, #88	; 0x58
 8004c08:	f000 8083 	beq.w	8004d12 <_printf_i+0x136>
 8004c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c14:	e032      	b.n	8004c7c <_printf_i+0xa0>
 8004c16:	2964      	cmp	r1, #100	; 0x64
 8004c18:	d001      	beq.n	8004c1e <_printf_i+0x42>
 8004c1a:	2969      	cmp	r1, #105	; 0x69
 8004c1c:	d1f6      	bne.n	8004c0c <_printf_i+0x30>
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	6813      	ldr	r3, [r2, #0]
 8004c22:	0605      	lsls	r5, r0, #24
 8004c24:	f103 0104 	add.w	r1, r3, #4
 8004c28:	d52a      	bpl.n	8004c80 <_printf_i+0xa4>
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6011      	str	r1, [r2, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da03      	bge.n	8004c3a <_printf_i+0x5e>
 8004c32:	222d      	movs	r2, #45	; 0x2d
 8004c34:	425b      	negs	r3, r3
 8004c36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c3a:	486f      	ldr	r0, [pc, #444]	; (8004df8 <_printf_i+0x21c>)
 8004c3c:	220a      	movs	r2, #10
 8004c3e:	e039      	b.n	8004cb4 <_printf_i+0xd8>
 8004c40:	2973      	cmp	r1, #115	; 0x73
 8004c42:	f000 809d 	beq.w	8004d80 <_printf_i+0x1a4>
 8004c46:	d808      	bhi.n	8004c5a <_printf_i+0x7e>
 8004c48:	296f      	cmp	r1, #111	; 0x6f
 8004c4a:	d020      	beq.n	8004c8e <_printf_i+0xb2>
 8004c4c:	2970      	cmp	r1, #112	; 0x70
 8004c4e:	d1dd      	bne.n	8004c0c <_printf_i+0x30>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	f043 0320 	orr.w	r3, r3, #32
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	e003      	b.n	8004c62 <_printf_i+0x86>
 8004c5a:	2975      	cmp	r1, #117	; 0x75
 8004c5c:	d017      	beq.n	8004c8e <_printf_i+0xb2>
 8004c5e:	2978      	cmp	r1, #120	; 0x78
 8004c60:	d1d4      	bne.n	8004c0c <_printf_i+0x30>
 8004c62:	2378      	movs	r3, #120	; 0x78
 8004c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c68:	4864      	ldr	r0, [pc, #400]	; (8004dfc <_printf_i+0x220>)
 8004c6a:	e055      	b.n	8004d18 <_printf_i+0x13c>
 8004c6c:	6813      	ldr	r3, [r2, #0]
 8004c6e:	1d19      	adds	r1, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6011      	str	r1, [r2, #0]
 8004c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e08c      	b.n	8004d9a <_printf_i+0x1be>
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6011      	str	r1, [r2, #0]
 8004c84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c88:	bf18      	it	ne
 8004c8a:	b21b      	sxthne	r3, r3
 8004c8c:	e7cf      	b.n	8004c2e <_printf_i+0x52>
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	6825      	ldr	r5, [r4, #0]
 8004c92:	1d18      	adds	r0, r3, #4
 8004c94:	6010      	str	r0, [r2, #0]
 8004c96:	0628      	lsls	r0, r5, #24
 8004c98:	d501      	bpl.n	8004c9e <_printf_i+0xc2>
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <_printf_i+0xc8>
 8004c9e:	0668      	lsls	r0, r5, #25
 8004ca0:	d5fb      	bpl.n	8004c9a <_printf_i+0xbe>
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	4854      	ldr	r0, [pc, #336]	; (8004df8 <_printf_i+0x21c>)
 8004ca6:	296f      	cmp	r1, #111	; 0x6f
 8004ca8:	bf14      	ite	ne
 8004caa:	220a      	movne	r2, #10
 8004cac:	2208      	moveq	r2, #8
 8004cae:	2100      	movs	r1, #0
 8004cb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb4:	6865      	ldr	r5, [r4, #4]
 8004cb6:	60a5      	str	r5, [r4, #8]
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	f2c0 8095 	blt.w	8004de8 <_printf_i+0x20c>
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	f021 0104 	bic.w	r1, r1, #4
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d13d      	bne.n	8004d46 <_printf_i+0x16a>
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	f040 808e 	bne.w	8004dec <_printf_i+0x210>
 8004cd0:	4665      	mov	r5, ip
 8004cd2:	2a08      	cmp	r2, #8
 8004cd4:	d10b      	bne.n	8004cee <_printf_i+0x112>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	07db      	lsls	r3, r3, #31
 8004cda:	d508      	bpl.n	8004cee <_printf_i+0x112>
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	bfde      	ittt	le
 8004ce4:	2330      	movle	r3, #48	; 0x30
 8004ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cee:	ebac 0305 	sub.w	r3, ip, r5
 8004cf2:	6123      	str	r3, [r4, #16]
 8004cf4:	f8cd 8000 	str.w	r8, [sp]
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	aa03      	add	r2, sp, #12
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f7ff fef6 	bl	8004af0 <_printf_common>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d14d      	bne.n	8004da4 <_printf_i+0x1c8>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	b005      	add	sp, #20
 8004d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d12:	4839      	ldr	r0, [pc, #228]	; (8004df8 <_printf_i+0x21c>)
 8004d14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	6821      	ldr	r1, [r4, #0]
 8004d1c:	1d1d      	adds	r5, r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6015      	str	r5, [r2, #0]
 8004d22:	060a      	lsls	r2, r1, #24
 8004d24:	d50b      	bpl.n	8004d3e <_printf_i+0x162>
 8004d26:	07ca      	lsls	r2, r1, #31
 8004d28:	bf44      	itt	mi
 8004d2a:	f041 0120 	orrmi.w	r1, r1, #32
 8004d2e:	6021      	strmi	r1, [r4, #0]
 8004d30:	b91b      	cbnz	r3, 8004d3a <_printf_i+0x15e>
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	f022 0220 	bic.w	r2, r2, #32
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	e7b7      	b.n	8004cae <_printf_i+0xd2>
 8004d3e:	064d      	lsls	r5, r1, #25
 8004d40:	bf48      	it	mi
 8004d42:	b29b      	uxthmi	r3, r3
 8004d44:	e7ef      	b.n	8004d26 <_printf_i+0x14a>
 8004d46:	4665      	mov	r5, ip
 8004d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d4c:	fb02 3311 	mls	r3, r2, r1, r3
 8004d50:	5cc3      	ldrb	r3, [r0, r3]
 8004d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d56:	460b      	mov	r3, r1
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d1f5      	bne.n	8004d48 <_printf_i+0x16c>
 8004d5c:	e7b9      	b.n	8004cd2 <_printf_i+0xf6>
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	6825      	ldr	r5, [r4, #0]
 8004d62:	6961      	ldr	r1, [r4, #20]
 8004d64:	1d18      	adds	r0, r3, #4
 8004d66:	6010      	str	r0, [r2, #0]
 8004d68:	0628      	lsls	r0, r5, #24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	d501      	bpl.n	8004d72 <_printf_i+0x196>
 8004d6e:	6019      	str	r1, [r3, #0]
 8004d70:	e002      	b.n	8004d78 <_printf_i+0x19c>
 8004d72:	066a      	lsls	r2, r5, #25
 8004d74:	d5fb      	bpl.n	8004d6e <_printf_i+0x192>
 8004d76:	8019      	strh	r1, [r3, #0]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	4665      	mov	r5, ip
 8004d7e:	e7b9      	b.n	8004cf4 <_printf_i+0x118>
 8004d80:	6813      	ldr	r3, [r2, #0]
 8004d82:	1d19      	adds	r1, r3, #4
 8004d84:	6011      	str	r1, [r2, #0]
 8004d86:	681d      	ldr	r5, [r3, #0]
 8004d88:	6862      	ldr	r2, [r4, #4]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f7fb fa3f 	bl	8000210 <memchr>
 8004d92:	b108      	cbz	r0, 8004d98 <_printf_i+0x1bc>
 8004d94:	1b40      	subs	r0, r0, r5
 8004d96:	6060      	str	r0, [r4, #4]
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da2:	e7a7      	b.n	8004cf4 <_printf_i+0x118>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	462a      	mov	r2, r5
 8004da8:	4639      	mov	r1, r7
 8004daa:	4630      	mov	r0, r6
 8004dac:	47c0      	blx	r8
 8004dae:	3001      	adds	r0, #1
 8004db0:	d0aa      	beq.n	8004d08 <_printf_i+0x12c>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	079b      	lsls	r3, r3, #30
 8004db6:	d413      	bmi.n	8004de0 <_printf_i+0x204>
 8004db8:	68e0      	ldr	r0, [r4, #12]
 8004dba:	9b03      	ldr	r3, [sp, #12]
 8004dbc:	4298      	cmp	r0, r3
 8004dbe:	bfb8      	it	lt
 8004dc0:	4618      	movlt	r0, r3
 8004dc2:	e7a3      	b.n	8004d0c <_printf_i+0x130>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	464a      	mov	r2, r9
 8004dc8:	4639      	mov	r1, r7
 8004dca:	4630      	mov	r0, r6
 8004dcc:	47c0      	blx	r8
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d09a      	beq.n	8004d08 <_printf_i+0x12c>
 8004dd2:	3501      	adds	r5, #1
 8004dd4:	68e3      	ldr	r3, [r4, #12]
 8004dd6:	9a03      	ldr	r2, [sp, #12]
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	42ab      	cmp	r3, r5
 8004ddc:	dcf2      	bgt.n	8004dc4 <_printf_i+0x1e8>
 8004dde:	e7eb      	b.n	8004db8 <_printf_i+0x1dc>
 8004de0:	2500      	movs	r5, #0
 8004de2:	f104 0919 	add.w	r9, r4, #25
 8004de6:	e7f5      	b.n	8004dd4 <_printf_i+0x1f8>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ac      	bne.n	8004d46 <_printf_i+0x16a>
 8004dec:	7803      	ldrb	r3, [r0, #0]
 8004dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df6:	e76c      	b.n	8004cd2 <_printf_i+0xf6>
 8004df8:	080060b9 	.word	0x080060b9
 8004dfc:	080060ca 	.word	0x080060ca

08004e00 <memmove>:
 8004e00:	4288      	cmp	r0, r1
 8004e02:	b510      	push	{r4, lr}
 8004e04:	eb01 0302 	add.w	r3, r1, r2
 8004e08:	d807      	bhi.n	8004e1a <memmove+0x1a>
 8004e0a:	1e42      	subs	r2, r0, #1
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	d00a      	beq.n	8004e26 <memmove+0x26>
 8004e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e18:	e7f8      	b.n	8004e0c <memmove+0xc>
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	d9f5      	bls.n	8004e0a <memmove+0xa>
 8004e1e:	1881      	adds	r1, r0, r2
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	42d3      	cmn	r3, r2
 8004e24:	d100      	bne.n	8004e28 <memmove+0x28>
 8004e26:	bd10      	pop	{r4, pc}
 8004e28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e30:	e7f7      	b.n	8004e22 <memmove+0x22>
	...

08004e34 <_free_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4605      	mov	r5, r0
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	d045      	beq.n	8004ec8 <_free_r+0x94>
 8004e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e40:	1f0c      	subs	r4, r1, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bfb8      	it	lt
 8004e46:	18e4      	addlt	r4, r4, r3
 8004e48:	f000 f8d2 	bl	8004ff0 <__malloc_lock>
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <_free_r+0x98>)
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	4610      	mov	r0, r2
 8004e52:	b933      	cbnz	r3, 8004e62 <_free_r+0x2e>
 8004e54:	6063      	str	r3, [r4, #4]
 8004e56:	6014      	str	r4, [r2, #0]
 8004e58:	4628      	mov	r0, r5
 8004e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e5e:	f000 b8c8 	b.w	8004ff2 <__malloc_unlock>
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	d90c      	bls.n	8004e80 <_free_r+0x4c>
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	1862      	adds	r2, r4, r1
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bf04      	itt	eq
 8004e6e:	681a      	ldreq	r2, [r3, #0]
 8004e70:	685b      	ldreq	r3, [r3, #4]
 8004e72:	6063      	str	r3, [r4, #4]
 8004e74:	bf04      	itt	eq
 8004e76:	1852      	addeq	r2, r2, r1
 8004e78:	6022      	streq	r2, [r4, #0]
 8004e7a:	6004      	str	r4, [r0, #0]
 8004e7c:	e7ec      	b.n	8004e58 <_free_r+0x24>
 8004e7e:	4613      	mov	r3, r2
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	b10a      	cbz	r2, 8004e88 <_free_r+0x54>
 8004e84:	42a2      	cmp	r2, r4
 8004e86:	d9fa      	bls.n	8004e7e <_free_r+0x4a>
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	1858      	adds	r0, r3, r1
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d10b      	bne.n	8004ea8 <_free_r+0x74>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	4401      	add	r1, r0
 8004e94:	1858      	adds	r0, r3, r1
 8004e96:	4282      	cmp	r2, r0
 8004e98:	6019      	str	r1, [r3, #0]
 8004e9a:	d1dd      	bne.n	8004e58 <_free_r+0x24>
 8004e9c:	6810      	ldr	r0, [r2, #0]
 8004e9e:	6852      	ldr	r2, [r2, #4]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	4401      	add	r1, r0
 8004ea4:	6019      	str	r1, [r3, #0]
 8004ea6:	e7d7      	b.n	8004e58 <_free_r+0x24>
 8004ea8:	d902      	bls.n	8004eb0 <_free_r+0x7c>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	e7d3      	b.n	8004e58 <_free_r+0x24>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	1821      	adds	r1, r4, r0
 8004eb4:	428a      	cmp	r2, r1
 8004eb6:	bf04      	itt	eq
 8004eb8:	6811      	ldreq	r1, [r2, #0]
 8004eba:	6852      	ldreq	r2, [r2, #4]
 8004ebc:	6062      	str	r2, [r4, #4]
 8004ebe:	bf04      	itt	eq
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	605c      	str	r4, [r3, #4]
 8004ec6:	e7c7      	b.n	8004e58 <_free_r+0x24>
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
 8004eca:	bf00      	nop
 8004ecc:	200002a8 	.word	0x200002a8

08004ed0 <_malloc_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	1ccd      	adds	r5, r1, #3
 8004ed4:	f025 0503 	bic.w	r5, r5, #3
 8004ed8:	3508      	adds	r5, #8
 8004eda:	2d0c      	cmp	r5, #12
 8004edc:	bf38      	it	cc
 8004ede:	250c      	movcc	r5, #12
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	db01      	blt.n	8004eea <_malloc_r+0x1a>
 8004ee6:	42a9      	cmp	r1, r5
 8004ee8:	d903      	bls.n	8004ef2 <_malloc_r+0x22>
 8004eea:	230c      	movs	r3, #12
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	2000      	movs	r0, #0
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
 8004ef2:	f000 f87d 	bl	8004ff0 <__malloc_lock>
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <_malloc_r+0xac>)
 8004ef8:	6814      	ldr	r4, [r2, #0]
 8004efa:	4621      	mov	r1, r4
 8004efc:	b991      	cbnz	r1, 8004f24 <_malloc_r+0x54>
 8004efe:	4c20      	ldr	r4, [pc, #128]	; (8004f80 <_malloc_r+0xb0>)
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	b91b      	cbnz	r3, 8004f0c <_malloc_r+0x3c>
 8004f04:	4630      	mov	r0, r6
 8004f06:	f000 f863 	bl	8004fd0 <_sbrk_r>
 8004f0a:	6020      	str	r0, [r4, #0]
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f000 f85e 	bl	8004fd0 <_sbrk_r>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d124      	bne.n	8004f62 <_malloc_r+0x92>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	6033      	str	r3, [r6, #0]
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f868 	bl	8004ff2 <__malloc_unlock>
 8004f22:	e7e4      	b.n	8004eee <_malloc_r+0x1e>
 8004f24:	680b      	ldr	r3, [r1, #0]
 8004f26:	1b5b      	subs	r3, r3, r5
 8004f28:	d418      	bmi.n	8004f5c <_malloc_r+0x8c>
 8004f2a:	2b0b      	cmp	r3, #11
 8004f2c:	d90f      	bls.n	8004f4e <_malloc_r+0x7e>
 8004f2e:	600b      	str	r3, [r1, #0]
 8004f30:	50cd      	str	r5, [r1, r3]
 8004f32:	18cc      	adds	r4, r1, r3
 8004f34:	4630      	mov	r0, r6
 8004f36:	f000 f85c 	bl	8004ff2 <__malloc_unlock>
 8004f3a:	f104 000b 	add.w	r0, r4, #11
 8004f3e:	1d23      	adds	r3, r4, #4
 8004f40:	f020 0007 	bic.w	r0, r0, #7
 8004f44:	1ac3      	subs	r3, r0, r3
 8004f46:	d0d3      	beq.n	8004ef0 <_malloc_r+0x20>
 8004f48:	425a      	negs	r2, r3
 8004f4a:	50e2      	str	r2, [r4, r3]
 8004f4c:	e7d0      	b.n	8004ef0 <_malloc_r+0x20>
 8004f4e:	428c      	cmp	r4, r1
 8004f50:	684b      	ldr	r3, [r1, #4]
 8004f52:	bf16      	itet	ne
 8004f54:	6063      	strne	r3, [r4, #4]
 8004f56:	6013      	streq	r3, [r2, #0]
 8004f58:	460c      	movne	r4, r1
 8004f5a:	e7eb      	b.n	8004f34 <_malloc_r+0x64>
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	6849      	ldr	r1, [r1, #4]
 8004f60:	e7cc      	b.n	8004efc <_malloc_r+0x2c>
 8004f62:	1cc4      	adds	r4, r0, #3
 8004f64:	f024 0403 	bic.w	r4, r4, #3
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d005      	beq.n	8004f78 <_malloc_r+0xa8>
 8004f6c:	1a21      	subs	r1, r4, r0
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f000 f82e 	bl	8004fd0 <_sbrk_r>
 8004f74:	3001      	adds	r0, #1
 8004f76:	d0cf      	beq.n	8004f18 <_malloc_r+0x48>
 8004f78:	6025      	str	r5, [r4, #0]
 8004f7a:	e7db      	b.n	8004f34 <_malloc_r+0x64>
 8004f7c:	200002a8 	.word	0x200002a8
 8004f80:	200002ac 	.word	0x200002ac

08004f84 <_realloc_r>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	4607      	mov	r7, r0
 8004f88:	4614      	mov	r4, r2
 8004f8a:	460e      	mov	r6, r1
 8004f8c:	b921      	cbnz	r1, 8004f98 <_realloc_r+0x14>
 8004f8e:	4611      	mov	r1, r2
 8004f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f94:	f7ff bf9c 	b.w	8004ed0 <_malloc_r>
 8004f98:	b922      	cbnz	r2, 8004fa4 <_realloc_r+0x20>
 8004f9a:	f7ff ff4b 	bl	8004e34 <_free_r>
 8004f9e:	4625      	mov	r5, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa4:	f000 f826 	bl	8004ff4 <_malloc_usable_size_r>
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	d20f      	bcs.n	8004fcc <_realloc_r+0x48>
 8004fac:	4621      	mov	r1, r4
 8004fae:	4638      	mov	r0, r7
 8004fb0:	f7ff ff8e 	bl	8004ed0 <_malloc_r>
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0f2      	beq.n	8004fa0 <_realloc_r+0x1c>
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	f7ff fc11 	bl	80047e4 <memcpy>
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f7ff ff35 	bl	8004e34 <_free_r>
 8004fca:	e7e9      	b.n	8004fa0 <_realloc_r+0x1c>
 8004fcc:	4635      	mov	r5, r6
 8004fce:	e7e7      	b.n	8004fa0 <_realloc_r+0x1c>

08004fd0 <_sbrk_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4c06      	ldr	r4, [pc, #24]	; (8004fec <_sbrk_r+0x1c>)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	f7fc fde4 	bl	8001ba8 <_sbrk>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_sbrk_r+0x1a>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_sbrk_r+0x1a>
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	20014ddc 	.word	0x20014ddc

08004ff0 <__malloc_lock>:
 8004ff0:	4770      	bx	lr

08004ff2 <__malloc_unlock>:
 8004ff2:	4770      	bx	lr

08004ff4 <_malloc_usable_size_r>:
 8004ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff8:	1f18      	subs	r0, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bfbc      	itt	lt
 8004ffe:	580b      	ldrlt	r3, [r1, r0]
 8005000:	18c0      	addlt	r0, r0, r3
 8005002:	4770      	bx	lr
 8005004:	0000      	movs	r0, r0
	...

08005008 <sin>:
 8005008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800500a:	ec51 0b10 	vmov	r0, r1, d0
 800500e:	4a20      	ldr	r2, [pc, #128]	; (8005090 <sin+0x88>)
 8005010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005014:	4293      	cmp	r3, r2
 8005016:	dc07      	bgt.n	8005028 <sin+0x20>
 8005018:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005088 <sin+0x80>
 800501c:	2000      	movs	r0, #0
 800501e:	f000 fe37 	bl	8005c90 <__kernel_sin>
 8005022:	ec51 0b10 	vmov	r0, r1, d0
 8005026:	e007      	b.n	8005038 <sin+0x30>
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <sin+0x8c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	dd09      	ble.n	8005042 <sin+0x3a>
 800502e:	ee10 2a10 	vmov	r2, s0
 8005032:	460b      	mov	r3, r1
 8005034:	f7fb f940 	bl	80002b8 <__aeabi_dsub>
 8005038:	ec41 0b10 	vmov	d0, r0, r1
 800503c:	b005      	add	sp, #20
 800503e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005042:	4668      	mov	r0, sp
 8005044:	f000 f828 	bl	8005098 <__ieee754_rem_pio2>
 8005048:	f000 0003 	and.w	r0, r0, #3
 800504c:	2801      	cmp	r0, #1
 800504e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005052:	ed9d 0b00 	vldr	d0, [sp]
 8005056:	d004      	beq.n	8005062 <sin+0x5a>
 8005058:	2802      	cmp	r0, #2
 800505a:	d005      	beq.n	8005068 <sin+0x60>
 800505c:	b970      	cbnz	r0, 800507c <sin+0x74>
 800505e:	2001      	movs	r0, #1
 8005060:	e7dd      	b.n	800501e <sin+0x16>
 8005062:	f000 fa0d 	bl	8005480 <__kernel_cos>
 8005066:	e7dc      	b.n	8005022 <sin+0x1a>
 8005068:	2001      	movs	r0, #1
 800506a:	f000 fe11 	bl	8005c90 <__kernel_sin>
 800506e:	ec53 2b10 	vmov	r2, r3, d0
 8005072:	ee10 0a10 	vmov	r0, s0
 8005076:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800507a:	e7dd      	b.n	8005038 <sin+0x30>
 800507c:	f000 fa00 	bl	8005480 <__kernel_cos>
 8005080:	e7f5      	b.n	800506e <sin+0x66>
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
	...
 8005090:	3fe921fb 	.word	0x3fe921fb
 8005094:	7fefffff 	.word	0x7fefffff

08005098 <__ieee754_rem_pio2>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	ec57 6b10 	vmov	r6, r7, d0
 80050a0:	4bc3      	ldr	r3, [pc, #780]	; (80053b0 <__ieee754_rem_pio2+0x318>)
 80050a2:	b08d      	sub	sp, #52	; 0x34
 80050a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80050a8:	4598      	cmp	r8, r3
 80050aa:	4604      	mov	r4, r0
 80050ac:	9704      	str	r7, [sp, #16]
 80050ae:	dc07      	bgt.n	80050c0 <__ieee754_rem_pio2+0x28>
 80050b0:	2200      	movs	r2, #0
 80050b2:	2300      	movs	r3, #0
 80050b4:	ed84 0b00 	vstr	d0, [r4]
 80050b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80050bc:	2500      	movs	r5, #0
 80050be:	e027      	b.n	8005110 <__ieee754_rem_pio2+0x78>
 80050c0:	4bbc      	ldr	r3, [pc, #752]	; (80053b4 <__ieee754_rem_pio2+0x31c>)
 80050c2:	4598      	cmp	r8, r3
 80050c4:	dc75      	bgt.n	80051b2 <__ieee754_rem_pio2+0x11a>
 80050c6:	9b04      	ldr	r3, [sp, #16]
 80050c8:	4dbb      	ldr	r5, [pc, #748]	; (80053b8 <__ieee754_rem_pio2+0x320>)
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	ee10 0a10 	vmov	r0, s0
 80050d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005378 <__ieee754_rem_pio2+0x2e0>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	4639      	mov	r1, r7
 80050d8:	dd36      	ble.n	8005148 <__ieee754_rem_pio2+0xb0>
 80050da:	f7fb f8ed 	bl	80002b8 <__aeabi_dsub>
 80050de:	45a8      	cmp	r8, r5
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
 80050e4:	d018      	beq.n	8005118 <__ieee754_rem_pio2+0x80>
 80050e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005380 <__ieee754_rem_pio2+0x2e8>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f7fb f8e4 	bl	80002b8 <__aeabi_dsub>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	e9c4 2300 	strd	r2, r3, [r4]
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb f8dc 	bl	80002b8 <__aeabi_dsub>
 8005100:	a39f      	add	r3, pc, #636	; (adr r3, 8005380 <__ieee754_rem_pio2+0x2e8>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb f8d7 	bl	80002b8 <__aeabi_dsub>
 800510a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800510e:	2501      	movs	r5, #1
 8005110:	4628      	mov	r0, r5
 8005112:	b00d      	add	sp, #52	; 0x34
 8005114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005118:	a39b      	add	r3, pc, #620	; (adr r3, 8005388 <__ieee754_rem_pio2+0x2f0>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f7fb f8cb 	bl	80002b8 <__aeabi_dsub>
 8005122:	a39b      	add	r3, pc, #620	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2f8>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	4606      	mov	r6, r0
 800512a:	460f      	mov	r7, r1
 800512c:	f7fb f8c4 	bl	80002b8 <__aeabi_dsub>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	e9c4 2300 	strd	r2, r3, [r4]
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb f8bc 	bl	80002b8 <__aeabi_dsub>
 8005140:	a393      	add	r3, pc, #588	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2f8>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	e7de      	b.n	8005106 <__ieee754_rem_pio2+0x6e>
 8005148:	f7fb f8b8 	bl	80002bc <__adddf3>
 800514c:	45a8      	cmp	r8, r5
 800514e:	4606      	mov	r6, r0
 8005150:	460f      	mov	r7, r1
 8005152:	d016      	beq.n	8005182 <__ieee754_rem_pio2+0xea>
 8005154:	a38a      	add	r3, pc, #552	; (adr r3, 8005380 <__ieee754_rem_pio2+0x2e8>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f8af 	bl	80002bc <__adddf3>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	e9c4 2300 	strd	r2, r3, [r4]
 8005166:	4630      	mov	r0, r6
 8005168:	4639      	mov	r1, r7
 800516a:	f7fb f8a5 	bl	80002b8 <__aeabi_dsub>
 800516e:	a384      	add	r3, pc, #528	; (adr r3, 8005380 <__ieee754_rem_pio2+0x2e8>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fb f8a2 	bl	80002bc <__adddf3>
 8005178:	f04f 35ff 	mov.w	r5, #4294967295
 800517c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005180:	e7c6      	b.n	8005110 <__ieee754_rem_pio2+0x78>
 8005182:	a381      	add	r3, pc, #516	; (adr r3, 8005388 <__ieee754_rem_pio2+0x2f0>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb f898 	bl	80002bc <__adddf3>
 800518c:	a380      	add	r3, pc, #512	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2f8>)
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	4606      	mov	r6, r0
 8005194:	460f      	mov	r7, r1
 8005196:	f7fb f891 	bl	80002bc <__adddf3>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	e9c4 2300 	strd	r2, r3, [r4]
 80051a2:	4630      	mov	r0, r6
 80051a4:	4639      	mov	r1, r7
 80051a6:	f7fb f887 	bl	80002b8 <__aeabi_dsub>
 80051aa:	a379      	add	r3, pc, #484	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2f8>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	e7e0      	b.n	8005174 <__ieee754_rem_pio2+0xdc>
 80051b2:	4b82      	ldr	r3, [pc, #520]	; (80053bc <__ieee754_rem_pio2+0x324>)
 80051b4:	4598      	cmp	r8, r3
 80051b6:	f300 80d0 	bgt.w	800535a <__ieee754_rem_pio2+0x2c2>
 80051ba:	f000 fe23 	bl	8005e04 <fabs>
 80051be:	ec57 6b10 	vmov	r6, r7, d0
 80051c2:	ee10 0a10 	vmov	r0, s0
 80051c6:	a374      	add	r3, pc, #464	; (adr r3, 8005398 <__ieee754_rem_pio2+0x300>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	4639      	mov	r1, r7
 80051ce:	f7fb fa2b 	bl	8000628 <__aeabi_dmul>
 80051d2:	2200      	movs	r2, #0
 80051d4:	4b7a      	ldr	r3, [pc, #488]	; (80053c0 <__ieee754_rem_pio2+0x328>)
 80051d6:	f7fb f871 	bl	80002bc <__adddf3>
 80051da:	f7fb fcbf 	bl	8000b5c <__aeabi_d2iz>
 80051de:	4605      	mov	r5, r0
 80051e0:	f7fb f9b8 	bl	8000554 <__aeabi_i2d>
 80051e4:	a364      	add	r3, pc, #400	; (adr r3, 8005378 <__ieee754_rem_pio2+0x2e0>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ee:	f7fb fa1b 	bl	8000628 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb f85d 	bl	80002b8 <__aeabi_dsub>
 80051fe:	a360      	add	r3, pc, #384	; (adr r3, 8005380 <__ieee754_rem_pio2+0x2e8>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	4682      	mov	sl, r0
 8005206:	468b      	mov	fp, r1
 8005208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800520c:	f7fb fa0c 	bl	8000628 <__aeabi_dmul>
 8005210:	2d1f      	cmp	r5, #31
 8005212:	4606      	mov	r6, r0
 8005214:	460f      	mov	r7, r1
 8005216:	dc0c      	bgt.n	8005232 <__ieee754_rem_pio2+0x19a>
 8005218:	1e6a      	subs	r2, r5, #1
 800521a:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <__ieee754_rem_pio2+0x32c>)
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	4543      	cmp	r3, r8
 8005222:	d006      	beq.n	8005232 <__ieee754_rem_pio2+0x19a>
 8005224:	4632      	mov	r2, r6
 8005226:	463b      	mov	r3, r7
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	f7fb f844 	bl	80002b8 <__aeabi_dsub>
 8005230:	e00e      	b.n	8005250 <__ieee754_rem_pio2+0x1b8>
 8005232:	4632      	mov	r2, r6
 8005234:	463b      	mov	r3, r7
 8005236:	4650      	mov	r0, sl
 8005238:	4659      	mov	r1, fp
 800523a:	f7fb f83d 	bl	80002b8 <__aeabi_dsub>
 800523e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	9a05      	ldr	r2, [sp, #20]
 8005246:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b10      	cmp	r3, #16
 800524e:	dc02      	bgt.n	8005256 <__ieee754_rem_pio2+0x1be>
 8005250:	e9c4 0100 	strd	r0, r1, [r4]
 8005254:	e039      	b.n	80052ca <__ieee754_rem_pio2+0x232>
 8005256:	a34c      	add	r3, pc, #304	; (adr r3, 8005388 <__ieee754_rem_pio2+0x2f0>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005260:	f7fb f9e2 	bl	8000628 <__aeabi_dmul>
 8005264:	4606      	mov	r6, r0
 8005266:	460f      	mov	r7, r1
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4650      	mov	r0, sl
 800526e:	4659      	mov	r1, fp
 8005270:	f7fb f822 	bl	80002b8 <__aeabi_dsub>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4680      	mov	r8, r0
 800527a:	4689      	mov	r9, r1
 800527c:	4650      	mov	r0, sl
 800527e:	4659      	mov	r1, fp
 8005280:	f7fb f81a 	bl	80002b8 <__aeabi_dsub>
 8005284:	4632      	mov	r2, r6
 8005286:	463b      	mov	r3, r7
 8005288:	f7fb f816 	bl	80002b8 <__aeabi_dsub>
 800528c:	a340      	add	r3, pc, #256	; (adr r3, 8005390 <__ieee754_rem_pio2+0x2f8>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529a:	f7fb f9c5 	bl	8000628 <__aeabi_dmul>
 800529e:	4632      	mov	r2, r6
 80052a0:	463b      	mov	r3, r7
 80052a2:	f7fb f809 	bl	80002b8 <__aeabi_dsub>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4606      	mov	r6, r0
 80052ac:	460f      	mov	r7, r1
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb f801 	bl	80002b8 <__aeabi_dsub>
 80052b6:	9a05      	ldr	r2, [sp, #20]
 80052b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b31      	cmp	r3, #49	; 0x31
 80052c0:	dc20      	bgt.n	8005304 <__ieee754_rem_pio2+0x26c>
 80052c2:	e9c4 0100 	strd	r0, r1, [r4]
 80052c6:	46c2      	mov	sl, r8
 80052c8:	46cb      	mov	fp, r9
 80052ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80052ce:	4650      	mov	r0, sl
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	4659      	mov	r1, fp
 80052d6:	f7fa ffef 	bl	80002b8 <__aeabi_dsub>
 80052da:	463b      	mov	r3, r7
 80052dc:	4632      	mov	r2, r6
 80052de:	f7fa ffeb 	bl	80002b8 <__aeabi_dsub>
 80052e2:	9b04      	ldr	r3, [sp, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052ea:	f6bf af11 	bge.w	8005110 <__ieee754_rem_pio2+0x78>
 80052ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	f8c4 8000 	str.w	r8, [r4]
 80052f8:	60a0      	str	r0, [r4, #8]
 80052fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052fe:	60e3      	str	r3, [r4, #12]
 8005300:	426d      	negs	r5, r5
 8005302:	e705      	b.n	8005110 <__ieee754_rem_pio2+0x78>
 8005304:	a326      	add	r3, pc, #152	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x308>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800530e:	f7fb f98b 	bl	8000628 <__aeabi_dmul>
 8005312:	4606      	mov	r6, r0
 8005314:	460f      	mov	r7, r1
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fa ffcb 	bl	80002b8 <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4682      	mov	sl, r0
 8005328:	468b      	mov	fp, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fa ffc3 	bl	80002b8 <__aeabi_dsub>
 8005332:	4632      	mov	r2, r6
 8005334:	463b      	mov	r3, r7
 8005336:	f7fa ffbf 	bl	80002b8 <__aeabi_dsub>
 800533a:	a31b      	add	r3, pc, #108	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x310>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005348:	f7fb f96e 	bl	8000628 <__aeabi_dmul>
 800534c:	4632      	mov	r2, r6
 800534e:	463b      	mov	r3, r7
 8005350:	f7fa ffb2 	bl	80002b8 <__aeabi_dsub>
 8005354:	4606      	mov	r6, r0
 8005356:	460f      	mov	r7, r1
 8005358:	e764      	b.n	8005224 <__ieee754_rem_pio2+0x18c>
 800535a:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <__ieee754_rem_pio2+0x330>)
 800535c:	4598      	cmp	r8, r3
 800535e:	dd35      	ble.n	80053cc <__ieee754_rem_pio2+0x334>
 8005360:	ee10 2a10 	vmov	r2, s0
 8005364:	463b      	mov	r3, r7
 8005366:	4630      	mov	r0, r6
 8005368:	4639      	mov	r1, r7
 800536a:	f7fa ffa5 	bl	80002b8 <__aeabi_dsub>
 800536e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005372:	e9c4 0100 	strd	r0, r1, [r4]
 8005376:	e6a1      	b.n	80050bc <__ieee754_rem_pio2+0x24>
 8005378:	54400000 	.word	0x54400000
 800537c:	3ff921fb 	.word	0x3ff921fb
 8005380:	1a626331 	.word	0x1a626331
 8005384:	3dd0b461 	.word	0x3dd0b461
 8005388:	1a600000 	.word	0x1a600000
 800538c:	3dd0b461 	.word	0x3dd0b461
 8005390:	2e037073 	.word	0x2e037073
 8005394:	3ba3198a 	.word	0x3ba3198a
 8005398:	6dc9c883 	.word	0x6dc9c883
 800539c:	3fe45f30 	.word	0x3fe45f30
 80053a0:	2e000000 	.word	0x2e000000
 80053a4:	3ba3198a 	.word	0x3ba3198a
 80053a8:	252049c1 	.word	0x252049c1
 80053ac:	397b839a 	.word	0x397b839a
 80053b0:	3fe921fb 	.word	0x3fe921fb
 80053b4:	4002d97b 	.word	0x4002d97b
 80053b8:	3ff921fb 	.word	0x3ff921fb
 80053bc:	413921fb 	.word	0x413921fb
 80053c0:	3fe00000 	.word	0x3fe00000
 80053c4:	080060dc 	.word	0x080060dc
 80053c8:	7fefffff 	.word	0x7fefffff
 80053cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80053d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80053d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80053d8:	4630      	mov	r0, r6
 80053da:	460f      	mov	r7, r1
 80053dc:	f7fb fbbe 	bl	8000b5c <__aeabi_d2iz>
 80053e0:	f7fb f8b8 	bl	8000554 <__aeabi_i2d>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4630      	mov	r0, r6
 80053ea:	4639      	mov	r1, r7
 80053ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053f0:	f7fa ff62 	bl	80002b8 <__aeabi_dsub>
 80053f4:	2200      	movs	r2, #0
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <__ieee754_rem_pio2+0x3dc>)
 80053f8:	f7fb f916 	bl	8000628 <__aeabi_dmul>
 80053fc:	460f      	mov	r7, r1
 80053fe:	4606      	mov	r6, r0
 8005400:	f7fb fbac 	bl	8000b5c <__aeabi_d2iz>
 8005404:	f7fb f8a6 	bl	8000554 <__aeabi_i2d>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005414:	f7fa ff50 	bl	80002b8 <__aeabi_dsub>
 8005418:	2200      	movs	r2, #0
 800541a:	4b16      	ldr	r3, [pc, #88]	; (8005474 <__ieee754_rem_pio2+0x3dc>)
 800541c:	f7fb f904 	bl	8000628 <__aeabi_dmul>
 8005420:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005424:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005428:	f04f 0803 	mov.w	r8, #3
 800542c:	2600      	movs	r6, #0
 800542e:	2700      	movs	r7, #0
 8005430:	4632      	mov	r2, r6
 8005432:	463b      	mov	r3, r7
 8005434:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005438:	f108 3aff 	add.w	sl, r8, #4294967295
 800543c:	f7fb fb5c 	bl	8000af8 <__aeabi_dcmpeq>
 8005440:	b9b0      	cbnz	r0, 8005470 <__ieee754_rem_pio2+0x3d8>
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <__ieee754_rem_pio2+0x3e0>)
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	2302      	movs	r3, #2
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	462a      	mov	r2, r5
 800544c:	4643      	mov	r3, r8
 800544e:	4621      	mov	r1, r4
 8005450:	a806      	add	r0, sp, #24
 8005452:	f000 f8dd 	bl	8005610 <__kernel_rem_pio2>
 8005456:	9b04      	ldr	r3, [sp, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	4605      	mov	r5, r0
 800545c:	f6bf ae58 	bge.w	8005110 <__ieee754_rem_pio2+0x78>
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005466:	6063      	str	r3, [r4, #4]
 8005468:	68e3      	ldr	r3, [r4, #12]
 800546a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800546e:	e746      	b.n	80052fe <__ieee754_rem_pio2+0x266>
 8005470:	46d0      	mov	r8, sl
 8005472:	e7dd      	b.n	8005430 <__ieee754_rem_pio2+0x398>
 8005474:	41700000 	.word	0x41700000
 8005478:	0800615c 	.word	0x0800615c
 800547c:	00000000 	.word	0x00000000

08005480 <__kernel_cos>:
 8005480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	ec59 8b10 	vmov	r8, r9, d0
 8005488:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800548c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005490:	ed2d 8b02 	vpush	{d8}
 8005494:	eeb0 8a41 	vmov.f32	s16, s2
 8005498:	eef0 8a61 	vmov.f32	s17, s3
 800549c:	da07      	bge.n	80054ae <__kernel_cos+0x2e>
 800549e:	ee10 0a10 	vmov	r0, s0
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fb fb5a 	bl	8000b5c <__aeabi_d2iz>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	f000 8089 	beq.w	80055c0 <__kernel_cos+0x140>
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	4640      	mov	r0, r8
 80054b4:	4649      	mov	r1, r9
 80054b6:	f7fb f8b7 	bl	8000628 <__aeabi_dmul>
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b4e      	ldr	r3, [pc, #312]	; (80055f8 <__kernel_cos+0x178>)
 80054be:	4604      	mov	r4, r0
 80054c0:	460d      	mov	r5, r1
 80054c2:	f7fb f8b1 	bl	8000628 <__aeabi_dmul>
 80054c6:	a340      	add	r3, pc, #256	; (adr r3, 80055c8 <__kernel_cos+0x148>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	4682      	mov	sl, r0
 80054ce:	468b      	mov	fp, r1
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fb f8a8 	bl	8000628 <__aeabi_dmul>
 80054d8:	a33d      	add	r3, pc, #244	; (adr r3, 80055d0 <__kernel_cos+0x150>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa feed 	bl	80002bc <__adddf3>
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	f7fb f89f 	bl	8000628 <__aeabi_dmul>
 80054ea:	a33b      	add	r3, pc, #236	; (adr r3, 80055d8 <__kernel_cos+0x158>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fa fee2 	bl	80002b8 <__aeabi_dsub>
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	f7fb f896 	bl	8000628 <__aeabi_dmul>
 80054fc:	a338      	add	r3, pc, #224	; (adr r3, 80055e0 <__kernel_cos+0x160>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fedb 	bl	80002bc <__adddf3>
 8005506:	4622      	mov	r2, r4
 8005508:	462b      	mov	r3, r5
 800550a:	f7fb f88d 	bl	8000628 <__aeabi_dmul>
 800550e:	a336      	add	r3, pc, #216	; (adr r3, 80055e8 <__kernel_cos+0x168>)
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fa fed0 	bl	80002b8 <__aeabi_dsub>
 8005518:	4622      	mov	r2, r4
 800551a:	462b      	mov	r3, r5
 800551c:	f7fb f884 	bl	8000628 <__aeabi_dmul>
 8005520:	a333      	add	r3, pc, #204	; (adr r3, 80055f0 <__kernel_cos+0x170>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f7fa fec9 	bl	80002bc <__adddf3>
 800552a:	4622      	mov	r2, r4
 800552c:	462b      	mov	r3, r5
 800552e:	f7fb f87b 	bl	8000628 <__aeabi_dmul>
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	f7fb f877 	bl	8000628 <__aeabi_dmul>
 800553a:	ec53 2b18 	vmov	r2, r3, d8
 800553e:	4604      	mov	r4, r0
 8005540:	460d      	mov	r5, r1
 8005542:	4640      	mov	r0, r8
 8005544:	4649      	mov	r1, r9
 8005546:	f7fb f86f 	bl	8000628 <__aeabi_dmul>
 800554a:	460b      	mov	r3, r1
 800554c:	4602      	mov	r2, r0
 800554e:	4629      	mov	r1, r5
 8005550:	4620      	mov	r0, r4
 8005552:	f7fa feb1 	bl	80002b8 <__aeabi_dsub>
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <__kernel_cos+0x17c>)
 8005558:	429e      	cmp	r6, r3
 800555a:	4680      	mov	r8, r0
 800555c:	4689      	mov	r9, r1
 800555e:	dc11      	bgt.n	8005584 <__kernel_cos+0x104>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4650      	mov	r0, sl
 8005566:	4659      	mov	r1, fp
 8005568:	f7fa fea6 	bl	80002b8 <__aeabi_dsub>
 800556c:	460b      	mov	r3, r1
 800556e:	4924      	ldr	r1, [pc, #144]	; (8005600 <__kernel_cos+0x180>)
 8005570:	4602      	mov	r2, r0
 8005572:	2000      	movs	r0, #0
 8005574:	f7fa fea0 	bl	80002b8 <__aeabi_dsub>
 8005578:	ecbd 8b02 	vpop	{d8}
 800557c:	ec41 0b10 	vmov	d0, r0, r1
 8005580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <__kernel_cos+0x184>)
 8005586:	491e      	ldr	r1, [pc, #120]	; (8005600 <__kernel_cos+0x180>)
 8005588:	429e      	cmp	r6, r3
 800558a:	bfcc      	ite	gt
 800558c:	4d1e      	ldrgt	r5, [pc, #120]	; (8005608 <__kernel_cos+0x188>)
 800558e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005592:	2400      	movs	r4, #0
 8005594:	4622      	mov	r2, r4
 8005596:	462b      	mov	r3, r5
 8005598:	2000      	movs	r0, #0
 800559a:	f7fa fe8d 	bl	80002b8 <__aeabi_dsub>
 800559e:	4622      	mov	r2, r4
 80055a0:	4606      	mov	r6, r0
 80055a2:	460f      	mov	r7, r1
 80055a4:	462b      	mov	r3, r5
 80055a6:	4650      	mov	r0, sl
 80055a8:	4659      	mov	r1, fp
 80055aa:	f7fa fe85 	bl	80002b8 <__aeabi_dsub>
 80055ae:	4642      	mov	r2, r8
 80055b0:	464b      	mov	r3, r9
 80055b2:	f7fa fe81 	bl	80002b8 <__aeabi_dsub>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	e7d9      	b.n	8005574 <__kernel_cos+0xf4>
 80055c0:	2000      	movs	r0, #0
 80055c2:	490f      	ldr	r1, [pc, #60]	; (8005600 <__kernel_cos+0x180>)
 80055c4:	e7d8      	b.n	8005578 <__kernel_cos+0xf8>
 80055c6:	bf00      	nop
 80055c8:	be8838d4 	.word	0xbe8838d4
 80055cc:	bda8fae9 	.word	0xbda8fae9
 80055d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80055d4:	3e21ee9e 	.word	0x3e21ee9e
 80055d8:	809c52ad 	.word	0x809c52ad
 80055dc:	3e927e4f 	.word	0x3e927e4f
 80055e0:	19cb1590 	.word	0x19cb1590
 80055e4:	3efa01a0 	.word	0x3efa01a0
 80055e8:	16c15177 	.word	0x16c15177
 80055ec:	3f56c16c 	.word	0x3f56c16c
 80055f0:	5555554c 	.word	0x5555554c
 80055f4:	3fa55555 	.word	0x3fa55555
 80055f8:	3fe00000 	.word	0x3fe00000
 80055fc:	3fd33332 	.word	0x3fd33332
 8005600:	3ff00000 	.word	0x3ff00000
 8005604:	3fe90000 	.word	0x3fe90000
 8005608:	3fd20000 	.word	0x3fd20000
 800560c:	00000000 	.word	0x00000000

08005610 <__kernel_rem_pio2>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	ed2d 8b02 	vpush	{d8}
 8005618:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800561c:	1ed4      	subs	r4, r2, #3
 800561e:	9308      	str	r3, [sp, #32]
 8005620:	9101      	str	r1, [sp, #4]
 8005622:	4bc5      	ldr	r3, [pc, #788]	; (8005938 <__kernel_rem_pio2+0x328>)
 8005624:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005626:	9009      	str	r0, [sp, #36]	; 0x24
 8005628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	3b01      	subs	r3, #1
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	2318      	movs	r3, #24
 8005636:	fb94 f4f3 	sdiv	r4, r4, r3
 800563a:	f06f 0317 	mvn.w	r3, #23
 800563e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005642:	fb04 3303 	mla	r3, r4, r3, r3
 8005646:	eb03 0a02 	add.w	sl, r3, r2
 800564a:	9b04      	ldr	r3, [sp, #16]
 800564c:	9a07      	ldr	r2, [sp, #28]
 800564e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005928 <__kernel_rem_pio2+0x318>
 8005652:	eb03 0802 	add.w	r8, r3, r2
 8005656:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005658:	1aa7      	subs	r7, r4, r2
 800565a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800565e:	ae22      	add	r6, sp, #136	; 0x88
 8005660:	2500      	movs	r5, #0
 8005662:	4545      	cmp	r5, r8
 8005664:	dd13      	ble.n	800568e <__kernel_rem_pio2+0x7e>
 8005666:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005928 <__kernel_rem_pio2+0x318>
 800566a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800566e:	2600      	movs	r6, #0
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	429e      	cmp	r6, r3
 8005674:	dc32      	bgt.n	80056dc <__kernel_rem_pio2+0xcc>
 8005676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005678:	9302      	str	r3, [sp, #8]
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	199d      	adds	r5, r3, r6
 800567e:	ab22      	add	r3, sp, #136	; 0x88
 8005680:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005684:	9306      	str	r3, [sp, #24]
 8005686:	ec59 8b18 	vmov	r8, r9, d8
 800568a:	2700      	movs	r7, #0
 800568c:	e01f      	b.n	80056ce <__kernel_rem_pio2+0xbe>
 800568e:	42ef      	cmn	r7, r5
 8005690:	d407      	bmi.n	80056a2 <__kernel_rem_pio2+0x92>
 8005692:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005696:	f7fa ff5d 	bl	8000554 <__aeabi_i2d>
 800569a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800569e:	3501      	adds	r5, #1
 80056a0:	e7df      	b.n	8005662 <__kernel_rem_pio2+0x52>
 80056a2:	ec51 0b18 	vmov	r0, r1, d8
 80056a6:	e7f8      	b.n	800569a <__kernel_rem_pio2+0x8a>
 80056a8:	9906      	ldr	r1, [sp, #24]
 80056aa:	9d02      	ldr	r5, [sp, #8]
 80056ac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80056b0:	9106      	str	r1, [sp, #24]
 80056b2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80056b6:	9502      	str	r5, [sp, #8]
 80056b8:	f7fa ffb6 	bl	8000628 <__aeabi_dmul>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4640      	mov	r0, r8
 80056c2:	4649      	mov	r1, r9
 80056c4:	f7fa fdfa 	bl	80002bc <__adddf3>
 80056c8:	3701      	adds	r7, #1
 80056ca:	4680      	mov	r8, r0
 80056cc:	4689      	mov	r9, r1
 80056ce:	9b07      	ldr	r3, [sp, #28]
 80056d0:	429f      	cmp	r7, r3
 80056d2:	dde9      	ble.n	80056a8 <__kernel_rem_pio2+0x98>
 80056d4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80056d8:	3601      	adds	r6, #1
 80056da:	e7c9      	b.n	8005670 <__kernel_rem_pio2+0x60>
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	aa0e      	add	r2, sp, #56	; 0x38
 80056e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056e4:	930c      	str	r3, [sp, #48]	; 0x30
 80056e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80056e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056ec:	9c04      	ldr	r4, [sp, #16]
 80056ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80056f0:	ab9a      	add	r3, sp, #616	; 0x268
 80056f2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80056f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056fe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005702:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005706:	ab9a      	add	r3, sp, #616	; 0x268
 8005708:	445b      	add	r3, fp
 800570a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800570e:	2500      	movs	r5, #0
 8005710:	1b63      	subs	r3, r4, r5
 8005712:	2b00      	cmp	r3, #0
 8005714:	dc78      	bgt.n	8005808 <__kernel_rem_pio2+0x1f8>
 8005716:	4650      	mov	r0, sl
 8005718:	ec49 8b10 	vmov	d0, r8, r9
 800571c:	f000 fc00 	bl	8005f20 <scalbn>
 8005720:	ec57 6b10 	vmov	r6, r7, d0
 8005724:	2200      	movs	r2, #0
 8005726:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800572a:	ee10 0a10 	vmov	r0, s0
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa ff7a 	bl	8000628 <__aeabi_dmul>
 8005734:	ec41 0b10 	vmov	d0, r0, r1
 8005738:	f000 fb6e 	bl	8005e18 <floor>
 800573c:	2200      	movs	r2, #0
 800573e:	ec51 0b10 	vmov	r0, r1, d0
 8005742:	4b7e      	ldr	r3, [pc, #504]	; (800593c <__kernel_rem_pio2+0x32c>)
 8005744:	f7fa ff70 	bl	8000628 <__aeabi_dmul>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4630      	mov	r0, r6
 800574e:	4639      	mov	r1, r7
 8005750:	f7fa fdb2 	bl	80002b8 <__aeabi_dsub>
 8005754:	460f      	mov	r7, r1
 8005756:	4606      	mov	r6, r0
 8005758:	f7fb fa00 	bl	8000b5c <__aeabi_d2iz>
 800575c:	9006      	str	r0, [sp, #24]
 800575e:	f7fa fef9 	bl	8000554 <__aeabi_i2d>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fa fda5 	bl	80002b8 <__aeabi_dsub>
 800576e:	f1ba 0f00 	cmp.w	sl, #0
 8005772:	4606      	mov	r6, r0
 8005774:	460f      	mov	r7, r1
 8005776:	dd6c      	ble.n	8005852 <__kernel_rem_pio2+0x242>
 8005778:	1e62      	subs	r2, r4, #1
 800577a:	ab0e      	add	r3, sp, #56	; 0x38
 800577c:	f1ca 0118 	rsb	r1, sl, #24
 8005780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005784:	9d06      	ldr	r5, [sp, #24]
 8005786:	fa40 f301 	asr.w	r3, r0, r1
 800578a:	441d      	add	r5, r3
 800578c:	408b      	lsls	r3, r1
 800578e:	1ac0      	subs	r0, r0, r3
 8005790:	ab0e      	add	r3, sp, #56	; 0x38
 8005792:	9506      	str	r5, [sp, #24]
 8005794:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005798:	f1ca 0317 	rsb	r3, sl, #23
 800579c:	fa40 f303 	asr.w	r3, r0, r3
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	9b02      	ldr	r3, [sp, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dd62      	ble.n	800586e <__kernel_rem_pio2+0x25e>
 80057a8:	9b06      	ldr	r3, [sp, #24]
 80057aa:	2200      	movs	r2, #0
 80057ac:	3301      	adds	r3, #1
 80057ae:	9306      	str	r3, [sp, #24]
 80057b0:	4615      	mov	r5, r2
 80057b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80057b6:	4294      	cmp	r4, r2
 80057b8:	f300 8095 	bgt.w	80058e6 <__kernel_rem_pio2+0x2d6>
 80057bc:	f1ba 0f00 	cmp.w	sl, #0
 80057c0:	dd07      	ble.n	80057d2 <__kernel_rem_pio2+0x1c2>
 80057c2:	f1ba 0f01 	cmp.w	sl, #1
 80057c6:	f000 80a2 	beq.w	800590e <__kernel_rem_pio2+0x2fe>
 80057ca:	f1ba 0f02 	cmp.w	sl, #2
 80057ce:	f000 80c1 	beq.w	8005954 <__kernel_rem_pio2+0x344>
 80057d2:	9b02      	ldr	r3, [sp, #8]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d14a      	bne.n	800586e <__kernel_rem_pio2+0x25e>
 80057d8:	4632      	mov	r2, r6
 80057da:	463b      	mov	r3, r7
 80057dc:	2000      	movs	r0, #0
 80057de:	4958      	ldr	r1, [pc, #352]	; (8005940 <__kernel_rem_pio2+0x330>)
 80057e0:	f7fa fd6a 	bl	80002b8 <__aeabi_dsub>
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	d040      	beq.n	800586e <__kernel_rem_pio2+0x25e>
 80057ec:	4650      	mov	r0, sl
 80057ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005930 <__kernel_rem_pio2+0x320>
 80057f2:	f000 fb95 	bl	8005f20 <scalbn>
 80057f6:	4630      	mov	r0, r6
 80057f8:	4639      	mov	r1, r7
 80057fa:	ec53 2b10 	vmov	r2, r3, d0
 80057fe:	f7fa fd5b 	bl	80002b8 <__aeabi_dsub>
 8005802:	4606      	mov	r6, r0
 8005804:	460f      	mov	r7, r1
 8005806:	e032      	b.n	800586e <__kernel_rem_pio2+0x25e>
 8005808:	2200      	movs	r2, #0
 800580a:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <__kernel_rem_pio2+0x334>)
 800580c:	4640      	mov	r0, r8
 800580e:	4649      	mov	r1, r9
 8005810:	f7fa ff0a 	bl	8000628 <__aeabi_dmul>
 8005814:	f7fb f9a2 	bl	8000b5c <__aeabi_d2iz>
 8005818:	f7fa fe9c 	bl	8000554 <__aeabi_i2d>
 800581c:	2200      	movs	r2, #0
 800581e:	4b4a      	ldr	r3, [pc, #296]	; (8005948 <__kernel_rem_pio2+0x338>)
 8005820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005824:	f7fa ff00 	bl	8000628 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fa fd42 	bl	80002b8 <__aeabi_dsub>
 8005834:	f7fb f992 	bl	8000b5c <__aeabi_d2iz>
 8005838:	ab0e      	add	r3, sp, #56	; 0x38
 800583a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800583e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005846:	f7fa fd39 	bl	80002bc <__adddf3>
 800584a:	3501      	adds	r5, #1
 800584c:	4680      	mov	r8, r0
 800584e:	4689      	mov	r9, r1
 8005850:	e75e      	b.n	8005710 <__kernel_rem_pio2+0x100>
 8005852:	d105      	bne.n	8005860 <__kernel_rem_pio2+0x250>
 8005854:	1e63      	subs	r3, r4, #1
 8005856:	aa0e      	add	r2, sp, #56	; 0x38
 8005858:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800585c:	15c3      	asrs	r3, r0, #23
 800585e:	e79f      	b.n	80057a0 <__kernel_rem_pio2+0x190>
 8005860:	2200      	movs	r2, #0
 8005862:	4b3a      	ldr	r3, [pc, #232]	; (800594c <__kernel_rem_pio2+0x33c>)
 8005864:	f7fb f966 	bl	8000b34 <__aeabi_dcmpge>
 8005868:	2800      	cmp	r0, #0
 800586a:	d139      	bne.n	80058e0 <__kernel_rem_pio2+0x2d0>
 800586c:	9002      	str	r0, [sp, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	2300      	movs	r3, #0
 8005872:	4630      	mov	r0, r6
 8005874:	4639      	mov	r1, r7
 8005876:	f7fb f93f 	bl	8000af8 <__aeabi_dcmpeq>
 800587a:	2800      	cmp	r0, #0
 800587c:	f000 80c7 	beq.w	8005a0e <__kernel_rem_pio2+0x3fe>
 8005880:	1e65      	subs	r5, r4, #1
 8005882:	462b      	mov	r3, r5
 8005884:	2200      	movs	r2, #0
 8005886:	9904      	ldr	r1, [sp, #16]
 8005888:	428b      	cmp	r3, r1
 800588a:	da6a      	bge.n	8005962 <__kernel_rem_pio2+0x352>
 800588c:	2a00      	cmp	r2, #0
 800588e:	f000 8088 	beq.w	80059a2 <__kernel_rem_pio2+0x392>
 8005892:	ab0e      	add	r3, sp, #56	; 0x38
 8005894:	f1aa 0a18 	sub.w	sl, sl, #24
 8005898:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80b4 	beq.w	8005a0a <__kernel_rem_pio2+0x3fa>
 80058a2:	4650      	mov	r0, sl
 80058a4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005930 <__kernel_rem_pio2+0x320>
 80058a8:	f000 fb3a 	bl	8005f20 <scalbn>
 80058ac:	00ec      	lsls	r4, r5, #3
 80058ae:	ab72      	add	r3, sp, #456	; 0x1c8
 80058b0:	191e      	adds	r6, r3, r4
 80058b2:	ec59 8b10 	vmov	r8, r9, d0
 80058b6:	f106 0a08 	add.w	sl, r6, #8
 80058ba:	462f      	mov	r7, r5
 80058bc:	2f00      	cmp	r7, #0
 80058be:	f280 80df 	bge.w	8005a80 <__kernel_rem_pio2+0x470>
 80058c2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005928 <__kernel_rem_pio2+0x318>
 80058c6:	f04f 0a00 	mov.w	sl, #0
 80058ca:	eba5 030a 	sub.w	r3, r5, sl
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f2c0 810a 	blt.w	8005ae8 <__kernel_rem_pio2+0x4d8>
 80058d4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005950 <__kernel_rem_pio2+0x340>
 80058d8:	ec59 8b18 	vmov	r8, r9, d8
 80058dc:	2700      	movs	r7, #0
 80058de:	e0f5      	b.n	8005acc <__kernel_rem_pio2+0x4bc>
 80058e0:	2302      	movs	r3, #2
 80058e2:	9302      	str	r3, [sp, #8]
 80058e4:	e760      	b.n	80057a8 <__kernel_rem_pio2+0x198>
 80058e6:	ab0e      	add	r3, sp, #56	; 0x38
 80058e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ec:	b94d      	cbnz	r5, 8005902 <__kernel_rem_pio2+0x2f2>
 80058ee:	b12b      	cbz	r3, 80058fc <__kernel_rem_pio2+0x2ec>
 80058f0:	a80e      	add	r0, sp, #56	; 0x38
 80058f2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80058f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80058fa:	2301      	movs	r3, #1
 80058fc:	3201      	adds	r2, #1
 80058fe:	461d      	mov	r5, r3
 8005900:	e759      	b.n	80057b6 <__kernel_rem_pio2+0x1a6>
 8005902:	a80e      	add	r0, sp, #56	; 0x38
 8005904:	1acb      	subs	r3, r1, r3
 8005906:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800590a:	462b      	mov	r3, r5
 800590c:	e7f6      	b.n	80058fc <__kernel_rem_pio2+0x2ec>
 800590e:	1e62      	subs	r2, r4, #1
 8005910:	ab0e      	add	r3, sp, #56	; 0x38
 8005912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005916:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800591a:	a90e      	add	r1, sp, #56	; 0x38
 800591c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005920:	e757      	b.n	80057d2 <__kernel_rem_pio2+0x1c2>
 8005922:	bf00      	nop
 8005924:	f3af 8000 	nop.w
	...
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	080062a8 	.word	0x080062a8
 800593c:	40200000 	.word	0x40200000
 8005940:	3ff00000 	.word	0x3ff00000
 8005944:	3e700000 	.word	0x3e700000
 8005948:	41700000 	.word	0x41700000
 800594c:	3fe00000 	.word	0x3fe00000
 8005950:	08006268 	.word	0x08006268
 8005954:	1e62      	subs	r2, r4, #1
 8005956:	ab0e      	add	r3, sp, #56	; 0x38
 8005958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005960:	e7db      	b.n	800591a <__kernel_rem_pio2+0x30a>
 8005962:	a90e      	add	r1, sp, #56	; 0x38
 8005964:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005968:	3b01      	subs	r3, #1
 800596a:	430a      	orrs	r2, r1
 800596c:	e78b      	b.n	8005886 <__kernel_rem_pio2+0x276>
 800596e:	3301      	adds	r3, #1
 8005970:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005974:	2900      	cmp	r1, #0
 8005976:	d0fa      	beq.n	800596e <__kernel_rem_pio2+0x35e>
 8005978:	9a08      	ldr	r2, [sp, #32]
 800597a:	4422      	add	r2, r4
 800597c:	00d2      	lsls	r2, r2, #3
 800597e:	a922      	add	r1, sp, #136	; 0x88
 8005980:	18e3      	adds	r3, r4, r3
 8005982:	9206      	str	r2, [sp, #24]
 8005984:	440a      	add	r2, r1
 8005986:	9302      	str	r3, [sp, #8]
 8005988:	f10b 0108 	add.w	r1, fp, #8
 800598c:	f102 0308 	add.w	r3, r2, #8
 8005990:	1c66      	adds	r6, r4, #1
 8005992:	910a      	str	r1, [sp, #40]	; 0x28
 8005994:	2500      	movs	r5, #0
 8005996:	930d      	str	r3, [sp, #52]	; 0x34
 8005998:	9b02      	ldr	r3, [sp, #8]
 800599a:	42b3      	cmp	r3, r6
 800599c:	da04      	bge.n	80059a8 <__kernel_rem_pio2+0x398>
 800599e:	461c      	mov	r4, r3
 80059a0:	e6a6      	b.n	80056f0 <__kernel_rem_pio2+0xe0>
 80059a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059a4:	2301      	movs	r3, #1
 80059a6:	e7e3      	b.n	8005970 <__kernel_rem_pio2+0x360>
 80059a8:	9b06      	ldr	r3, [sp, #24]
 80059aa:	18ef      	adds	r7, r5, r3
 80059ac:	ab22      	add	r3, sp, #136	; 0x88
 80059ae:	441f      	add	r7, r3
 80059b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059b6:	f7fa fdcd 	bl	8000554 <__aeabi_i2d>
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	461c      	mov	r4, r3
 80059be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c0:	e9c7 0100 	strd	r0, r1, [r7]
 80059c4:	eb03 0b05 	add.w	fp, r3, r5
 80059c8:	2700      	movs	r7, #0
 80059ca:	f04f 0800 	mov.w	r8, #0
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	9b07      	ldr	r3, [sp, #28]
 80059d4:	429f      	cmp	r7, r3
 80059d6:	dd08      	ble.n	80059ea <__kernel_rem_pio2+0x3da>
 80059d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059da:	aa72      	add	r2, sp, #456	; 0x1c8
 80059dc:	18eb      	adds	r3, r5, r3
 80059de:	4413      	add	r3, r2
 80059e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80059e4:	3601      	adds	r6, #1
 80059e6:	3508      	adds	r5, #8
 80059e8:	e7d6      	b.n	8005998 <__kernel_rem_pio2+0x388>
 80059ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80059ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80059f2:	f7fa fe19 	bl	8000628 <__aeabi_dmul>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4640      	mov	r0, r8
 80059fc:	4649      	mov	r1, r9
 80059fe:	f7fa fc5d 	bl	80002bc <__adddf3>
 8005a02:	3701      	adds	r7, #1
 8005a04:	4680      	mov	r8, r0
 8005a06:	4689      	mov	r9, r1
 8005a08:	e7e3      	b.n	80059d2 <__kernel_rem_pio2+0x3c2>
 8005a0a:	3d01      	subs	r5, #1
 8005a0c:	e741      	b.n	8005892 <__kernel_rem_pio2+0x282>
 8005a0e:	f1ca 0000 	rsb	r0, sl, #0
 8005a12:	ec47 6b10 	vmov	d0, r6, r7
 8005a16:	f000 fa83 	bl	8005f20 <scalbn>
 8005a1a:	ec57 6b10 	vmov	r6, r7, d0
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4b99      	ldr	r3, [pc, #612]	; (8005c88 <__kernel_rem_pio2+0x678>)
 8005a22:	ee10 0a10 	vmov	r0, s0
 8005a26:	4639      	mov	r1, r7
 8005a28:	f7fb f884 	bl	8000b34 <__aeabi_dcmpge>
 8005a2c:	b1f8      	cbz	r0, 8005a6e <__kernel_rem_pio2+0x45e>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <__kernel_rem_pio2+0x67c>)
 8005a32:	4630      	mov	r0, r6
 8005a34:	4639      	mov	r1, r7
 8005a36:	f7fa fdf7 	bl	8000628 <__aeabi_dmul>
 8005a3a:	f7fb f88f 	bl	8000b5c <__aeabi_d2iz>
 8005a3e:	4680      	mov	r8, r0
 8005a40:	f7fa fd88 	bl	8000554 <__aeabi_i2d>
 8005a44:	2200      	movs	r2, #0
 8005a46:	4b90      	ldr	r3, [pc, #576]	; (8005c88 <__kernel_rem_pio2+0x678>)
 8005a48:	f7fa fdee 	bl	8000628 <__aeabi_dmul>
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4639      	mov	r1, r7
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7fa fc30 	bl	80002b8 <__aeabi_dsub>
 8005a58:	f7fb f880 	bl	8000b5c <__aeabi_d2iz>
 8005a5c:	1c65      	adds	r5, r4, #1
 8005a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8005a60:	f10a 0a18 	add.w	sl, sl, #24
 8005a64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a68:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005a6c:	e719      	b.n	80058a2 <__kernel_rem_pio2+0x292>
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fb f873 	bl	8000b5c <__aeabi_d2iz>
 8005a76:	ab0e      	add	r3, sp, #56	; 0x38
 8005a78:	4625      	mov	r5, r4
 8005a7a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a7e:	e710      	b.n	80058a2 <__kernel_rem_pio2+0x292>
 8005a80:	ab0e      	add	r3, sp, #56	; 0x38
 8005a82:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005a86:	f7fa fd65 	bl	8000554 <__aeabi_i2d>
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	f7fa fdcb 	bl	8000628 <__aeabi_dmul>
 8005a92:	2200      	movs	r2, #0
 8005a94:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005a98:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <__kernel_rem_pio2+0x67c>)
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fdc3 	bl	8000628 <__aeabi_dmul>
 8005aa2:	3f01      	subs	r7, #1
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	e708      	b.n	80058bc <__kernel_rem_pio2+0x2ac>
 8005aaa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005ab6:	f7fa fdb7 	bl	8000628 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fa fbfb 	bl	80002bc <__adddf3>
 8005ac6:	3701      	adds	r7, #1
 8005ac8:	4680      	mov	r8, r0
 8005aca:	4689      	mov	r9, r1
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	429f      	cmp	r7, r3
 8005ad0:	dc01      	bgt.n	8005ad6 <__kernel_rem_pio2+0x4c6>
 8005ad2:	45ba      	cmp	sl, r7
 8005ad4:	dae9      	bge.n	8005aaa <__kernel_rem_pio2+0x49a>
 8005ad6:	ab4a      	add	r3, sp, #296	; 0x128
 8005ad8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005adc:	e9c3 8900 	strd	r8, r9, [r3]
 8005ae0:	f10a 0a01 	add.w	sl, sl, #1
 8005ae4:	3e08      	subs	r6, #8
 8005ae6:	e6f0      	b.n	80058ca <__kernel_rem_pio2+0x2ba>
 8005ae8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d85b      	bhi.n	8005ba6 <__kernel_rem_pio2+0x596>
 8005aee:	e8df f003 	tbb	[pc, r3]
 8005af2:	264a      	.short	0x264a
 8005af4:	0226      	.short	0x0226
 8005af6:	ab9a      	add	r3, sp, #616	; 0x268
 8005af8:	441c      	add	r4, r3
 8005afa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005afe:	46a2      	mov	sl, r4
 8005b00:	46ab      	mov	fp, r5
 8005b02:	f1bb 0f00 	cmp.w	fp, #0
 8005b06:	dc6c      	bgt.n	8005be2 <__kernel_rem_pio2+0x5d2>
 8005b08:	46a2      	mov	sl, r4
 8005b0a:	46ab      	mov	fp, r5
 8005b0c:	f1bb 0f01 	cmp.w	fp, #1
 8005b10:	f300 8086 	bgt.w	8005c20 <__kernel_rem_pio2+0x610>
 8005b14:	2000      	movs	r0, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	2d01      	cmp	r5, #1
 8005b1a:	f300 80a0 	bgt.w	8005c5e <__kernel_rem_pio2+0x64e>
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005b24:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f040 809e 	bne.w	8005c6a <__kernel_rem_pio2+0x65a>
 8005b2e:	9b01      	ldr	r3, [sp, #4]
 8005b30:	e9c3 7800 	strd	r7, r8, [r3]
 8005b34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005b38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005b3c:	e033      	b.n	8005ba6 <__kernel_rem_pio2+0x596>
 8005b3e:	3408      	adds	r4, #8
 8005b40:	ab4a      	add	r3, sp, #296	; 0x128
 8005b42:	441c      	add	r4, r3
 8005b44:	462e      	mov	r6, r5
 8005b46:	2000      	movs	r0, #0
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	da3a      	bge.n	8005bc4 <__kernel_rem_pio2+0x5b4>
 8005b4e:	9b02      	ldr	r3, [sp, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d03d      	beq.n	8005bd0 <__kernel_rem_pio2+0x5c0>
 8005b54:	4602      	mov	r2, r0
 8005b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b5a:	9c01      	ldr	r4, [sp, #4]
 8005b5c:	e9c4 2300 	strd	r2, r3, [r4]
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005b68:	f7fa fba6 	bl	80002b8 <__aeabi_dsub>
 8005b6c:	ae4c      	add	r6, sp, #304	; 0x130
 8005b6e:	2401      	movs	r4, #1
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	da30      	bge.n	8005bd6 <__kernel_rem_pio2+0x5c6>
 8005b74:	9b02      	ldr	r3, [sp, #8]
 8005b76:	b113      	cbz	r3, 8005b7e <__kernel_rem_pio2+0x56e>
 8005b78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005b84:	e00f      	b.n	8005ba6 <__kernel_rem_pio2+0x596>
 8005b86:	ab9a      	add	r3, sp, #616	; 0x268
 8005b88:	441c      	add	r4, r3
 8005b8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005b8e:	2000      	movs	r0, #0
 8005b90:	2100      	movs	r1, #0
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	da10      	bge.n	8005bb8 <__kernel_rem_pio2+0x5a8>
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	b113      	cbz	r3, 8005ba0 <__kernel_rem_pio2+0x590>
 8005b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	e9c3 0100 	strd	r0, r1, [r3]
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	f003 0007 	and.w	r0, r3, #7
 8005bac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005bb0:	ecbd 8b02 	vpop	{d8}
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bbc:	f7fa fb7e 	bl	80002bc <__adddf3>
 8005bc0:	3d01      	subs	r5, #1
 8005bc2:	e7e6      	b.n	8005b92 <__kernel_rem_pio2+0x582>
 8005bc4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bc8:	f7fa fb78 	bl	80002bc <__adddf3>
 8005bcc:	3e01      	subs	r6, #1
 8005bce:	e7bc      	b.n	8005b4a <__kernel_rem_pio2+0x53a>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	e7c1      	b.n	8005b5a <__kernel_rem_pio2+0x54a>
 8005bd6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005bda:	f7fa fb6f 	bl	80002bc <__adddf3>
 8005bde:	3401      	adds	r4, #1
 8005be0:	e7c6      	b.n	8005b70 <__kernel_rem_pio2+0x560>
 8005be2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005be6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005bea:	4640      	mov	r0, r8
 8005bec:	ec53 2b17 	vmov	r2, r3, d7
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005bf6:	f7fa fb61 	bl	80002bc <__adddf3>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa fb57 	bl	80002b8 <__aeabi_dsub>
 8005c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c0e:	f7fa fb55 	bl	80002bc <__adddf3>
 8005c12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c16:	e9ca 0100 	strd	r0, r1, [sl]
 8005c1a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005c1e:	e770      	b.n	8005b02 <__kernel_rem_pio2+0x4f2>
 8005c20:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005c24:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c28:	4630      	mov	r0, r6
 8005c2a:	ec53 2b17 	vmov	r2, r3, d7
 8005c2e:	4639      	mov	r1, r7
 8005c30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c34:	f7fa fb42 	bl	80002bc <__adddf3>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4689      	mov	r9, r1
 8005c40:	4630      	mov	r0, r6
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa fb38 	bl	80002b8 <__aeabi_dsub>
 8005c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4c:	f7fa fb36 	bl	80002bc <__adddf3>
 8005c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c54:	e9ca 0100 	strd	r0, r1, [sl]
 8005c58:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005c5c:	e756      	b.n	8005b0c <__kernel_rem_pio2+0x4fc>
 8005c5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c62:	f7fa fb2b 	bl	80002bc <__adddf3>
 8005c66:	3d01      	subs	r5, #1
 8005c68:	e756      	b.n	8005b18 <__kernel_rem_pio2+0x508>
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	9a01      	ldr	r2, [sp, #4]
 8005c6e:	601f      	str	r7, [r3, #0]
 8005c70:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005c74:	605c      	str	r4, [r3, #4]
 8005c76:	609d      	str	r5, [r3, #8]
 8005c78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c7c:	60d3      	str	r3, [r2, #12]
 8005c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c82:	6110      	str	r0, [r2, #16]
 8005c84:	6153      	str	r3, [r2, #20]
 8005c86:	e78e      	b.n	8005ba6 <__kernel_rem_pio2+0x596>
 8005c88:	41700000 	.word	0x41700000
 8005c8c:	3e700000 	.word	0x3e700000

08005c90 <__kernel_sin>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	ec55 4b10 	vmov	r4, r5, d0
 8005c98:	b085      	sub	sp, #20
 8005c9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c9e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ca2:	ed8d 1b00 	vstr	d1, [sp]
 8005ca6:	9002      	str	r0, [sp, #8]
 8005ca8:	da06      	bge.n	8005cb8 <__kernel_sin+0x28>
 8005caa:	ee10 0a10 	vmov	r0, s0
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa ff54 	bl	8000b5c <__aeabi_d2iz>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d051      	beq.n	8005d5c <__kernel_sin+0xcc>
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	f7fa fcb2 	bl	8000628 <__aeabi_dmul>
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	468b      	mov	fp, r1
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa fcaa 	bl	8000628 <__aeabi_dmul>
 8005cd4:	a341      	add	r3, pc, #260	; (adr r3, 8005ddc <__kernel_sin+0x14c>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	4680      	mov	r8, r0
 8005cdc:	4689      	mov	r9, r1
 8005cde:	4650      	mov	r0, sl
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	f7fa fca1 	bl	8000628 <__aeabi_dmul>
 8005ce6:	a33f      	add	r3, pc, #252	; (adr r3, 8005de4 <__kernel_sin+0x154>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fae4 	bl	80002b8 <__aeabi_dsub>
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	465b      	mov	r3, fp
 8005cf4:	f7fa fc98 	bl	8000628 <__aeabi_dmul>
 8005cf8:	a33c      	add	r3, pc, #240	; (adr r3, 8005dec <__kernel_sin+0x15c>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fadd 	bl	80002bc <__adddf3>
 8005d02:	4652      	mov	r2, sl
 8005d04:	465b      	mov	r3, fp
 8005d06:	f7fa fc8f 	bl	8000628 <__aeabi_dmul>
 8005d0a:	a33a      	add	r3, pc, #232	; (adr r3, 8005df4 <__kernel_sin+0x164>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fad2 	bl	80002b8 <__aeabi_dsub>
 8005d14:	4652      	mov	r2, sl
 8005d16:	465b      	mov	r3, fp
 8005d18:	f7fa fc86 	bl	8000628 <__aeabi_dmul>
 8005d1c:	a337      	add	r3, pc, #220	; (adr r3, 8005dfc <__kernel_sin+0x16c>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa facb 	bl	80002bc <__adddf3>
 8005d26:	9b02      	ldr	r3, [sp, #8]
 8005d28:	4606      	mov	r6, r0
 8005d2a:	460f      	mov	r7, r1
 8005d2c:	b9db      	cbnz	r3, 8005d66 <__kernel_sin+0xd6>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4650      	mov	r0, sl
 8005d34:	4659      	mov	r1, fp
 8005d36:	f7fa fc77 	bl	8000628 <__aeabi_dmul>
 8005d3a:	a325      	add	r3, pc, #148	; (adr r3, 8005dd0 <__kernel_sin+0x140>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa faba 	bl	80002b8 <__aeabi_dsub>
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	f7fa fc6e 	bl	8000628 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4620      	mov	r0, r4
 8005d52:	4629      	mov	r1, r5
 8005d54:	f7fa fab2 	bl	80002bc <__adddf3>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	ec45 4b10 	vmov	d0, r4, r5
 8005d60:	b005      	add	sp, #20
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	2200      	movs	r2, #0
 8005d68:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <__kernel_sin+0x148>)
 8005d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6e:	f7fa fc5b 	bl	8000628 <__aeabi_dmul>
 8005d72:	4632      	mov	r2, r6
 8005d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d78:	463b      	mov	r3, r7
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	f7fa fc53 	bl	8000628 <__aeabi_dmul>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d8a:	f7fa fa95 	bl	80002b8 <__aeabi_dsub>
 8005d8e:	4652      	mov	r2, sl
 8005d90:	465b      	mov	r3, fp
 8005d92:	f7fa fc49 	bl	8000628 <__aeabi_dmul>
 8005d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d9a:	f7fa fa8d 	bl	80002b8 <__aeabi_dsub>
 8005d9e:	a30c      	add	r3, pc, #48	; (adr r3, 8005dd0 <__kernel_sin+0x140>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	4606      	mov	r6, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fc3c 	bl	8000628 <__aeabi_dmul>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4630      	mov	r0, r6
 8005db6:	4639      	mov	r1, r7
 8005db8:	f7fa fa80 	bl	80002bc <__adddf3>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fa78 	bl	80002b8 <__aeabi_dsub>
 8005dc8:	e7c6      	b.n	8005d58 <__kernel_sin+0xc8>
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	55555549 	.word	0x55555549
 8005dd4:	3fc55555 	.word	0x3fc55555
 8005dd8:	3fe00000 	.word	0x3fe00000
 8005ddc:	5acfd57c 	.word	0x5acfd57c
 8005de0:	3de5d93a 	.word	0x3de5d93a
 8005de4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005de8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005dec:	57b1fe7d 	.word	0x57b1fe7d
 8005df0:	3ec71de3 	.word	0x3ec71de3
 8005df4:	19c161d5 	.word	0x19c161d5
 8005df8:	3f2a01a0 	.word	0x3f2a01a0
 8005dfc:	1110f8a6 	.word	0x1110f8a6
 8005e00:	3f811111 	.word	0x3f811111

08005e04 <fabs>:
 8005e04:	ec51 0b10 	vmov	r0, r1, d0
 8005e08:	ee10 2a10 	vmov	r2, s0
 8005e0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e10:	ec43 2b10 	vmov	d0, r2, r3
 8005e14:	4770      	bx	lr
	...

08005e18 <floor>:
 8005e18:	ec51 0b10 	vmov	r0, r1, d0
 8005e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005e28:	2e13      	cmp	r6, #19
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	ee10 5a10 	vmov	r5, s0
 8005e30:	4680      	mov	r8, r0
 8005e32:	dc34      	bgt.n	8005e9e <floor+0x86>
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	da16      	bge.n	8005e66 <floor+0x4e>
 8005e38:	a335      	add	r3, pc, #212	; (adr r3, 8005f10 <floor+0xf8>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fa3d 	bl	80002bc <__adddf3>
 8005e42:	2200      	movs	r2, #0
 8005e44:	2300      	movs	r3, #0
 8005e46:	f7fa fe7f 	bl	8000b48 <__aeabi_dcmpgt>
 8005e4a:	b148      	cbz	r0, 8005e60 <floor+0x48>
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	da59      	bge.n	8005f04 <floor+0xec>
 8005e50:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005e54:	4a30      	ldr	r2, [pc, #192]	; (8005f18 <floor+0x100>)
 8005e56:	432b      	orrs	r3, r5
 8005e58:	2500      	movs	r5, #0
 8005e5a:	42ab      	cmp	r3, r5
 8005e5c:	bf18      	it	ne
 8005e5e:	4614      	movne	r4, r2
 8005e60:	4621      	mov	r1, r4
 8005e62:	4628      	mov	r0, r5
 8005e64:	e025      	b.n	8005eb2 <floor+0x9a>
 8005e66:	4f2d      	ldr	r7, [pc, #180]	; (8005f1c <floor+0x104>)
 8005e68:	4137      	asrs	r7, r6
 8005e6a:	ea01 0307 	and.w	r3, r1, r7
 8005e6e:	4303      	orrs	r3, r0
 8005e70:	d01f      	beq.n	8005eb2 <floor+0x9a>
 8005e72:	a327      	add	r3, pc, #156	; (adr r3, 8005f10 <floor+0xf8>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f7fa fa20 	bl	80002bc <__adddf3>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f7fa fe62 	bl	8000b48 <__aeabi_dcmpgt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d0eb      	beq.n	8005e60 <floor+0x48>
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	bfbe      	ittt	lt
 8005e8c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005e90:	fa43 f606 	asrlt.w	r6, r3, r6
 8005e94:	19a4      	addlt	r4, r4, r6
 8005e96:	ea24 0407 	bic.w	r4, r4, r7
 8005e9a:	2500      	movs	r5, #0
 8005e9c:	e7e0      	b.n	8005e60 <floor+0x48>
 8005e9e:	2e33      	cmp	r6, #51	; 0x33
 8005ea0:	dd0b      	ble.n	8005eba <floor+0xa2>
 8005ea2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ea6:	d104      	bne.n	8005eb2 <floor+0x9a>
 8005ea8:	ee10 2a10 	vmov	r2, s0
 8005eac:	460b      	mov	r3, r1
 8005eae:	f7fa fa05 	bl	80002bc <__adddf3>
 8005eb2:	ec41 0b10 	vmov	d0, r0, r1
 8005eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec2:	fa23 f707 	lsr.w	r7, r3, r7
 8005ec6:	4207      	tst	r7, r0
 8005ec8:	d0f3      	beq.n	8005eb2 <floor+0x9a>
 8005eca:	a311      	add	r3, pc, #68	; (adr r3, 8005f10 <floor+0xf8>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa f9f4 	bl	80002bc <__adddf3>
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f7fa fe36 	bl	8000b48 <__aeabi_dcmpgt>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d0bf      	beq.n	8005e60 <floor+0x48>
 8005ee0:	2c00      	cmp	r4, #0
 8005ee2:	da02      	bge.n	8005eea <floor+0xd2>
 8005ee4:	2e14      	cmp	r6, #20
 8005ee6:	d103      	bne.n	8005ef0 <floor+0xd8>
 8005ee8:	3401      	adds	r4, #1
 8005eea:	ea25 0507 	bic.w	r5, r5, r7
 8005eee:	e7b7      	b.n	8005e60 <floor+0x48>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005ef6:	fa03 f606 	lsl.w	r6, r3, r6
 8005efa:	4435      	add	r5, r6
 8005efc:	4545      	cmp	r5, r8
 8005efe:	bf38      	it	cc
 8005f00:	18e4      	addcc	r4, r4, r3
 8005f02:	e7f2      	b.n	8005eea <floor+0xd2>
 8005f04:	2500      	movs	r5, #0
 8005f06:	462c      	mov	r4, r5
 8005f08:	e7aa      	b.n	8005e60 <floor+0x48>
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	8800759c 	.word	0x8800759c
 8005f14:	7e37e43c 	.word	0x7e37e43c
 8005f18:	bff00000 	.word	0xbff00000
 8005f1c:	000fffff 	.word	0x000fffff

08005f20 <scalbn>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	ec55 4b10 	vmov	r4, r5, d0
 8005f26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	b9aa      	cbnz	r2, 8005f5c <scalbn+0x3c>
 8005f30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f34:	4323      	orrs	r3, r4
 8005f36:	d03b      	beq.n	8005fb0 <scalbn+0x90>
 8005f38:	4b31      	ldr	r3, [pc, #196]	; (8006000 <scalbn+0xe0>)
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	ee10 0a10 	vmov	r0, s0
 8005f42:	f7fa fb71 	bl	8000628 <__aeabi_dmul>
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <scalbn+0xe4>)
 8005f48:	429e      	cmp	r6, r3
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	da12      	bge.n	8005f76 <scalbn+0x56>
 8005f50:	a327      	add	r3, pc, #156	; (adr r3, 8005ff0 <scalbn+0xd0>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa fb67 	bl	8000628 <__aeabi_dmul>
 8005f5a:	e009      	b.n	8005f70 <scalbn+0x50>
 8005f5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005f60:	428a      	cmp	r2, r1
 8005f62:	d10c      	bne.n	8005f7e <scalbn+0x5e>
 8005f64:	ee10 2a10 	vmov	r2, s0
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa f9a6 	bl	80002bc <__adddf3>
 8005f70:	4604      	mov	r4, r0
 8005f72:	460d      	mov	r5, r1
 8005f74:	e01c      	b.n	8005fb0 <scalbn+0x90>
 8005f76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	3a36      	subs	r2, #54	; 0x36
 8005f7e:	4432      	add	r2, r6
 8005f80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005f84:	428a      	cmp	r2, r1
 8005f86:	dd0b      	ble.n	8005fa0 <scalbn+0x80>
 8005f88:	ec45 4b11 	vmov	d1, r4, r5
 8005f8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005ff8 <scalbn+0xd8>
 8005f90:	f000 f83c 	bl	800600c <copysign>
 8005f94:	a318      	add	r3, pc, #96	; (adr r3, 8005ff8 <scalbn+0xd8>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	ec51 0b10 	vmov	r0, r1, d0
 8005f9e:	e7da      	b.n	8005f56 <scalbn+0x36>
 8005fa0:	2a00      	cmp	r2, #0
 8005fa2:	dd08      	ble.n	8005fb6 <scalbn+0x96>
 8005fa4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fb0:	ec45 4b10 	vmov	d0, r4, r5
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
 8005fb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005fba:	da0d      	bge.n	8005fd8 <scalbn+0xb8>
 8005fbc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005fc0:	429e      	cmp	r6, r3
 8005fc2:	ec45 4b11 	vmov	d1, r4, r5
 8005fc6:	dce1      	bgt.n	8005f8c <scalbn+0x6c>
 8005fc8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005ff0 <scalbn+0xd0>
 8005fcc:	f000 f81e 	bl	800600c <copysign>
 8005fd0:	a307      	add	r3, pc, #28	; (adr r3, 8005ff0 <scalbn+0xd0>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	e7e0      	b.n	8005f9a <scalbn+0x7a>
 8005fd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fdc:	3236      	adds	r2, #54	; 0x36
 8005fde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	2200      	movs	r2, #0
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <scalbn+0xe8>)
 8005fee:	e7b2      	b.n	8005f56 <scalbn+0x36>
 8005ff0:	c2f8f359 	.word	0xc2f8f359
 8005ff4:	01a56e1f 	.word	0x01a56e1f
 8005ff8:	8800759c 	.word	0x8800759c
 8005ffc:	7e37e43c 	.word	0x7e37e43c
 8006000:	43500000 	.word	0x43500000
 8006004:	ffff3cb0 	.word	0xffff3cb0
 8006008:	3c900000 	.word	0x3c900000

0800600c <copysign>:
 800600c:	ec51 0b10 	vmov	r0, r1, d0
 8006010:	ee11 0a90 	vmov	r0, s3
 8006014:	ee10 2a10 	vmov	r2, s0
 8006018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800601c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006020:	ea41 0300 	orr.w	r3, r1, r0
 8006024:	ec43 2b10 	vmov	d0, r2, r3
 8006028:	4770      	bx	lr
	...

0800602c <_init>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr

08006038 <_fini>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr
