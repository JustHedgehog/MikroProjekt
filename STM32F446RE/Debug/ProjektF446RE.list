
ProjektF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006444  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006618  08006618  00016618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b8  080068b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c0  080068c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080068c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d358  20000074  0800693c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d3cc  0800693c  0002d3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acc4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf1  00000000  00000000  0002ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002d378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e0f  00000000  00000000  0002dba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008539  00000000  00000000  0004f9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cda72  00000000  00000000  00057ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  001259e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065fc 	.word	0x080065fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080065fc 	.word	0x080065fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MySysTick>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void MySysTick(int arg){
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

	static uint16_t ms=0;
	ms++;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MySysTick+0x38>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MySysTick+0x38>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	if(ms>arg)
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MySysTick+0x38>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	da05      	bge.n	8000f28 <MySysTick+0x2c>
	{
		ms=0;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <MySysTick+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	801a      	strh	r2, [r3, #0]
		ms_set=1;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <MySysTick+0x3c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	}

}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	200000b0 	.word	0x200000b0
 8000f38:	20000090 	.word	0x20000090

08000f3c <USART_RX_IsEmpty>:

uint8_t USART_RX_IsEmpty(){
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	if(USART_RX_Busy == USART_RX_Empty)
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <USART_RX_IsEmpty+0x20>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <USART_RX_IsEmpty+0x24>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d101      	bne.n	8000f50 <USART_RX_IsEmpty+0x14>
	{
		return 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <USART_RX_IsEmpty+0x16>
	}else{
		return 1;
 8000f50:	2301      	movs	r3, #1
	}
}//Funkcja sprawdzajacy czy bufor odbiorczy jest pusty
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200000a0 	.word	0x200000a0
 8000f60:	2000009c 	.word	0x2000009c

08000f64 <USART_GC>:

uint8_t USART_GC(){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
	uint8_t tmp;
	if(USART_RX_Empty!=USART_RX_Busy)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <USART_GC+0x48>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <USART_GC+0x4c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d013      	beq.n	8000f9e <USART_GC+0x3a>
	{
		tmp = USART_RxBuf[USART_RX_Busy];
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <USART_GC+0x4c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <USART_GC+0x50>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	71fb      	strb	r3, [r7, #7]
		USART_RX_Busy++;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <USART_GC+0x4c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <USART_GC+0x4c>)
 8000f88:	6013      	str	r3, [r2, #0]
		if(USART_RX_Busy >= USART_RXBUF_LEN) USART_RX_Busy =0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <USART_GC+0x4c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f92:	db02      	blt.n	8000f9a <USART_GC+0x36>
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <USART_GC+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
		return tmp;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	e000      	b.n	8000fa0 <USART_GC+0x3c>
	}else
	{
		return 0;
 8000f9e:	2300      	movs	r3, #0
	}
} //Funkcja zwracająca znak
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	2000009c 	.word	0x2000009c
 8000fb0:	200000a0 	.word	0x200000a0
 8000fb4:	20002e64 	.word	0x20002e64

08000fb8 <USART_GD>:

uint16_t USART_GD(char *buf){
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	6018      	str	r0, [r3, #0]
	static uint8_t bf[1052];
	static uint16_t index=0;
	uint8_t buff_helper[1052];
	uint16_t len_com;
	while(USART_RX_IsEmpty())
 8000fc4:	e15c      	b.n	8001280 <USART_GD+0x2c8>
	{
		bf[index] = USART_GC();
 8000fc6:	4bb4      	ldr	r3, [pc, #720]	; (8001298 <USART_GD+0x2e0>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	461c      	mov	r4, r3
 8000fcc:	f7ff ffca 	bl	8000f64 <USART_GC>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4bb1      	ldr	r3, [pc, #708]	; (800129c <USART_GD+0x2e4>)
 8000fd6:	551a      	strb	r2, [r3, r4]
		if(bf[index] == FRSTART){
 8000fd8:	4baf      	ldr	r3, [pc, #700]	; (8001298 <USART_GD+0x2e0>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4baf      	ldr	r3, [pc, #700]	; (800129c <USART_GD+0x2e4>)
 8000fe0:	5c9b      	ldrb	r3, [r3, r2]
 8000fe2:	2b3a      	cmp	r3, #58	; 0x3a
 8000fe4:	d10c      	bne.n	8001000 <USART_GD+0x48>
			frame_read = 1;
 8000fe6:	4bae      	ldr	r3, [pc, #696]	; (80012a0 <USART_GD+0x2e8>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
			bf[0] = bf[index];
 8000fec:	4baa      	ldr	r3, [pc, #680]	; (8001298 <USART_GD+0x2e0>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4baa      	ldr	r3, [pc, #680]	; (800129c <USART_GD+0x2e4>)
 8000ff4:	5c9a      	ldrb	r2, [r3, r2]
 8000ff6:	4ba9      	ldr	r3, [pc, #676]	; (800129c <USART_GD+0x2e4>)
 8000ff8:	701a      	strb	r2, [r3, #0]
			index = 0;
 8000ffa:	4ba7      	ldr	r3, [pc, #668]	; (8001298 <USART_GD+0x2e0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	801a      	strh	r2, [r3, #0]
		}
		if (frame_read == 1) {
 8001000:	4ba7      	ldr	r3, [pc, #668]	; (80012a0 <USART_GD+0x2e8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	f040 813b 	bne.w	8001280 <USART_GD+0x2c8>
			if ((bf[index] == FREND)) {
 800100a:	4ba3      	ldr	r3, [pc, #652]	; (8001298 <USART_GD+0x2e0>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4ba2      	ldr	r3, [pc, #648]	; (800129c <USART_GD+0x2e4>)
 8001012:	5c9b      	ldrb	r3, [r3, r2]
 8001014:	2b3b      	cmp	r3, #59	; 0x3b
 8001016:	f040 8121 	bne.w	800125c <USART_GD+0x2a4>
				for (int i = 0; i <= index; i++) {
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001020:	e010      	b.n	8001044 <USART_GD+0x8c>
					buff_helper[i] = bf[i];
 8001022:	4a9e      	ldr	r2, [pc, #632]	; (800129c <USART_GD+0x2e4>)
 8001024:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001028:	4413      	add	r3, r2
 800102a:	7819      	ldrb	r1, [r3, #0]
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001034:	4413      	add	r3, r2
 8001036:	460a      	mov	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i <= index; i++) {
 800103a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800103e:	3301      	adds	r3, #1
 8001040:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001044:	4b94      	ldr	r3, [pc, #592]	; (8001298 <USART_GD+0x2e0>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800104e:	4293      	cmp	r3, r2
 8001050:	dde7      	ble.n	8001022 <USART_GD+0x6a>
				}
				len_com = index;
 8001052:	4b91      	ldr	r3, [pc, #580]	; (8001298 <USART_GD+0x2e0>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
				int y = 0, i = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
				if (len_com > 6) {
 8001066:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 800106a:	2b06      	cmp	r3, #6
 800106c:	f240 80f2 	bls.w	8001254 <USART_GD+0x29c>
					while (i <= len_com) {
 8001070:	e0e9      	b.n	8001246 <USART_GD+0x28e>
						char singlefrchar = buff_helper[i];
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f887 3429 	strb.w	r3, [r7, #1065]	; 0x429
						switch (singlefrchar) {
 8001082:	f897 3429 	ldrb.w	r3, [r7, #1065]	; 0x429
 8001086:	2b3b      	cmp	r3, #59	; 0x3b
 8001088:	d043      	beq.n	8001112 <USART_GD+0x15a>
 800108a:	2b5c      	cmp	r3, #92	; 0x5c
 800108c:	f040 80c5 	bne.w	800121a <USART_GD+0x262>
						case FRCOD: {
							if (buff_helper[i + 1] == FRCODS) {
 8001090:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001094:	3301      	adds	r3, #1
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	2b61      	cmp	r3, #97	; 0x61
 800109e:	d10b      	bne.n	80010b8 <USART_GD+0x100>
								frame[y] = FRSTART;
 80010a0:	4a80      	ldr	r2, [pc, #512]	; (80012a4 <USART_GD+0x2ec>)
 80010a2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80010a6:	4413      	add	r3, r2
 80010a8:	223a      	movs	r2, #58	; 0x3a
 80010aa:	701a      	strb	r2, [r3, #0]
								i++;
 80010ac:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
								frame[y] = FRCOD;
								i++;
							} else {
								i = len_com;
							}
							break;
 80010b6:	e0bc      	b.n	8001232 <USART_GD+0x27a>
							} else if (buff_helper[i + 1] == FRCODE) {
 80010b8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80010bc:	3301      	adds	r3, #1
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	2b62      	cmp	r3, #98	; 0x62
 80010c6:	d10b      	bne.n	80010e0 <USART_GD+0x128>
								frame[y] = FREND;
 80010c8:	4a76      	ldr	r2, [pc, #472]	; (80012a4 <USART_GD+0x2ec>)
 80010ca:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80010ce:	4413      	add	r3, r2
 80010d0:	223b      	movs	r2, #59	; 0x3b
 80010d2:	701a      	strb	r2, [r3, #0]
								i++;
 80010d4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80010d8:	3301      	adds	r3, #1
 80010da:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
							break;
 80010de:	e0a8      	b.n	8001232 <USART_GD+0x27a>
							} else if (buff_helper[i + 1] == FRCOD) {
 80010e0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80010e4:	3301      	adds	r3, #1
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	2b5c      	cmp	r3, #92	; 0x5c
 80010ee:	d10b      	bne.n	8001108 <USART_GD+0x150>
								frame[y] = FRCOD;
 80010f0:	4a6c      	ldr	r2, [pc, #432]	; (80012a4 <USART_GD+0x2ec>)
 80010f2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80010f6:	4413      	add	r3, r2
 80010f8:	225c      	movs	r2, #92	; 0x5c
 80010fa:	701a      	strb	r2, [r3, #0]
								i++;
 80010fc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001100:	3301      	adds	r3, #1
 8001102:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
							break;
 8001106:	e094      	b.n	8001232 <USART_GD+0x27a>
								i = len_com;
 8001108:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 800110c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
							break;
 8001110:	e08f      	b.n	8001232 <USART_GD+0x27a>
						}
						case FREND: {
							memcpy(sender_name, &frame[1], 3);
 8001112:	2203      	movs	r2, #3
 8001114:	4964      	ldr	r1, [pc, #400]	; (80012a8 <USART_GD+0x2f0>)
 8001116:	4865      	ldr	r0, [pc, #404]	; (80012ac <USART_GD+0x2f4>)
 8001118:	f003 fe4d 	bl	8004db6 <memcpy>
							memcpy(receiver_name, &frame[4], 3);
 800111c:	2203      	movs	r2, #3
 800111e:	4964      	ldr	r1, [pc, #400]	; (80012b0 <USART_GD+0x2f8>)
 8001120:	4864      	ldr	r0, [pc, #400]	; (80012b4 <USART_GD+0x2fc>)
 8001122:	f003 fe48 	bl	8004db6 <memcpy>
							memcpy(command, &frame[7], (y - 6));
 8001126:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800112a:	3b06      	subs	r3, #6
 800112c:	461a      	mov	r2, r3
 800112e:	4962      	ldr	r1, [pc, #392]	; (80012b8 <USART_GD+0x300>)
 8001130:	4862      	ldr	r0, [pc, #392]	; (80012bc <USART_GD+0x304>)
 8001132:	f003 fe40 	bl	8004db6 <memcpy>
							//					wykonywanie komendy
							if (memcmp("STM", receiver_name, 3) == 0
 8001136:	2203      	movs	r2, #3
 8001138:	495e      	ldr	r1, [pc, #376]	; (80012b4 <USART_GD+0x2fc>)
 800113a:	4861      	ldr	r0, [pc, #388]	; (80012c0 <USART_GD+0x308>)
 800113c:	f003 fe2c 	bl	8004d98 <memcmp>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d163      	bne.n	800120e <USART_GD+0x256>
									&& memcmp("STM", sender_name, 3) != 0) {
 8001146:	2203      	movs	r2, #3
 8001148:	4958      	ldr	r1, [pc, #352]	; (80012ac <USART_GD+0x2f4>)
 800114a:	485d      	ldr	r0, [pc, #372]	; (80012c0 <USART_GD+0x308>)
 800114c:	f003 fe24 	bl	8004d98 <memcmp>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d05b      	beq.n	800120e <USART_GD+0x256>
								if (memcmp("", command, 1) == 0) {
 8001156:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <USART_GD+0x30c>)
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	4b58      	ldr	r3, [pc, #352]	; (80012bc <USART_GD+0x304>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d108      	bne.n	8001174 <USART_GD+0x1bc>
									USART_send(":STM%sFREMPTY;\r\n", sender_name);
 8001162:	4952      	ldr	r1, [pc, #328]	; (80012ac <USART_GD+0x2f4>)
 8001164:	4858      	ldr	r0, [pc, #352]	; (80012c8 <USART_GD+0x310>)
 8001166:	f000 f8c3 	bl	80012f0 <USART_send>
									clean_after_all(y);
 800116a:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 800116e:	f000 fae5 	bl	800173c <clean_after_all>
								if (memcmp("", command, 1) == 0) {
 8001172:	e051      	b.n	8001218 <USART_GD+0x260>
								} else {
									if (memcmp("temp", command, 4) == 0) {
 8001174:	2204      	movs	r2, #4
 8001176:	4951      	ldr	r1, [pc, #324]	; (80012bc <USART_GD+0x304>)
 8001178:	4854      	ldr	r0, [pc, #336]	; (80012cc <USART_GD+0x314>)
 800117a:	f003 fe0d 	bl	8004d98 <memcmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10b      	bne.n	800119c <USART_GD+0x1e4>
										USART_send(":STM%stemp,%i;\r\n", sender_name,temp);
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <USART_GD+0x318>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4948      	ldr	r1, [pc, #288]	; (80012ac <USART_GD+0x2f4>)
 800118c:	4851      	ldr	r0, [pc, #324]	; (80012d4 <USART_GD+0x31c>)
 800118e:	f000 f8af 	bl	80012f0 <USART_send>
										clean_after_all(y);
 8001192:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8001196:	f000 fad1 	bl	800173c <clean_after_all>
								if (memcmp("", command, 1) == 0) {
 800119a:	e03d      	b.n	8001218 <USART_GD+0x260>
									} else if (memcmp("sin", command, 3) == 0) {
 800119c:	2203      	movs	r2, #3
 800119e:	4947      	ldr	r1, [pc, #284]	; (80012bc <USART_GD+0x304>)
 80011a0:	484d      	ldr	r0, [pc, #308]	; (80012d8 <USART_GD+0x320>)
 80011a2:	f003 fdf9 	bl	8004d98 <memcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10b      	bne.n	80011c4 <USART_GD+0x20c>
										sin_transmit = 1;
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <USART_GD+0x324>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
										hz = tmp_to_hz(temp);
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <USART_GD+0x318>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fad6 	bl	8001768 <tmp_to_hz>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <USART_GD+0x328>)
 80011c0:	601a      	str	r2, [r3, #0]
								if (memcmp("", command, 1) == 0) {
 80011c2:	e029      	b.n	8001218 <USART_GD+0x260>
									} else if (memcmp("hz", command, 2) == 0) {
 80011c4:	2202      	movs	r2, #2
 80011c6:	493d      	ldr	r1, [pc, #244]	; (80012bc <USART_GD+0x304>)
 80011c8:	4846      	ldr	r0, [pc, #280]	; (80012e4 <USART_GD+0x32c>)
 80011ca:	f003 fde5 	bl	8004d98 <memcmp>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d113      	bne.n	80011fc <USART_GD+0x244>
										hz = tmp_to_hz(temp);
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <USART_GD+0x318>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fac5 	bl	8001768 <tmp_to_hz>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <USART_GD+0x328>)
 80011e2:	601a      	str	r2, [r3, #0]
										USART_send(":STM%shz,%i;\r\n", sender_name, hz);
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <USART_GD+0x328>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4930      	ldr	r1, [pc, #192]	; (80012ac <USART_GD+0x2f4>)
 80011ec:	483e      	ldr	r0, [pc, #248]	; (80012e8 <USART_GD+0x330>)
 80011ee:	f000 f87f 	bl	80012f0 <USART_send>
										clean_after_all(y);
 80011f2:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 80011f6:	f000 faa1 	bl	800173c <clean_after_all>
								if (memcmp("", command, 1) == 0) {
 80011fa:	e00d      	b.n	8001218 <USART_GD+0x260>

									} else {
										USART_send(":STM%sCOM404;\r\n", sender_name);
 80011fc:	492b      	ldr	r1, [pc, #172]	; (80012ac <USART_GD+0x2f4>)
 80011fe:	483b      	ldr	r0, [pc, #236]	; (80012ec <USART_GD+0x334>)
 8001200:	f000 f876 	bl	80012f0 <USART_send>
										clean_after_all(y);
 8001204:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8001208:	f000 fa98 	bl	800173c <clean_after_all>
								if (memcmp("", command, 1) == 0) {
 800120c:	e004      	b.n	8001218 <USART_GD+0x260>

									}
								}
							} else {
								clean_after_all(y);
 800120e:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8001212:	f000 fa93 	bl	800173c <clean_after_all>
							}
							break;
 8001216:	e00c      	b.n	8001232 <USART_GD+0x27a>
 8001218:	e00b      	b.n	8001232 <USART_GD+0x27a>
						}
						default: {
							frame[y] = buff_helper[i];
 800121a:	f107 020c 	add.w	r2, r7, #12
 800121e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001222:	4413      	add	r3, r2
 8001224:	7819      	ldrb	r1, [r3, #0]
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <USART_GD+0x2ec>)
 8001228:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
						}
						}
						y++;
 8001232:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001236:	3301      	adds	r3, #1
 8001238:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
						i++;
 800123c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001240:	3301      	adds	r3, #1
 8001242:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
					while (i <= len_com) {
 8001246:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 800124a:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800124e:	429a      	cmp	r2, r3
 8001250:	f77f af0f 	ble.w	8001072 <USART_GD+0xba>
					}
				}
				index = 0;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <USART_GD+0x2e0>)
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e011      	b.n	8001280 <USART_GD+0x2c8>
			} else {
				index++;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <USART_GD+0x2e0>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <USART_GD+0x2e0>)
 8001266:	801a      	strh	r2, [r3, #0]
				if (index > 526) {
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <USART_GD+0x2e0>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	f240 220e 	movw	r2, #526	; 0x20e
 8001270:	4293      	cmp	r3, r2
 8001272:	d905      	bls.n	8001280 <USART_GD+0x2c8>
					index = 0;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <USART_GD+0x2e0>)
 8001276:	2200      	movs	r2, #0
 8001278:	801a      	strh	r2, [r3, #0]
					frame_read = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <USART_GD+0x2e8>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
	while(USART_RX_IsEmpty())
 8001280:	f7ff fe5c 	bl	8000f3c <USART_RX_IsEmpty>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f47f ae9d 	bne.w	8000fc6 <USART_GD+0xe>
				}
			}
		}
	}
	return 0;
 800128c:	2300      	movs	r3, #0
}//Funkcja odbierająca dane
 800128e:	4618      	mov	r0, r3
 8001290:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	200000b2 	.word	0x200000b2
 800129c:	200000b4 	.word	0x200000b4
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	20003634 	.word	0x20003634
 80012a8:	20003635 	.word	0x20003635
 80012ac:	200004dc 	.word	0x200004dc
 80012b0:	20003638 	.word	0x20003638
 80012b4:	20002630 	.word	0x20002630
 80012b8:	2000363b 	.word	0x2000363b
 80012bc:	200004e0 	.word	0x200004e0
 80012c0:	08006618 	.word	0x08006618
 80012c4:	0800661c 	.word	0x0800661c
 80012c8:	08006620 	.word	0x08006620
 80012cc:	08006634 	.word	0x08006634
 80012d0:	200005e4 	.word	0x200005e4
 80012d4:	0800663c 	.word	0x0800663c
 80012d8:	08006650 	.word	0x08006650
 80012dc:	200000a8 	.word	0x200000a8
 80012e0:	200000ac 	.word	0x200000ac
 80012e4:	08006654 	.word	0x08006654
 80012e8:	08006658 	.word	0x08006658
 80012ec:	08006668 	.word	0x08006668

080012f0 <USART_send>:

void USART_send(char* format,...){
 80012f0:	b40f      	push	{r0, r1, r2, r3}
 80012f2:	b580      	push	{r7, lr}
 80012f4:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 80012f8:	af00      	add	r7, sp, #0
	char tmp_s[1052];
	int i;
	__IO int index;
	va_list arglist;
	va_start(arglist,format);
 80012fa:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_s,format,arglist);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	f107 0010 	add.w	r0, r7, #16
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f8d7 1438 	ldr.w	r1, [r7, #1080]	; 0x438
 8001312:	f003 fd79 	bl	8004e08 <vsiprintf>
	va_end(arglist);
	index=USART_TX_Empty;
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <USART_send+0x104>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_s);i++){
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001326:	e020      	b.n	800136a <USART_send+0x7a>
		USART_TxBuf[index] = tmp_s[i];
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f107 0110 	add.w	r1, r7, #16
 8001332:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8001336:	440a      	add	r2, r1
 8001338:	7811      	ldrb	r1, [r2, #0]
 800133a:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <USART_send+0x108>)
 800133c:	54d1      	strb	r1, [r2, r3]
		index++;
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	601a      	str	r2, [r3, #0]
		if(index >= USART_TXBUF_LEN) index=0;
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001356:	db03      	blt.n	8001360 <USART_send+0x70>
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
	for(i=0;i<strlen(tmp_s);i++){
 8001360:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001364:	3301      	adds	r3, #1
 8001366:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ff4e 	bl	8000210 <strlen>
 8001374:	4602      	mov	r2, r0
 8001376:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800137a:	429a      	cmp	r2, r3
 800137c:	d8d4      	bhi.n	8001328 <USART_send+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137e:	b672      	cpsid	i
	}

	__disable_irq();
	if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){ //2 parametr sprawdza bufor nadajnika
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <USART_send+0x104>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <USART_send+0x10c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d125      	bne.n	80013d8 <USART_send+0xe8>
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <USART_send+0x110>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b80      	cmp	r3, #128	; 0x80
 8001398:	d11e      	bne.n	80013d8 <USART_send+0xe8>
		USART_TX_Empty = index;
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <USART_send+0x104>)
 80013a2:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <USART_send+0x10c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <USART_send+0x108>)
 80013aa:	5cd2      	ldrb	r2, [r2, r3]
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <USART_send+0x10c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <USART_send+0x10c>)
 80013b8:	6013      	str	r3, [r2, #0]
		if(USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <USART_send+0x10c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c2:	db02      	blt.n	80013ca <USART_send+0xda>
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <USART_send+0x10c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2,&tmp,1);
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <USART_send+0x110>)
 80013d2:	f002 fe74 	bl	80040be <HAL_UART_Transmit_IT>
	if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){ //2 parametr sprawdza bufor nadajnika
 80013d6:	e004      	b.n	80013e2 <USART_send+0xf2>

	}else{
		USART_TX_Empty = index;
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <USART_send+0x104>)
 80013e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013e2:	b662      	cpsie	i
	}
	__enable_irq();
}//Funkcja wysyłająca dane
 80013e4:	bf00      	nop
 80013e6:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 80013ea:	46bd      	mov	sp, r7
 80013ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013f0:	b004      	add	sp, #16
 80013f2:	4770      	bx	lr
 80013f4:	20000094 	.word	0x20000094
 80013f8:	20002694 	.word	0x20002694
 80013fc:	20000098 	.word	0x20000098
 8001400:	2000d37c 	.word	0x2000d37c

08001404 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_UART_TxCpltCallback+0x58>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d11e      	bne.n	8001452 <HAL_UART_TxCpltCallback+0x4e>
		if(USART_TX_Empty != USART_TX_Busy){
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_UART_TxCpltCallback+0x5c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_TxCpltCallback+0x60>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d018      	beq.n	8001452 <HAL_UART_TxCpltCallback+0x4e>
			uint8_t tmp= USART_TxBuf[USART_TX_Busy];
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_UART_TxCpltCallback+0x60>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_TxCpltCallback+0x64>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	73fb      	strb	r3, [r7, #15]
			USART_TX_Busy++;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_UART_TxCpltCallback+0x60>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_UART_TxCpltCallback+0x60>)
 8001432:	6013      	str	r3, [r2, #0]
			if(USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy =0;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_UART_TxCpltCallback+0x60>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800143c:	db02      	blt.n	8001444 <HAL_UART_TxCpltCallback+0x40>
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_UART_TxCpltCallback+0x60>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp , 1);
 8001444:	f107 030f 	add.w	r3, r7, #15
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <HAL_UART_TxCpltCallback+0x58>)
 800144e:	f002 fe36 	bl	80040be <HAL_UART_Transmit_IT>
		}
	}
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000d37c 	.word	0x2000d37c
 8001460:	20000094 	.word	0x20000094
 8001464:	20000098 	.word	0x20000098
 8001468:	20002694 	.word	0x20002694

0800146c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_UART_RxCpltCallback+0x44>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d115      	bne.n	80014a8 <HAL_UART_RxCpltCallback+0x3c>
		USART_RX_Empty++;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_UART_RxCpltCallback+0x48>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_UART_RxCpltCallback+0x48>)
 8001484:	6013      	str	r3, [r2, #0]
		if(USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty=0;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_UART_RxCpltCallback+0x48>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800148e:	db02      	blt.n	8001496 <HAL_UART_RxCpltCallback+0x2a>
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_UART_RxCpltCallback+0x48>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_UART_RxCpltCallback+0x48>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_UART_RxCpltCallback+0x4c>)
 800149c:	4413      	add	r3, r2
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <HAL_UART_RxCpltCallback+0x44>)
 80014a4:	f002 fe50 	bl	8004148 <HAL_UART_Receive_IT>
	}
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000d37c 	.word	0x2000d37c
 80014b4:	2000009c 	.word	0x2000009c
 80014b8:	20002e64 	.word	0x20002e64
 80014bc:	00000000 	.word	0x00000000

080014c0 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	int i;
	suma_dma=0;
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
	for(i= 2048 ; i<4096 ; i++){
 80014ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e00c      	b.n	80014f0 <HAL_ADC_ConvCpltCallback+0x30>
		suma_dma += dma_buff[i];
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_ADC_ConvCpltCallback+0xa4>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014e8:	6013      	str	r3, [r2, #0]
	for(i= 2048 ; i<4096 ; i++){
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f6:	dbee      	blt.n	80014d6 <HAL_ADC_ConvCpltCallback+0x16>
	}
	temp = (((suma_dma/2048)*3.3)/4095)*100;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_ADC_ConvCpltCallback+0xa0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0adb      	lsrs	r3, r3, #11
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f820 	bl	8000544 <__aeabi_ui2d>
 8001504:	a312      	add	r3, pc, #72	; (adr r3, 8001550 <HAL_ADC_ConvCpltCallback+0x90>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f895 	bl	8000638 <__aeabi_dmul>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	a310      	add	r3, pc, #64	; (adr r3, 8001558 <HAL_ADC_ConvCpltCallback+0x98>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f9b6 	bl	800088c <__aeabi_ddiv>
 8001520:	4603      	mov	r3, r0
 8001522:	460c      	mov	r4, r1
 8001524:	4618      	mov	r0, r3
 8001526:	4621      	mov	r1, r4
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_ADC_ConvCpltCallback+0xa8>)
 800152e:	f7ff f883 	bl	8000638 <__aeabi_dmul>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	4618      	mov	r0, r3
 8001538:	4621      	mov	r1, r4
 800153a:	f7ff fb3f 	bl	8000bbc <__aeabi_d2uiz>
 800153e:	4602      	mov	r2, r0
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_ADC_ConvCpltCallback+0xac>)
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	66666666 	.word	0x66666666
 8001554:	400a6666 	.word	0x400a6666
 8001558:	00000000 	.word	0x00000000
 800155c:	40affe00 	.word	0x40affe00
 8001560:	2000d3bc 	.word	0x2000d3bc
 8001564:	200005e8 	.word	0x200005e8
 8001568:	40590000 	.word	0x40590000
 800156c:	200005e4 	.word	0x200005e4

08001570 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	int i;
	suma_dma=0;
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	for(i= 0 ; i<2048 ; i++){
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00c      	b.n	800159e <HAL_ADC_ConvHalfCpltCallback+0x2e>
		suma_dma += dma_buff[i];
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800158c:	461a      	mov	r2, r3
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8001596:	6013      	str	r3, [r2, #0]
	for(i= 0 ; i<2048 ; i++){
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015a4:	dbee      	blt.n	8001584 <HAL_ADC_ConvHalfCpltCallback+0x14>
	}
	temp = (((suma_dma/2048)*3.3)/4095)*100;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0adb      	lsrs	r3, r3, #11
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffc9 	bl	8000544 <__aeabi_ui2d>
 80015b2:	a313      	add	r3, pc, #76	; (adr r3, 8001600 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f83e 	bl	8000638 <__aeabi_dmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	4618      	mov	r0, r3
 80015c2:	4621      	mov	r1, r4
 80015c4:	a310      	add	r3, pc, #64	; (adr r3, 8001608 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff f95f 	bl	800088c <__aeabi_ddiv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	4618      	mov	r0, r3
 80015d4:	4621      	mov	r1, r4
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80015dc:	f7ff f82c 	bl	8000638 <__aeabi_dmul>
 80015e0:	4603      	mov	r3, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	4618      	mov	r0, r3
 80015e6:	4621      	mov	r1, r4
 80015e8:	f7ff fae8 	bl	8000bbc <__aeabi_d2uiz>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_ADC_ConvHalfCpltCallback+0xac>)
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	66666666 	.word	0x66666666
 8001604:	400a6666 	.word	0x400a6666
 8001608:	00000000 	.word	0x00000000
 800160c:	40affe00 	.word	0x40affe00
 8001610:	2000d3bc 	.word	0x2000d3bc
 8001614:	200005e8 	.word	0x200005e8
 8001618:	40590000 	.word	0x40590000
 800161c:	200005e4 	.word	0x200005e4

08001620 <generacja_sinusa>:


void generacja_sinusa(int  *tablica_wartosci ) {
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

	int n,f=1; // n = ilość próbek na jeden okres sygnału
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
	double faza_sygnalu;
	uint16_t i = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	83fb      	strh	r3, [r7, #30]
	n = fs / f; //obliczenie ilości próbek w momencie zmiany f
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <generacja_sinusa+0xe0>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	fb92 f3f3 	sdiv	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]

	while (i < n) {
 800163e:	e04e      	b.n	80016de <generacja_sinusa+0xbe>
		faza_sygnalu = ((i * 2 * PI * f) / fs);
 8001640:	8bfb      	ldrh	r3, [r7, #30]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff8d 	bl	8000564 <__aeabi_i2d>
 800164a:	a42b      	add	r4, pc, #172	; (adr r4, 80016f8 <generacja_sinusa+0xd8>)
 800164c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	f7fe fff0 	bl	8000638 <__aeabi_dmul>
 8001658:	4603      	mov	r3, r0
 800165a:	460c      	mov	r4, r1
 800165c:	4625      	mov	r5, r4
 800165e:	461c      	mov	r4, r3
 8001660:	69b8      	ldr	r0, [r7, #24]
 8001662:	f7fe ff7f 	bl	8000564 <__aeabi_i2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7fe ffe3 	bl	8000638 <__aeabi_dmul>
 8001672:	4603      	mov	r3, r0
 8001674:	460c      	mov	r4, r1
 8001676:	4625      	mov	r5, r4
 8001678:	461c      	mov	r4, r3
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <generacja_sinusa+0xe0>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff70 	bl	8000564 <__aeabi_i2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7ff f8fe 	bl	800088c <__aeabi_ddiv>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	e9c7 3402 	strd	r3, r4, [r7, #8]
		*(tablica_wartosci+i) = 2048 + (sin(faza_sygnalu) * 2048);
 8001698:	ed97 0b02 	vldr	d0, [r7, #8]
 800169c:	f003 ff9c 	bl	80055d8 <sin>
 80016a0:	ec51 0b10 	vmov	r0, r1, d0
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <generacja_sinusa+0xe4>)
 80016aa:	f7fe ffc5 	bl	8000638 <__aeabi_dmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	4618      	mov	r0, r3
 80016b4:	4621      	mov	r1, r4
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <generacja_sinusa+0xe4>)
 80016bc:	f7fe fe06 	bl	80002cc <__adddf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	8bfb      	ldrh	r3, [r7, #30]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	18d4      	adds	r4, r2, r3
 80016d0:	f7ff fa4c 	bl	8000b6c <__aeabi_d2iz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	6023      	str	r3, [r4, #0]
		i = i + 1;
 80016d8:	8bfb      	ldrh	r3, [r7, #30]
 80016da:	3301      	adds	r3, #1
 80016dc:	83fb      	strh	r3, [r7, #30]
	while (i < n) {
 80016de:	8bfb      	ldrh	r3, [r7, #30]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dcac      	bgt.n	8001640 <generacja_sinusa+0x20>
	}
	i = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	83fb      	strh	r3, [r7, #30]
}// Funkcja generująca sinusa
 80016ea:	bf00      	nop
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdb0      	pop	{r4, r5, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	51eb851f 	.word	0x51eb851f
 80016fc:	40091eb8 	.word	0x40091eb8
 8001700:	20000000 	.word	0x20000000
 8001704:	40a00000 	.word	0x40a00000

08001708 <clean_frame>:


void clean_frame(char * tab ,int len){
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]

	for(int i = 0 ; i<=len ; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e007      	b.n	8001728 <clean_frame+0x20>
	{
		*(tab+i) = '\0';
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<=len ; i++)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	ddf3      	ble.n	8001718 <clean_frame+0x10>
	}
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <clean_after_all>:


void clean_after_all(int len){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

	clean_frame(frame, len);
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <clean_after_all+0x24>)
 8001748:	f7ff ffde 	bl	8001708 <clean_frame>
	clean_frame(command, (len - 6));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b06      	subs	r3, #6
 8001750:	4619      	mov	r1, r3
 8001752:	4804      	ldr	r0, [pc, #16]	; (8001764 <clean_after_all+0x28>)
 8001754:	f7ff ffd8 	bl	8001708 <clean_frame>

}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20003634 	.word	0x20003634
 8001764:	200004e0 	.word	0x200004e0

08001768 <tmp_to_hz>:

int tmp_to_hz(uint32_t temp){
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	int value,hz=200;
 8001770:	23c8      	movs	r3, #200	; 0xc8
 8001772:	617b      	str	r3, [r7, #20]
	value = 55+temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3337      	adds	r3, #55	; 0x37
 8001778:	60fb      	str	r3, [r7, #12]
	for(int i =0 ; i<value;i++){
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e005      	b.n	800178c <tmp_to_hz+0x24>
		hz+=9;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3309      	adds	r3, #9
 8001784:	617b      	str	r3, [r7, #20]
	for(int i =0 ; i<value;i++){
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	3301      	adds	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf5      	blt.n	8001780 <tmp_to_hz+0x18>
	}
	return hz;
 8001794:	697b      	ldr	r3, [r7, #20]
}
 8001796:	4618      	mov	r0, r3
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ac:	f000 fb8a 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b0:	f000 f88c 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b4:	f000 f986 	bl	8001ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017b8:	f000 f964 	bl	8001a84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017bc:	f000 f938 	bl	8001a30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017c0:	f000 f8e4 	bl	800198c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	4935      	ldr	r1, [pc, #212]	; (800189c <main+0xf8>)
 80017c8:	4835      	ldr	r0, [pc, #212]	; (80018a0 <main+0xfc>)
 80017ca:	f002 fcbd 	bl	8004148 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1,dma_buff, 4096); // Start ADC z DMA
 80017ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d2:	4934      	ldr	r1, [pc, #208]	; (80018a4 <main+0x100>)
 80017d4:	4834      	ldr	r0, [pc, #208]	; (80018a8 <main+0x104>)
 80017d6:	f000 fd6b 	bl	80022b0 <HAL_ADC_Start_DMA>

  int len = 0,b=0,a=0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
  char bx[1052]; //ewentualnie 526
  clean_frame(bx, 1051);
 80017ec:	463b      	mov	r3, r7
 80017ee:	f240 411b 	movw	r1, #1051	; 0x41b
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff88 	bl	8001708 <clean_frame>
  generacja_sinusa(tablica_wartosci);
 80017f8:	482c      	ldr	r0, [pc, #176]	; (80018ac <main+0x108>)
 80017fa:	f7ff ff11 	bl	8001620 <generacja_sinusa>
  clean_frame(frame, len);
 80017fe:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8001802:	482b      	ldr	r0, [pc, #172]	; (80018b0 <main+0x10c>)
 8001804:	f7ff ff80 	bl	8001708 <clean_frame>
  arg=50;
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <main+0x110>)
 800180a:	2232      	movs	r2, #50	; 0x32
 800180c:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(ms_set==1){
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <main+0x114>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d106      	bne.n	8001824 <main+0x80>
			USART_GD(bx);
 8001816:	463b      	mov	r3, r7
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fbcd 	bl	8000fb8 <USART_GD>
			ms_set=0;
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <main+0x114>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
		}
		if (sin_transmit == 1) {
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <main+0x118>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d1f0      	bne.n	800180e <main+0x6a>
			arg = 50;
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <main+0x110>)
 800182e:	2232      	movs	r2, #50	; 0x32
 8001830:	801a      	strh	r2, [r3, #0]
			if(a > 9999){
 8001832:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001836:	f242 720f 	movw	r2, #9999	; 0x270f
 800183a:	4293      	cmp	r3, r2
 800183c:	dd0f      	ble.n	800185e <main+0xba>
				sin_transmit=0;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <main+0x118>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
				a=0;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
				b=0;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
				clean_after_all(10);
 8001850:	200a      	movs	r0, #10
 8001852:	f7ff ff73 	bl	800173c <clean_after_all>
				arg=200;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <main+0x110>)
 8001858:	22c8      	movs	r2, #200	; 0xc8
 800185a:	801a      	strh	r2, [r3, #0]
 800185c:	e7d7      	b.n	800180e <main+0x6a>
			}else{
				if(ms_set==1){
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <main+0x114>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d1d3      	bne.n	800180e <main+0x6a>
					USART_send(":STM%ssin,%i,%i;\r\n", sender_name ,b,tablica_wartosci[a]);
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <main+0x108>)
 8001868:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001874:	4912      	ldr	r1, [pc, #72]	; (80018c0 <main+0x11c>)
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <main+0x120>)
 8001878:	f7ff fd3a 	bl	80012f0 <USART_send>
					ms_set=0;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <main+0x114>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
					a+=hz;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <main+0x124>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800188a:	4413      	add	r3, r2
 800188c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
					b++;
 8001890:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001894:	3301      	adds	r3, #1
 8001896:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
		if(ms_set==1){
 800189a:	e7b8      	b.n	800180e <main+0x6a>
 800189c:	20002e64 	.word	0x20002e64
 80018a0:	2000d37c 	.word	0x2000d37c
 80018a4:	200005e8 	.word	0x200005e8
 80018a8:	200025e8 	.word	0x200025e8
 80018ac:	2000373c 	.word	0x2000373c
 80018b0:	20003634 	.word	0x20003634
 80018b4:	2000d3c0 	.word	0x2000d3c0
 80018b8:	20000090 	.word	0x20000090
 80018bc:	200000a8 	.word	0x200000a8
 80018c0:	200004dc 	.word	0x200004dc
 80018c4:	08006678 	.word	0x08006678
 80018c8:	200000ac 	.word	0x200000ac

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2234      	movs	r2, #52	; 0x34
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fa76 	bl	8004dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <SystemClock_Config+0xb8>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	4a22      	ldr	r2, [pc, #136]	; (8001984 <SystemClock_Config+0xb8>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <SystemClock_Config+0xb8>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800190c:	2300      	movs	r3, #0
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <SystemClock_Config+0xbc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <SystemClock_Config+0xbc>)
 800191a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <SystemClock_Config+0xbc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800192c:	2302      	movs	r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001934:	2310      	movs	r3, #16
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4618      	mov	r0, r3
 8001942:	f002 f915 	bl	8003b70 <HAL_RCC_OscConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800194c:	f000 f8f0 	bl	8001b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001950:	230f      	movs	r3, #15
 8001952:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fe94 	bl	8003698 <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001976:	f000 f8db 	bl	8001b30 <Error_Handler>
  }
}
 800197a:	bf00      	nop
 800197c:	3750      	adds	r7, #80	; 0x50
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000

0800198c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019a0:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <MX_ADC1_Init+0x9c>)
 80019a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <MX_ADC1_Init+0xa0>)
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019da:	2201      	movs	r2, #1
 80019dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_ADC1_Init+0x98>)
 80019ee:	f000 fadb 	bl	8001fa8 <HAL_ADC_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019f8:	f000 f89a 	bl	8001b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_ADC1_Init+0x98>)
 8001a0e:	f000 fd55 	bl	80024bc <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a18:	f000 f88a 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200025e8 	.word	0x200025e8
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	0f000001 	.word	0x0f000001

08001a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_USART2_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a68:	f002 fadc 	bl	8004024 <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f000 f85d 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000d37c 	.word	0x2000d37c
 8001a80:	40004400 	.word	0x40004400

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_DMA_Init+0x3c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <MX_DMA_Init+0x3c>)
 8001a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_DMA_Init+0x3c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2038      	movs	r0, #56	; 0x38
 8001aac:	f001 f89b 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ab0:	2038      	movs	r0, #56	; 0x38
 8001ab2:	f001 f8b4 	bl	8002c1e <HAL_NVIC_EnableIRQ>

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_GPIO_Init+0x68>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]

}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a33      	ldr	r2, [pc, #204]	; (8001c7c <HAL_ADC_MspInit+0xec>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d15f      	bne.n	8001c72 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bea:	2302      	movs	r3, #2
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4821      	ldr	r0, [pc, #132]	; (8001c84 <HAL_ADC_MspInit+0xf4>)
 8001bfe:	f001 fbb9 	bl	8003374 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_ADC_MspInit+0xfc>)
 8001c06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c46:	4810      	ldr	r0, [pc, #64]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c48:	f001 f804 	bl	8002c54 <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c52:	f7ff ff6d 	bl	8001b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2012      	movs	r0, #18
 8001c68:	f000 ffbd 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c6c:	2012      	movs	r0, #18
 8001c6e:	f000 ffd6 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20002634 	.word	0x20002634
 8001c8c:	40026410 	.word	0x40026410

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_UART_MspInit+0x94>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d133      	bne.n	8001d1a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_UART_MspInit+0x98>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_UART_MspInit+0x98>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x98>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_UART_MspInit+0x98>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <HAL_UART_MspInit+0x98>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_UART_MspInit+0x98>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cea:	230c      	movs	r3, #12
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_UART_MspInit+0x9c>)
 8001d06:	f001 fb35 	bl	8003374 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2026      	movs	r0, #38	; 0x26
 8001d10:	f000 ff69 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d14:	2026      	movs	r0, #38	; 0x26
 8001d16:	f000 ff82 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MySysTick(arg);
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Handler+0x18>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f8b7 	bl	8000efc <MySysTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f000 f8eb 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000d3c0 	.word	0x2000d3c0

08001d9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <ADC_IRQHandler+0x10>)
 8001da2:	f000 f944 	bl	800202e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200025e8 	.word	0x200025e8

08001db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART2_IRQHandler+0x10>)
 8001db6:	f002 fa1d 	bl	80041f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000d37c 	.word	0x2000d37c

08001dc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA2_Stream0_IRQHandler+0x10>)
 8001dca:	f001 f86b 	bl	8002ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20002634 	.word	0x20002634

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f002 ff9c 	bl	8004d44 <__errno>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	230c      	movs	r3, #12
 8001e10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20020000 	.word	0x20020000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	200004d0 	.word	0x200004d0
 8001e40:	2000d3d0 	.word	0x2000d3d0

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <SystemInit+0x28>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <SystemInit+0x28>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SystemInit+0x28>)
 8001e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e76:	e003      	b.n	8001e80 <LoopCopyDataInit>

08001e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e7e:	3104      	adds	r1, #4

08001e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e88:	d3f6      	bcc.n	8001e78 <CopyDataInit>
  ldr  r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e8c:	e002      	b.n	8001e94 <LoopFillZerobss>

08001e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e90:	f842 3b04 	str.w	r3, [r2], #4

08001e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e98:	d3f9      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e9a:	f7ff ffd3 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f002 ff57 	bl	8004d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7ff fc7f 	bl	80017a4 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001eac:	080068c8 	.word	0x080068c8
  ldr  r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001eb4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001eb8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001ebc:	2000d3cc 	.word	0x2000d3cc

08001ec0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <CAN1_RX0_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_Init+0x40>)
 8001ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_Init+0x40>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x40>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 fe6f 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fe22 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fe87 	bl	8002c3a <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 fe4f 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2000000c 	.word	0x2000000c
 8001f8c:	2000d3c4 	.word	0x2000d3c4

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2000d3c4 	.word	0x2000d3c4

08001fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e033      	b.n	8002026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fde2 	bl	8001b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fee:	f023 0302 	bic.w	r3, r3, #2
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fb90 	bl	8002720 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
 8002016:	e001      	b.n	800201c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b02      	cmp	r3, #2
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b20      	cmp	r3, #32
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d049      	beq.n	8002104 <HAL_ADC_IRQHandler+0xd6>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d046      	beq.n	8002104 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d12b      	bne.n	80020f4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d127      	bne.n	80020f4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d119      	bne.n	80020f4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0220 	bic.w	r2, r2, #32
 80020ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff f9e3 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f06f 0212 	mvn.w	r2, #18
 8002102:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d057      	beq.n	80021e6 <HAL_ADC_IRQHandler+0x1b8>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d054      	beq.n	80021e6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d139      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800217a:	2b00      	cmp	r3, #0
 800217c:	d12b      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d124      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d11d      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d119      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc20 	bl	8002a1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 020c 	mvn.w	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d017      	beq.n	8002248 <HAL_ADC_IRQHandler+0x21a>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d014      	beq.n	8002248 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10d      	bne.n	8002248 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f92b 	bl	8002494 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f06f 0201 	mvn.w	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b20      	cmp	r3, #32
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x27a>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0220 	mvn.w	r2, #32
 8002296:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f905 	bl	80024a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f06f 0220 	mvn.w	r2, #32
 80022a6:	601a      	str	r2, [r3, #0]
  }
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Start_DMA+0x1e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0cc      	b.n	8002468 <HAL_ADC_Start_DMA+0x1b8>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d018      	beq.n	8002316 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f4:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <HAL_ADC_Start_DMA+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5e      	ldr	r2, [pc, #376]	; (8002474 <HAL_ADC_Start_DMA+0x1c4>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9a      	lsrs	r2, r3, #18
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002308:	e002      	b.n	8002310 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	3b01      	subs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 80a0 	bne.w	8002466 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002350:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002364:	d106      	bne.n	8002374 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f023 0206 	bic.w	r2, r3, #6
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
 8002372:	e002      	b.n	800237a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_ADC_Start_DMA+0x1c8>)
 8002384:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	4a3c      	ldr	r2, [pc, #240]	; (800247c <HAL_ADC_Start_DMA+0x1cc>)
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <HAL_ADC_Start_DMA+0x1d0>)
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_ADC_Start_DMA+0x1d4>)
 800239c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	334c      	adds	r3, #76	; 0x4c
 80023d2:	4619      	mov	r1, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f000 fcea 	bl	8002db0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d12a      	bne.n	800243e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_ADC_Start_DMA+0x1d8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d015      	beq.n	800241e <HAL_ADC_Start_DMA+0x16e>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_ADC_Start_DMA+0x1dc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_Start_DMA+0x158>
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_ADC_Start_DMA+0x1c8>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <HAL_ADC_Start_DMA+0x1e0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d129      	bne.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_ADC_Start_DMA+0x1c8>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d823      	bhi.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d11c      	bne.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e013      	b.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_ADC_Start_DMA+0x1d8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d10e      	bne.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002464:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000004 	.word	0x20000004
 8002474:	431bde83 	.word	0x431bde83
 8002478:	40012300 	.word	0x40012300
 800247c:	08002919 	.word	0x08002919
 8002480:	080029d3 	.word	0x080029d3
 8002484:	080029ef 	.word	0x080029ef
 8002488:	40012000 	.word	0x40012000
 800248c:	40012100 	.word	0x40012100
 8002490:	40012200 	.word	0x40012200

08002494 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1c>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e113      	b.n	8002700 <HAL_ADC_ConfigChannel+0x244>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d925      	bls.n	8002534 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	2207      	movs	r2, #7
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43da      	mvns	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	4603      	mov	r3, r0
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4403      	add	r3, r0
 8002526:	3b1e      	subs	r3, #30
 8002528:	409a      	lsls	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	e022      	b.n	800257a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6919      	ldr	r1, [r3, #16]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	2207      	movs	r2, #7
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	400a      	ands	r2, r1
 8002556:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	4603      	mov	r3, r0
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4403      	add	r3, r0
 8002570:	409a      	lsls	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d824      	bhi.n	80025cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b05      	subs	r3, #5
 8002594:	221f      	movs	r2, #31
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4618      	mov	r0, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b05      	subs	r3, #5
 80025be:	fa00 f203 	lsl.w	r2, r0, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ca:	e04c      	b.n	8002666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	d824      	bhi.n	800261e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	3b23      	subs	r3, #35	; 0x23
 80025e6:	221f      	movs	r2, #31
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43da      	mvns	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	400a      	ands	r2, r1
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	4618      	mov	r0, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b23      	subs	r3, #35	; 0x23
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
 800261c:	e023      	b.n	8002666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	3b41      	subs	r3, #65	; 0x41
 8002630:	221f      	movs	r2, #31
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b41      	subs	r3, #65	; 0x41
 800265a:	fa00 f203 	lsl.w	r2, r0, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002666:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_ADC_ConfigChannel+0x250>)
 8002668:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_ADC_ConfigChannel+0x254>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10f      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1d8>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d10b      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_ADC_ConfigChannel+0x254>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x23a>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_ADC_ConfigChannel+0x258>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x1f4>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b11      	cmp	r3, #17
 80026ae:	d122      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_ADC_ConfigChannel+0x258>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_ADC_ConfigChannel+0x25c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_ADC_ConfigChannel+0x260>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9a      	lsrs	r2, r3, #18
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40012300 	.word	0x40012300
 8002710:	40012000 	.word	0x40012000
 8002714:	10000012 	.word	0x10000012
 8002718:	20000004 	.word	0x20000004
 800271c:	431bde83 	.word	0x431bde83

08002720 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002728:	4b79      	ldr	r3, [pc, #484]	; (8002910 <ADC_Init+0x1f0>)
 800272a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	021a      	lsls	r2, r3, #8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	4a58      	ldr	r2, [pc, #352]	; (8002914 <ADC_Init+0x1f4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e00f      	b.n	800281e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800280c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800281c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0202 	bic.w	r2, r2, #2
 800282c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7e1b      	ldrb	r3, [r3, #24]
 8002838:	005a      	lsls	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01b      	beq.n	8002884 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800286a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	3b01      	subs	r3, #1
 8002878:	035a      	lsls	r2, r3, #13
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	e007      	b.n	8002894 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002892:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	051a      	lsls	r2, r3, #20
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028d6:	025a      	lsls	r2, r3, #9
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	029a      	lsls	r2, r3, #10
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40012300 	.word	0x40012300
 8002914:	0f000001 	.word	0x0f000001

08002918 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800292e:	2b00      	cmp	r3, #0
 8002930:	d13c      	bne.n	80029ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d12b      	bne.n	80029a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d127      	bne.n	80029a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d006      	beq.n	8002970 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800296c:	2b00      	cmp	r3, #0
 800296e:	d119      	bne.n	80029a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0220 	bic.w	r2, r2, #32
 800297e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7fe fd8b 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029aa:	e00e      	b.n	80029ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fd75 	bl	80024a8 <HAL_ADC_ErrorCallback>
}
 80029be:	e004      	b.n	80029ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7fe fdc5 	bl	8001570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fd4a 	bl	80024a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff f996 	bl	8001f90 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e099      	b.n	8002da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c90:	e00f      	b.n	8002cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c92:	f7ff f97d 	bl	8001f90 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d908      	bls.n	8002cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e078      	b.n	8002da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e8      	bne.n	8002c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_DMA_Init+0x158>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d107      	bne.n	8002d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4313      	orrs	r3, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0307 	bic.w	r3, r3, #7
 8002d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d117      	bne.n	8002d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa91 	bl	8003280 <DMA_CheckFifoParam>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d72:	2301      	movs	r3, #1
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa48 	bl	8003214 <DMA_CalcBaseAndBitshift>
 8002d84:	4603      	mov	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	223f      	movs	r2, #63	; 0x3f
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	f010803f 	.word	0xf010803f

08002db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DMA_Start_IT+0x26>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e040      	b.n	8002e58 <HAL_DMA_Start_IT+0xa8>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d12f      	bne.n	8002e4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9da 	bl	80031b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	223f      	movs	r2, #63	; 0x3f
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0216 	orr.w	r2, r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e005      	b.n	8002e56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00c      	b.n	8002e98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2205      	movs	r2, #5
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eb0:	4b92      	ldr	r3, [pc, #584]	; (80030fc <HAL_DMA_IRQHandler+0x258>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a92      	ldr	r2, [pc, #584]	; (8003100 <HAL_DMA_IRQHandler+0x25c>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0a9b      	lsrs	r3, r3, #10
 8002ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	2208      	movs	r2, #8
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2208      	movs	r2, #8
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2201      	movs	r2, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	2201      	movs	r2, #1
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	2204      	movs	r2, #4
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2210      	movs	r2, #16
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d043      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03c      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d018      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d024      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
 8002fd2:	e01f      	b.n	8003014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e016      	b.n	8003014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0208 	bic.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	2220      	movs	r2, #32
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 808e 	beq.w	8003142 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8086 	beq.w	8003142 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	2220      	movs	r2, #32
 800303c:	409a      	lsls	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b05      	cmp	r3, #5
 800304c:	d136      	bne.n	80030bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0216 	bic.w	r2, r2, #22
 800305c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_DMA_IRQHandler+0x1da>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0208 	bic.w	r2, r2, #8
 800308c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	223f      	movs	r2, #63	; 0x3f
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d07d      	beq.n	80031ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
        }
        return;
 80030ba:	e078      	b.n	80031ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01c      	beq.n	8003104 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d030      	beq.n	8003142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e02b      	b.n	8003142 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d027      	beq.n	8003142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
 80030fa:	e022      	b.n	8003142 <HAL_DMA_IRQHandler+0x29e>
 80030fc:	20000004 	.word	0x20000004
 8003100:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0210 	bic.w	r2, r2, #16
 8003120:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	2b00      	cmp	r3, #0
 8003148:	d032      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d022      	beq.n	800319c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2205      	movs	r2, #5
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3301      	adds	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	429a      	cmp	r2, r3
 8003178:	d307      	bcc.n	800318a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f2      	bne.n	800316e <HAL_DMA_IRQHandler+0x2ca>
 8003188:	e000      	b.n	800318c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800318a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
 80031ac:	e000      	b.n	80031b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ae:	bf00      	nop
    }
  }
}
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop

080031b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d108      	bne.n	80031f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031f6:	e007      	b.n	8003208 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3b10      	subs	r3, #16
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <DMA_CalcBaseAndBitshift+0x64>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <DMA_CalcBaseAndBitshift+0x68>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d909      	bls.n	8003256 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
 8003254:	e007      	b.n	8003266 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	aaaaaaab 	.word	0xaaaaaaab
 800327c:	080066a4 	.word	0x080066a4

08003280 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11f      	bne.n	80032da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d855      	bhi.n	800334c <DMA_CheckFifoParam+0xcc>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <DMA_CheckFifoParam+0x28>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032cb 	.word	0x080032cb
 80032b0:	080032b9 	.word	0x080032b9
 80032b4:	0800334d 	.word	0x0800334d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d045      	beq.n	8003350 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c8:	e042      	b.n	8003350 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032d2:	d13f      	bne.n	8003354 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e03c      	b.n	8003354 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e2:	d121      	bne.n	8003328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d836      	bhi.n	8003358 <DMA_CheckFifoParam+0xd8>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <DMA_CheckFifoParam+0x70>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003301 	.word	0x08003301
 80032f4:	08003307 	.word	0x08003307
 80032f8:	08003301 	.word	0x08003301
 80032fc:	08003319 	.word	0x08003319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      break;
 8003304:	e02f      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d024      	beq.n	800335c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003316:	e021      	b.n	800335c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003320:	d11e      	bne.n	8003360 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003326:	e01b      	b.n	8003360 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d902      	bls.n	8003334 <DMA_CheckFifoParam+0xb4>
 800332e:	2b03      	cmp	r3, #3
 8003330:	d003      	beq.n	800333a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003332:	e018      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e015      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00e      	beq.n	8003364 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      break;
 800334a:	e00b      	b.n	8003364 <DMA_CheckFifoParam+0xe4>
      break;
 800334c:	bf00      	nop
 800334e:	e00a      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;
 8003350:	bf00      	nop
 8003352:	e008      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;
 8003354:	bf00      	nop
 8003356:	e006      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;
 8003358:	bf00      	nop
 800335a:	e004      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e002      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;   
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <DMA_CheckFifoParam+0xe6>
      break;
 8003364:	bf00      	nop
    }
  } 
  
  return status; 
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e165      	b.n	800365c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	f040 8154 	bne.w	8003656 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d00b      	beq.n	80033ce <HAL_GPIO_Init+0x5a>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b12      	cmp	r3, #18
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0xfc>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b12      	cmp	r3, #18
 800346e:	d123      	bne.n	80034b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	08da      	lsrs	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3208      	adds	r2, #8
 8003478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80ae 	beq.w	8003656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <HAL_GPIO_Init+0x2fc>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <HAL_GPIO_Init+0x2fc>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_GPIO_Init+0x2fc>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003516:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_GPIO_Init+0x300>)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4e      	ldr	r2, [pc, #312]	; (8003678 <HAL_GPIO_Init+0x304>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d025      	beq.n	800358e <HAL_GPIO_Init+0x21a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4d      	ldr	r2, [pc, #308]	; (800367c <HAL_GPIO_Init+0x308>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <HAL_GPIO_Init+0x216>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_GPIO_Init+0x30c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x212>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4b      	ldr	r2, [pc, #300]	; (8003684 <HAL_GPIO_Init+0x310>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4a      	ldr	r2, [pc, #296]	; (8003688 <HAL_GPIO_Init+0x314>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x20a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a49      	ldr	r2, [pc, #292]	; (800368c <HAL_GPIO_Init+0x318>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x206>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a48      	ldr	r2, [pc, #288]	; (8003690 <HAL_GPIO_Init+0x31c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x202>
 8003572:	2306      	movs	r3, #6
 8003574:	e00c      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 8003576:	2307      	movs	r3, #7
 8003578:	e00a      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800357a:	2305      	movs	r3, #5
 800357c:	e008      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800357e:	2304      	movs	r3, #4
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 8003582:	2303      	movs	r3, #3
 8003584:	e004      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 8003586:	2302      	movs	r3, #2
 8003588:	e002      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x21c>
 800358e:	2300      	movs	r3, #0
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	f002 0203 	and.w	r2, r2, #3
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4093      	lsls	r3, r2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a0:	4934      	ldr	r1, [pc, #208]	; (8003674 <HAL_GPIO_Init+0x300>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <HAL_GPIO_Init+0x320>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d2:	4a30      	ldr	r2, [pc, #192]	; (8003694 <HAL_GPIO_Init+0x320>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d8:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_GPIO_Init+0x320>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <HAL_GPIO_Init+0x320>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_GPIO_Init+0x320>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003626:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <HAL_GPIO_Init+0x320>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_GPIO_Init+0x320>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HAL_GPIO_Init+0x320>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	f67f ae96 	bls.w	8003390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3724      	adds	r7, #36	; 0x24
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40023800 	.word	0x40023800
 8003674:	40013800 	.word	0x40013800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40021400 	.word	0x40021400
 8003690:	40021800 	.word	0x40021800
 8003694:	40013c00 	.word	0x40013c00

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b68      	ldr	r3, [pc, #416]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90c      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b65      	ldr	r3, [pc, #404]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e067      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fe fc02 	bl	8001f90 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7fe fbfe 	bl	8001f90 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20c      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f855 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003822:	4601      	mov	r1, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	5cd3      	ldrb	r3, [r2, r3]
 8003832:	fa21 f303 	lsr.w	r3, r1, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fb62 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	0800668c 	.word	0x0800668c
 800385c:	20000004 	.word	0x20000004
 8003860:	20000008 	.word	0x20000008

08003864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_GetHCLKFreq+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003880:	f7ff fff0 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003884:	4601      	mov	r1, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	0800669c 	.word	0x0800669c

080038a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038a8:	f7ff ffdc 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 80038ac:	4601      	mov	r1, r0
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0b5b      	lsrs	r3, r3, #13
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4a03      	ldr	r2, [pc, #12]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800669c 	.word	0x0800669c

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e6:	4b9f      	ldr	r3, [pc, #636]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	f200 8130 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x288>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <HAL_RCC_GetSysClockFreq+0x30>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003b55 	.word	0x08003b55
 8003904:	08003b55 	.word	0x08003b55
 8003908:	08003b55 	.word	0x08003b55
 800390c:	08003937 	.word	0x08003937
 8003910:	08003b55 	.word	0x08003b55
 8003914:	08003b55 	.word	0x08003b55
 8003918:	08003b55 	.word	0x08003b55
 800391c:	0800393d 	.word	0x0800393d
 8003920:	08003b55 	.word	0x08003b55
 8003924:	08003b55 	.word	0x08003b55
 8003928:	08003b55 	.word	0x08003b55
 800392c:	08003a4b 	.word	0x08003a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b8d      	ldr	r3, [pc, #564]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003932:	613b      	str	r3, [r7, #16]
       break;
 8003934:	e111      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003936:	4b8d      	ldr	r3, [pc, #564]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003938:	613b      	str	r3, [r7, #16]
      break;
 800393a:	e10e      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393c:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003946:	4b87      	ldr	r3, [pc, #540]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d023      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003952:	4b84      	ldr	r3, [pc, #528]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	f04f 0400 	mov.w	r4, #0
 800395c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	ea03 0501 	and.w	r5, r3, r1
 8003968:	ea04 0602 	and.w	r6, r4, r2
 800396c:	4a7f      	ldr	r2, [pc, #508]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800396e:	fb02 f106 	mul.w	r1, r2, r6
 8003972:	2200      	movs	r2, #0
 8003974:	fb02 f205 	mul.w	r2, r2, r5
 8003978:	440a      	add	r2, r1
 800397a:	497c      	ldr	r1, [pc, #496]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800397c:	fba5 0101 	umull	r0, r1, r5, r1
 8003980:	1853      	adds	r3, r2, r1
 8003982:	4619      	mov	r1, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f04f 0400 	mov.w	r4, #0
 800398a:	461a      	mov	r2, r3
 800398c:	4623      	mov	r3, r4
 800398e:	f7fd f935 	bl	8000bfc <__aeabi_uldivmod>
 8003992:	4603      	mov	r3, r0
 8003994:	460c      	mov	r4, r1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e049      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399a:	4b72      	ldr	r3, [pc, #456]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	ea03 0501 	and.w	r5, r3, r1
 80039b0:	ea04 0602 	and.w	r6, r4, r2
 80039b4:	4629      	mov	r1, r5
 80039b6:	4632      	mov	r2, r6
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	f04f 0400 	mov.w	r4, #0
 80039c0:	0154      	lsls	r4, r2, #5
 80039c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c6:	014b      	lsls	r3, r1, #5
 80039c8:	4619      	mov	r1, r3
 80039ca:	4622      	mov	r2, r4
 80039cc:	1b49      	subs	r1, r1, r5
 80039ce:	eb62 0206 	sbc.w	r2, r2, r6
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	f04f 0400 	mov.w	r4, #0
 80039da:	0194      	lsls	r4, r2, #6
 80039dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039e0:	018b      	lsls	r3, r1, #6
 80039e2:	1a5b      	subs	r3, r3, r1
 80039e4:	eb64 0402 	sbc.w	r4, r4, r2
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	00e2      	lsls	r2, r4, #3
 80039f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f6:	00d9      	lsls	r1, r3, #3
 80039f8:	460b      	mov	r3, r1
 80039fa:	4614      	mov	r4, r2
 80039fc:	195b      	adds	r3, r3, r5
 80039fe:	eb44 0406 	adc.w	r4, r4, r6
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	02a2      	lsls	r2, r4, #10
 8003a0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a10:	0299      	lsls	r1, r3, #10
 8003a12:	460b      	mov	r3, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	4621      	mov	r1, r4
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	f7fd f8ea 	bl	8000bfc <__aeabi_uldivmod>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	613b      	str	r3, [r7, #16]
      break;
 8003a48:	e087      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4a:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a52:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d023      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	ea03 0501 	and.w	r5, r3, r1
 8003a76:	ea04 0602 	and.w	r6, r4, r2
 8003a7a:	4a3c      	ldr	r2, [pc, #240]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003a7c:	fb02 f106 	mul.w	r1, r2, r6
 8003a80:	2200      	movs	r2, #0
 8003a82:	fb02 f205 	mul.w	r2, r2, r5
 8003a86:	440a      	add	r2, r1
 8003a88:	4938      	ldr	r1, [pc, #224]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003a8a:	fba5 0101 	umull	r0, r1, r5, r1
 8003a8e:	1853      	adds	r3, r2, r1
 8003a90:	4619      	mov	r1, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f7fd f8ae 	bl	8000bfc <__aeabi_uldivmod>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e049      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	ea03 0501 	and.w	r5, r3, r1
 8003abe:	ea04 0602 	and.w	r6, r4, r2
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4632      	mov	r2, r6
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f04f 0400 	mov.w	r4, #0
 8003ace:	0154      	lsls	r4, r2, #5
 8003ad0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ad4:	014b      	lsls	r3, r1, #5
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4622      	mov	r2, r4
 8003ada:	1b49      	subs	r1, r1, r5
 8003adc:	eb62 0206 	sbc.w	r2, r2, r6
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	0194      	lsls	r4, r2, #6
 8003aea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	1a5b      	subs	r3, r3, r1
 8003af2:	eb64 0402 	sbc.w	r4, r4, r2
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	00e2      	lsls	r2, r4, #3
 8003b00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b04:	00d9      	lsls	r1, r3, #3
 8003b06:	460b      	mov	r3, r1
 8003b08:	4614      	mov	r4, r2
 8003b0a:	195b      	adds	r3, r3, r5
 8003b0c:	eb44 0406 	adc.w	r4, r4, r6
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	02a2      	lsls	r2, r4, #10
 8003b1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b1e:	0299      	lsls	r1, r3, #10
 8003b20:	460b      	mov	r3, r1
 8003b22:	4614      	mov	r4, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	4621      	mov	r1, r4
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4623      	mov	r3, r4
 8003b32:	f7fd f863 	bl	8000bfc <__aeabi_uldivmod>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x298>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	0f1b      	lsrs	r3, r3, #28
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	613b      	str	r3, [r7, #16]
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003b56:	613b      	str	r3, [r7, #16]
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	693b      	ldr	r3, [r7, #16]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	017d7840 	.word	0x017d7840

08003b70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8083 	beq.w	8003c90 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b8a:	4b95      	ldr	r3, [pc, #596]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d019      	beq.n	8003bca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b96:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ba2:	4b8f      	ldr	r3, [pc, #572]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bae:	d00c      	beq.n	8003bca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb0:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d112      	bne.n	8003be2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbc:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d10b      	bne.n	8003be2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bca:	4b85      	ldr	r3, [pc, #532]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d05b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x11e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d157      	bne.n	8003c8e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e216      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x8a>
 8003bec:	4b7c      	ldr	r3, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7b      	ldr	r2, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e01d      	b.n	8003c36 <HAL_RCC_OscConfig+0xc6>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCC_OscConfig+0xae>
 8003c04:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a75      	ldr	r2, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b73      	ldr	r3, [pc, #460]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a72      	ldr	r2, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e00b      	b.n	8003c36 <HAL_RCC_OscConfig+0xc6>
 8003c1e:	4b70      	ldr	r3, [pc, #448]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6f      	ldr	r2, [pc, #444]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b6d      	ldr	r3, [pc, #436]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6c      	ldr	r2, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d013      	beq.n	8003c66 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe f9a7 	bl	8001f90 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c46:	f7fe f9a3 	bl	8001f90 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b64      	cmp	r3, #100	; 0x64
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1db      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0xd6>
 8003c64:	e014      	b.n	8003c90 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fe f993 	bl	8001f90 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6e:	f7fe f98f 	bl	8001f90 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b64      	cmp	r3, #100	; 0x64
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1c7      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c80:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCC_OscConfig+0xfe>
 8003c8c:	e000      	b.n	8003c90 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d06f      	beq.n	8003d7c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc0:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d11c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ccc:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d116      	bne.n	8003d06 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd8:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x180>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e18f      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4938      	ldr	r1, [pc, #224]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d04:	e03a      	b.n	8003d7c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d020      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fe f93c 	bl	8001f90 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7fe f938 	bl	8001f90 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e170      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4925      	ldr	r1, [pc, #148]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
 8003d4e:	e015      	b.n	8003d7c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fe f91b 	bl	8001f90 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fe f917 	bl	8001f90 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e14f      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d037      	beq.n	8003df8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCC_OscConfig+0x278>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe f8fb 	bl	8001f90 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe f8f7 	bl	8001f90 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e12f      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x22e>
 8003dbc:	e01c      	b.n	8003df8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_RCC_OscConfig+0x278>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f8e4 	bl	8001f90 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dca:	e00f      	b.n	8003dec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dcc:	f7fe f8e0 	bl	8001f90 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d908      	bls.n	8003dec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e118      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470000 	.word	0x42470000
 8003de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	4b8a      	ldr	r3, [pc, #552]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e9      	bne.n	8003dcc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8097 	beq.w	8003f34 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b83      	ldr	r3, [pc, #524]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a7e      	ldr	r2, [pc, #504]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe f89f 	bl	8001f90 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fe f89b 	bl	8001f90 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0d3      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x31a>
 8003e7c:	4b66      	ldr	r3, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a65      	ldr	r2, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	e01c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x354>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x33c>
 8003e92:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a60      	ldr	r2, [pc, #384]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a5d      	ldr	r2, [pc, #372]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x354>
 8003eac:	4b5a      	ldr	r3, [pc, #360]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a59      	ldr	r2, [pc, #356]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003ebe:	f023 0304 	bic.w	r3, r3, #4
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe f860 	bl	8001f90 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fe f85c 	bl	8001f90 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e092      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ee      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x364>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe f84a 	bl	8001f90 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fe f846 	bl	8001f90 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e07c      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ee      	bne.n	8003f00 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a3a      	ldr	r2, [pc, #232]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d068      	beq.n	800400e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3c:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d060      	beq.n	800400a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d145      	bne.n	8003fdc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fe f81b 	bl	8001f90 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fe f817 	bl	8001f90 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e04f      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f70:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	019b      	lsls	r3, r3, #6
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	071b      	lsls	r3, r3, #28
 8003fa8:	491b      	ldr	r1, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fae:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd ffec 	bl	8001f90 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd ffe8 	bl	8001f90 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e020      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x44c>
 8003fda:	e018      	b.n	800400e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd ffd5 	bl	8001f90 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fd ffd1 	bl	8001f90 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e009      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_OscConfig+0x4a8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x47a>
 8004008:	e001      	b.n	800400e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	40007000 	.word	0x40007000
 8004020:	42470060 	.word	0x42470060

08004024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03f      	b.n	80040b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fe20 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 faef 	bl	800464c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d130      	bne.n	800413a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit_IT+0x26>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e029      	b.n	800413c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit_IT+0x38>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e022      	b.n	800413c <HAL_UART_Transmit_IT+0x7e>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2221      	movs	r2, #33	; 0x21
 800411a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004134:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d140      	bne.n	80041e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_UART_Receive_IT+0x26>
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e039      	b.n	80041e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_UART_Receive_IT+0x38>
 800417c:	2302      	movs	r3, #2
 800417e:	e032      	b.n	80041e6 <HAL_UART_Receive_IT+0x9e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2222      	movs	r2, #34	; 0x22
 80041a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_UART_IRQHandler+0x52>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f982 	bl	8004548 <UART_Receive_IT>
      return;
 8004244:	e0d1      	b.n	80043ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80b0 	beq.w	80043ae <HAL_UART_IRQHandler+0x1ba>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_UART_IRQHandler+0x70>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80a5 	beq.w	80043ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_UART_IRQHandler+0x90>
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_UART_IRQHandler+0xb0>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	f043 0202 	orr.w	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_UART_IRQHandler+0xd0>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	f043 0204 	orr.w	r2, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <HAL_UART_IRQHandler+0xfa>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_UART_IRQHandler+0xee>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	f043 0208 	orr.w	r2, r3, #8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d078      	beq.n	80043e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <HAL_UART_IRQHandler+0x11c>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f91c 	bl	8004548 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <HAL_UART_IRQHandler+0x144>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d031      	beq.n	800439c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f865 	bl	8004408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d123      	bne.n	8004394 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <HAL_UART_IRQHandler+0x1fc>)
 800436a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fd75 	bl	8002e60 <HAL_DMA_Abort_IT>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d016      	beq.n	80043aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004386:	4610      	mov	r0, r2
 8004388:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438a:	e00e      	b.n	80043aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f831 	bl	80043f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	e00a      	b.n	80043aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f82d 	bl	80043f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439a:	e006      	b.n	80043aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f829 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043a8:	e01e      	b.n	80043e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043aa:	bf00      	nop
    return;
 80043ac:	e01c      	b.n	80043e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x1d6>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f852 	bl	800446c <UART_Transmit_IT>
    return;
 80043c8:	e00f      	b.n	80043ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_UART_IRQHandler+0x1f6>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f89a 	bl	8004518 <UART_EndTransmit_IT>
    return;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80043e8:	bf00      	nop
  }
}
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	08004445 	.word	0x08004445

080043f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800441e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff ffc8 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b21      	cmp	r3, #33	; 0x21
 800447e:	d144      	bne.n	800450a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d11a      	bne.n	80044c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]
 80044b2:	e00e      	b.n	80044d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]
 80044be:	e008      	b.n	80044d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6211      	str	r1, [r2, #32]
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4619      	mov	r1, r3
 80044e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10f      	bne.n	8004506 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7fc ff63 	bl	8001404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	; 0x22
 800455a:	d171      	bne.n	8004640 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004564:	d123      	bne.n	80045ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10e      	bne.n	8004592 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	1c9a      	adds	r2, r3, #2
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
 8004590:	e029      	b.n	80045e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b29b      	uxth	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
 80045ac:	e01b      	b.n	80045e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6858      	ldr	r0, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	1c59      	adds	r1, r3, #1
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6291      	str	r1, [r2, #40]	; 0x28
 80045c6:	b2c2      	uxtb	r2, r0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e00c      	b.n	80045e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	1c58      	adds	r0, r3, #1
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	6288      	str	r0, [r1, #40]	; 0x28
 80045de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d120      	bne.n	800463c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0220 	bic.w	r2, r2, #32
 8004608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc ff1a 	bl	800146c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e002      	b.n	8004642 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800468e:	f023 030c 	bic.w	r3, r3, #12
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	430b      	orrs	r3, r1
 800469a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ba:	f040 818b 	bne.w	80049d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4ac1      	ldr	r2, [pc, #772]	; (80049c8 <UART_SetConfig+0x37c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d005      	beq.n	80046d4 <UART_SetConfig+0x88>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4abf      	ldr	r2, [pc, #764]	; (80049cc <UART_SetConfig+0x380>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	f040 80bd 	bne.w	800484e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046d4:	f7ff f8e6 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 80046d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	461d      	mov	r5, r3
 80046de:	f04f 0600 	mov.w	r6, #0
 80046e2:	46a8      	mov	r8, r5
 80046e4:	46b1      	mov	r9, r6
 80046e6:	eb18 0308 	adds.w	r3, r8, r8
 80046ea:	eb49 0409 	adc.w	r4, r9, r9
 80046ee:	4698      	mov	r8, r3
 80046f0:	46a1      	mov	r9, r4
 80046f2:	eb18 0805 	adds.w	r8, r8, r5
 80046f6:	eb49 0906 	adc.w	r9, r9, r6
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004706:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800470a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800470e:	4688      	mov	r8, r1
 8004710:	4691      	mov	r9, r2
 8004712:	eb18 0005 	adds.w	r0, r8, r5
 8004716:	eb49 0106 	adc.w	r1, r9, r6
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	461d      	mov	r5, r3
 8004720:	f04f 0600 	mov.w	r6, #0
 8004724:	196b      	adds	r3, r5, r5
 8004726:	eb46 0406 	adc.w	r4, r6, r6
 800472a:	461a      	mov	r2, r3
 800472c:	4623      	mov	r3, r4
 800472e:	f7fc fa65 	bl	8000bfc <__aeabi_uldivmod>
 8004732:	4603      	mov	r3, r0
 8004734:	460c      	mov	r4, r1
 8004736:	461a      	mov	r2, r3
 8004738:	4ba5      	ldr	r3, [pc, #660]	; (80049d0 <UART_SetConfig+0x384>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	461d      	mov	r5, r3
 8004748:	f04f 0600 	mov.w	r6, #0
 800474c:	46a9      	mov	r9, r5
 800474e:	46b2      	mov	sl, r6
 8004750:	eb19 0309 	adds.w	r3, r9, r9
 8004754:	eb4a 040a 	adc.w	r4, sl, sl
 8004758:	4699      	mov	r9, r3
 800475a:	46a2      	mov	sl, r4
 800475c:	eb19 0905 	adds.w	r9, r9, r5
 8004760:	eb4a 0a06 	adc.w	sl, sl, r6
 8004764:	f04f 0100 	mov.w	r1, #0
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004770:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004774:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004778:	4689      	mov	r9, r1
 800477a:	4692      	mov	sl, r2
 800477c:	eb19 0005 	adds.w	r0, r9, r5
 8004780:	eb4a 0106 	adc.w	r1, sl, r6
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	461d      	mov	r5, r3
 800478a:	f04f 0600 	mov.w	r6, #0
 800478e:	196b      	adds	r3, r5, r5
 8004790:	eb46 0406 	adc.w	r4, r6, r6
 8004794:	461a      	mov	r2, r3
 8004796:	4623      	mov	r3, r4
 8004798:	f7fc fa30 	bl	8000bfc <__aeabi_uldivmod>
 800479c:	4603      	mov	r3, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	461a      	mov	r2, r3
 80047a2:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <UART_SetConfig+0x384>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	; 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a86      	ldr	r2, [pc, #536]	; (80049d0 <UART_SetConfig+0x384>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c4:	4498      	add	r8, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	461d      	mov	r5, r3
 80047ca:	f04f 0600 	mov.w	r6, #0
 80047ce:	46a9      	mov	r9, r5
 80047d0:	46b2      	mov	sl, r6
 80047d2:	eb19 0309 	adds.w	r3, r9, r9
 80047d6:	eb4a 040a 	adc.w	r4, sl, sl
 80047da:	4699      	mov	r9, r3
 80047dc:	46a2      	mov	sl, r4
 80047de:	eb19 0905 	adds.w	r9, r9, r5
 80047e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047fa:	4689      	mov	r9, r1
 80047fc:	4692      	mov	sl, r2
 80047fe:	eb19 0005 	adds.w	r0, r9, r5
 8004802:	eb4a 0106 	adc.w	r1, sl, r6
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	461d      	mov	r5, r3
 800480c:	f04f 0600 	mov.w	r6, #0
 8004810:	196b      	adds	r3, r5, r5
 8004812:	eb46 0406 	adc.w	r4, r6, r6
 8004816:	461a      	mov	r2, r3
 8004818:	4623      	mov	r3, r4
 800481a:	f7fc f9ef 	bl	8000bfc <__aeabi_uldivmod>
 800481e:	4603      	mov	r3, r0
 8004820:	460c      	mov	r4, r1
 8004822:	461a      	mov	r2, r3
 8004824:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <UART_SetConfig+0x384>)
 8004826:	fba3 1302 	umull	r1, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2164      	movs	r1, #100	; 0x64
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	3332      	adds	r3, #50	; 0x32
 8004838:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <UART_SetConfig+0x384>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	f003 0207 	and.w	r2, r3, #7
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4442      	add	r2, r8
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	e26f      	b.n	8004d2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484e:	f7ff f815 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8004852:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	461d      	mov	r5, r3
 8004858:	f04f 0600 	mov.w	r6, #0
 800485c:	46a8      	mov	r8, r5
 800485e:	46b1      	mov	r9, r6
 8004860:	eb18 0308 	adds.w	r3, r8, r8
 8004864:	eb49 0409 	adc.w	r4, r9, r9
 8004868:	4698      	mov	r8, r3
 800486a:	46a1      	mov	r9, r4
 800486c:	eb18 0805 	adds.w	r8, r8, r5
 8004870:	eb49 0906 	adc.w	r9, r9, r6
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004880:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004884:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004888:	4688      	mov	r8, r1
 800488a:	4691      	mov	r9, r2
 800488c:	eb18 0005 	adds.w	r0, r8, r5
 8004890:	eb49 0106 	adc.w	r1, r9, r6
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	461d      	mov	r5, r3
 800489a:	f04f 0600 	mov.w	r6, #0
 800489e:	196b      	adds	r3, r5, r5
 80048a0:	eb46 0406 	adc.w	r4, r6, r6
 80048a4:	461a      	mov	r2, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	f7fc f9a8 	bl	8000bfc <__aeabi_uldivmod>
 80048ac:	4603      	mov	r3, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	461a      	mov	r2, r3
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <UART_SetConfig+0x384>)
 80048b4:	fba3 2302 	umull	r2, r3, r3, r2
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	461d      	mov	r5, r3
 80048c2:	f04f 0600 	mov.w	r6, #0
 80048c6:	46a9      	mov	r9, r5
 80048c8:	46b2      	mov	sl, r6
 80048ca:	eb19 0309 	adds.w	r3, r9, r9
 80048ce:	eb4a 040a 	adc.w	r4, sl, sl
 80048d2:	4699      	mov	r9, r3
 80048d4:	46a2      	mov	sl, r4
 80048d6:	eb19 0905 	adds.w	r9, r9, r5
 80048da:	eb4a 0a06 	adc.w	sl, sl, r6
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048f2:	4689      	mov	r9, r1
 80048f4:	4692      	mov	sl, r2
 80048f6:	eb19 0005 	adds.w	r0, r9, r5
 80048fa:	eb4a 0106 	adc.w	r1, sl, r6
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	461d      	mov	r5, r3
 8004904:	f04f 0600 	mov.w	r6, #0
 8004908:	196b      	adds	r3, r5, r5
 800490a:	eb46 0406 	adc.w	r4, r6, r6
 800490e:	461a      	mov	r2, r3
 8004910:	4623      	mov	r3, r4
 8004912:	f7fc f973 	bl	8000bfc <__aeabi_uldivmod>
 8004916:	4603      	mov	r3, r0
 8004918:	460c      	mov	r4, r1
 800491a:	461a      	mov	r2, r3
 800491c:	4b2c      	ldr	r3, [pc, #176]	; (80049d0 <UART_SetConfig+0x384>)
 800491e:	fba3 1302 	umull	r1, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2164      	movs	r1, #100	; 0x64
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	3332      	adds	r3, #50	; 0x32
 8004930:	4a27      	ldr	r2, [pc, #156]	; (80049d0 <UART_SetConfig+0x384>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800493e:	4498      	add	r8, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	461d      	mov	r5, r3
 8004944:	f04f 0600 	mov.w	r6, #0
 8004948:	46a9      	mov	r9, r5
 800494a:	46b2      	mov	sl, r6
 800494c:	eb19 0309 	adds.w	r3, r9, r9
 8004950:	eb4a 040a 	adc.w	r4, sl, sl
 8004954:	4699      	mov	r9, r3
 8004956:	46a2      	mov	sl, r4
 8004958:	eb19 0905 	adds.w	r9, r9, r5
 800495c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004974:	4689      	mov	r9, r1
 8004976:	4692      	mov	sl, r2
 8004978:	eb19 0005 	adds.w	r0, r9, r5
 800497c:	eb4a 0106 	adc.w	r1, sl, r6
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	461d      	mov	r5, r3
 8004986:	f04f 0600 	mov.w	r6, #0
 800498a:	196b      	adds	r3, r5, r5
 800498c:	eb46 0406 	adc.w	r4, r6, r6
 8004990:	461a      	mov	r2, r3
 8004992:	4623      	mov	r3, r4
 8004994:	f7fc f932 	bl	8000bfc <__aeabi_uldivmod>
 8004998:	4603      	mov	r3, r0
 800499a:	460c      	mov	r4, r1
 800499c:	461a      	mov	r2, r3
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <UART_SetConfig+0x384>)
 80049a0:	fba3 1302 	umull	r1, r3, r3, r2
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	2164      	movs	r1, #100	; 0x64
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	3332      	adds	r3, #50	; 0x32
 80049b2:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <UART_SetConfig+0x384>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	f003 0207 	and.w	r2, r3, #7
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4442      	add	r2, r8
 80049c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049c6:	e1b2      	b.n	8004d2e <UART_SetConfig+0x6e2>
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40011400 	.word	0x40011400
 80049d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4ad7      	ldr	r2, [pc, #860]	; (8004d38 <UART_SetConfig+0x6ec>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d005      	beq.n	80049ea <UART_SetConfig+0x39e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4ad6      	ldr	r2, [pc, #856]	; (8004d3c <UART_SetConfig+0x6f0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	f040 80d1 	bne.w	8004b8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ea:	f7fe ff5b 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 80049ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	469a      	mov	sl, r3
 80049f4:	f04f 0b00 	mov.w	fp, #0
 80049f8:	46d0      	mov	r8, sl
 80049fa:	46d9      	mov	r9, fp
 80049fc:	eb18 0308 	adds.w	r3, r8, r8
 8004a00:	eb49 0409 	adc.w	r4, r9, r9
 8004a04:	4698      	mov	r8, r3
 8004a06:	46a1      	mov	r9, r4
 8004a08:	eb18 080a 	adds.w	r8, r8, sl
 8004a0c:	eb49 090b 	adc.w	r9, r9, fp
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a24:	4688      	mov	r8, r1
 8004a26:	4691      	mov	r9, r2
 8004a28:	eb1a 0508 	adds.w	r5, sl, r8
 8004a2c:	eb4b 0609 	adc.w	r6, fp, r9
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4619      	mov	r1, r3
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f04f 0400 	mov.w	r4, #0
 8004a42:	0094      	lsls	r4, r2, #2
 8004a44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a48:	008b      	lsls	r3, r1, #2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4631      	mov	r1, r6
 8004a52:	f7fc f8d3 	bl	8000bfc <__aeabi_uldivmod>
 8004a56:	4603      	mov	r3, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4bb8      	ldr	r3, [pc, #736]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	469b      	mov	fp, r3
 8004a6c:	f04f 0c00 	mov.w	ip, #0
 8004a70:	46d9      	mov	r9, fp
 8004a72:	46e2      	mov	sl, ip
 8004a74:	eb19 0309 	adds.w	r3, r9, r9
 8004a78:	eb4a 040a 	adc.w	r4, sl, sl
 8004a7c:	4699      	mov	r9, r3
 8004a7e:	46a2      	mov	sl, r4
 8004a80:	eb19 090b 	adds.w	r9, r9, fp
 8004a84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a9c:	4689      	mov	r9, r1
 8004a9e:	4692      	mov	sl, r2
 8004aa0:	eb1b 0509 	adds.w	r5, fp, r9
 8004aa4:	eb4c 060a 	adc.w	r6, ip, sl
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	0094      	lsls	r4, r2, #2
 8004abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac0:	008b      	lsls	r3, r1, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	4631      	mov	r1, r6
 8004aca:	f7fc f897 	bl	8000bfc <__aeabi_uldivmod>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b9a      	ldr	r3, [pc, #616]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2164      	movs	r1, #100	; 0x64
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	3332      	adds	r3, #50	; 0x32
 8004ae8:	4a95      	ldr	r2, [pc, #596]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af4:	4498      	add	r8, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	469b      	mov	fp, r3
 8004afa:	f04f 0c00 	mov.w	ip, #0
 8004afe:	46d9      	mov	r9, fp
 8004b00:	46e2      	mov	sl, ip
 8004b02:	eb19 0309 	adds.w	r3, r9, r9
 8004b06:	eb4a 040a 	adc.w	r4, sl, sl
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	46a2      	mov	sl, r4
 8004b0e:	eb19 090b 	adds.w	r9, r9, fp
 8004b12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b2a:	4689      	mov	r9, r1
 8004b2c:	4692      	mov	sl, r2
 8004b2e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b32:	eb4c 060a 	adc.w	r6, ip, sl
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	0094      	lsls	r4, r2, #2
 8004b4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b4e:	008b      	lsls	r3, r1, #2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	4631      	mov	r1, r6
 8004b58:	f7fc f850 	bl	8000bfc <__aeabi_uldivmod>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	461a      	mov	r2, r3
 8004b62:	4b77      	ldr	r3, [pc, #476]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004b64:	fba3 1302 	umull	r1, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	2164      	movs	r1, #100	; 0x64
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	3332      	adds	r3, #50	; 0x32
 8004b76:	4a72      	ldr	r2, [pc, #456]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4442      	add	r2, r8
 8004b88:	609a      	str	r2, [r3, #8]
 8004b8a:	e0d0      	b.n	8004d2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8c:	f7fe fe76 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8004b90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	469a      	mov	sl, r3
 8004b96:	f04f 0b00 	mov.w	fp, #0
 8004b9a:	46d0      	mov	r8, sl
 8004b9c:	46d9      	mov	r9, fp
 8004b9e:	eb18 0308 	adds.w	r3, r8, r8
 8004ba2:	eb49 0409 	adc.w	r4, r9, r9
 8004ba6:	4698      	mov	r8, r3
 8004ba8:	46a1      	mov	r9, r4
 8004baa:	eb18 080a 	adds.w	r8, r8, sl
 8004bae:	eb49 090b 	adc.w	r9, r9, fp
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	4691      	mov	r9, r2
 8004bca:	eb1a 0508 	adds.w	r5, sl, r8
 8004bce:	eb4b 0609 	adc.w	r6, fp, r9
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	0094      	lsls	r4, r2, #2
 8004be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	f7fc f802 	bl	8000bfc <__aeabi_uldivmod>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004c00:	fba3 2302 	umull	r2, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	469b      	mov	fp, r3
 8004c0e:	f04f 0c00 	mov.w	ip, #0
 8004c12:	46d9      	mov	r9, fp
 8004c14:	46e2      	mov	sl, ip
 8004c16:	eb19 0309 	adds.w	r3, r9, r9
 8004c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c1e:	4699      	mov	r9, r3
 8004c20:	46a2      	mov	sl, r4
 8004c22:	eb19 090b 	adds.w	r9, r9, fp
 8004c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c3e:	4689      	mov	r9, r1
 8004c40:	4692      	mov	sl, r2
 8004c42:	eb1b 0509 	adds.w	r5, fp, r9
 8004c46:	eb4c 060a 	adc.w	r6, ip, sl
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	0094      	lsls	r4, r2, #2
 8004c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	f7fb ffc6 	bl	8000bfc <__aeabi_uldivmod>
 8004c70:	4603      	mov	r3, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a2d      	ldr	r2, [pc, #180]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c96:	4498      	add	r8, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	469b      	mov	fp, r3
 8004c9c:	f04f 0c00 	mov.w	ip, #0
 8004ca0:	46d9      	mov	r9, fp
 8004ca2:	46e2      	mov	sl, ip
 8004ca4:	eb19 0309 	adds.w	r3, r9, r9
 8004ca8:	eb4a 040a 	adc.w	r4, sl, sl
 8004cac:	4699      	mov	r9, r3
 8004cae:	46a2      	mov	sl, r4
 8004cb0:	eb19 090b 	adds.w	r9, r9, fp
 8004cb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ccc:	4689      	mov	r9, r1
 8004cce:	4692      	mov	sl, r2
 8004cd0:	eb1b 0509 	adds.w	r5, fp, r9
 8004cd4:	eb4c 060a 	adc.w	r6, ip, sl
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	f04f 0400 	mov.w	r4, #0
 8004cea:	0094      	lsls	r4, r2, #2
 8004cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf0:	008b      	lsls	r3, r1, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	f7fb ff7f 	bl	8000bfc <__aeabi_uldivmod>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004d06:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2164      	movs	r1, #100	; 0x64
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	3332      	adds	r3, #50	; 0x32
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <UART_SetConfig+0x6f4>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4442      	add	r2, r8
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	e7ff      	b.n	8004d2e <UART_SetConfig+0x6e2>
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d38:	40011000 	.word	0x40011000
 8004d3c:	40011400 	.word	0x40011400
 8004d40:	51eb851f 	.word	0x51eb851f

08004d44 <__errno>:
 8004d44:	4b01      	ldr	r3, [pc, #4]	; (8004d4c <__errno+0x8>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000010 	.word	0x20000010

08004d50 <__libc_init_array>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4e0d      	ldr	r6, [pc, #52]	; (8004d88 <__libc_init_array+0x38>)
 8004d54:	4c0d      	ldr	r4, [pc, #52]	; (8004d8c <__libc_init_array+0x3c>)
 8004d56:	1ba4      	subs	r4, r4, r6
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	42a5      	cmp	r5, r4
 8004d5e:	d109      	bne.n	8004d74 <__libc_init_array+0x24>
 8004d60:	4e0b      	ldr	r6, [pc, #44]	; (8004d90 <__libc_init_array+0x40>)
 8004d62:	4c0c      	ldr	r4, [pc, #48]	; (8004d94 <__libc_init_array+0x44>)
 8004d64:	f001 fc4a 	bl	80065fc <_init>
 8004d68:	1ba4      	subs	r4, r4, r6
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	42a5      	cmp	r5, r4
 8004d70:	d105      	bne.n	8004d7e <__libc_init_array+0x2e>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d78:	4798      	blx	r3
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	e7ee      	b.n	8004d5c <__libc_init_array+0xc>
 8004d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d82:	4798      	blx	r3
 8004d84:	3501      	adds	r5, #1
 8004d86:	e7f2      	b.n	8004d6e <__libc_init_array+0x1e>
 8004d88:	080068c0 	.word	0x080068c0
 8004d8c:	080068c0 	.word	0x080068c0
 8004d90:	080068c0 	.word	0x080068c0
 8004d94:	080068c4 	.word	0x080068c4

08004d98 <memcmp>:
 8004d98:	b530      	push	{r4, r5, lr}
 8004d9a:	2400      	movs	r4, #0
 8004d9c:	42a2      	cmp	r2, r4
 8004d9e:	d101      	bne.n	8004da4 <memcmp+0xc>
 8004da0:	2000      	movs	r0, #0
 8004da2:	e007      	b.n	8004db4 <memcmp+0x1c>
 8004da4:	5d03      	ldrb	r3, [r0, r4]
 8004da6:	3401      	adds	r4, #1
 8004da8:	190d      	adds	r5, r1, r4
 8004daa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004dae:	42ab      	cmp	r3, r5
 8004db0:	d0f4      	beq.n	8004d9c <memcmp+0x4>
 8004db2:	1b58      	subs	r0, r3, r5
 8004db4:	bd30      	pop	{r4, r5, pc}

08004db6 <memcpy>:
 8004db6:	b510      	push	{r4, lr}
 8004db8:	1e43      	subs	r3, r0, #1
 8004dba:	440a      	add	r2, r1
 8004dbc:	4291      	cmp	r1, r2
 8004dbe:	d100      	bne.n	8004dc2 <memcpy+0xc>
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dca:	e7f7      	b.n	8004dbc <memcpy+0x6>

08004dcc <memset>:
 8004dcc:	4402      	add	r2, r0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d100      	bne.n	8004dd6 <memset+0xa>
 8004dd4:	4770      	bx	lr
 8004dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dda:	e7f9      	b.n	8004dd0 <memset+0x4>

08004ddc <_vsiprintf_r>:
 8004ddc:	b500      	push	{lr}
 8004dde:	b09b      	sub	sp, #108	; 0x6c
 8004de0:	9100      	str	r1, [sp, #0]
 8004de2:	9104      	str	r1, [sp, #16]
 8004de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	9102      	str	r1, [sp, #8]
 8004dec:	4905      	ldr	r1, [pc, #20]	; (8004e04 <_vsiprintf_r+0x28>)
 8004dee:	9103      	str	r1, [sp, #12]
 8004df0:	4669      	mov	r1, sp
 8004df2:	f000 f86d 	bl	8004ed0 <_svfiprintf_r>
 8004df6:	9b00      	ldr	r3, [sp, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	b01b      	add	sp, #108	; 0x6c
 8004dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e02:	bf00      	nop
 8004e04:	ffff0208 	.word	0xffff0208

08004e08 <vsiprintf>:
 8004e08:	4613      	mov	r3, r2
 8004e0a:	460a      	mov	r2, r1
 8004e0c:	4601      	mov	r1, r0
 8004e0e:	4802      	ldr	r0, [pc, #8]	; (8004e18 <vsiprintf+0x10>)
 8004e10:	6800      	ldr	r0, [r0, #0]
 8004e12:	f7ff bfe3 	b.w	8004ddc <_vsiprintf_r>
 8004e16:	bf00      	nop
 8004e18:	20000010 	.word	0x20000010

08004e1c <__ssputs_r>:
 8004e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	688e      	ldr	r6, [r1, #8]
 8004e22:	429e      	cmp	r6, r3
 8004e24:	4682      	mov	sl, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4690      	mov	r8, r2
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	d837      	bhi.n	8004e9e <__ssputs_r+0x82>
 8004e2e:	898a      	ldrh	r2, [r1, #12]
 8004e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e34:	d031      	beq.n	8004e9a <__ssputs_r+0x7e>
 8004e36:	6825      	ldr	r5, [r4, #0]
 8004e38:	6909      	ldr	r1, [r1, #16]
 8004e3a:	1a6f      	subs	r7, r5, r1
 8004e3c:	6965      	ldr	r5, [r4, #20]
 8004e3e:	2302      	movs	r3, #2
 8004e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e44:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e48:	f109 0301 	add.w	r3, r9, #1
 8004e4c:	443b      	add	r3, r7
 8004e4e:	429d      	cmp	r5, r3
 8004e50:	bf38      	it	cc
 8004e52:	461d      	movcc	r5, r3
 8004e54:	0553      	lsls	r3, r2, #21
 8004e56:	d530      	bpl.n	8004eba <__ssputs_r+0x9e>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f000 fb21 	bl	80054a0 <_malloc_r>
 8004e5e:	4606      	mov	r6, r0
 8004e60:	b950      	cbnz	r0, 8004e78 <__ssputs_r+0x5c>
 8004e62:	230c      	movs	r3, #12
 8004e64:	f8ca 3000 	str.w	r3, [sl]
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e78:	463a      	mov	r2, r7
 8004e7a:	6921      	ldr	r1, [r4, #16]
 8004e7c:	f7ff ff9b 	bl	8004db6 <memcpy>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	6126      	str	r6, [r4, #16]
 8004e8e:	6165      	str	r5, [r4, #20]
 8004e90:	443e      	add	r6, r7
 8004e92:	1bed      	subs	r5, r5, r7
 8004e94:	6026      	str	r6, [r4, #0]
 8004e96:	60a5      	str	r5, [r4, #8]
 8004e98:	464e      	mov	r6, r9
 8004e9a:	454e      	cmp	r6, r9
 8004e9c:	d900      	bls.n	8004ea0 <__ssputs_r+0x84>
 8004e9e:	464e      	mov	r6, r9
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	f000 fa93 	bl	80053d0 <memmove>
 8004eaa:	68a3      	ldr	r3, [r4, #8]
 8004eac:	1b9b      	subs	r3, r3, r6
 8004eae:	60a3      	str	r3, [r4, #8]
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	441e      	add	r6, r3
 8004eb4:	6026      	str	r6, [r4, #0]
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	e7dc      	b.n	8004e74 <__ssputs_r+0x58>
 8004eba:	462a      	mov	r2, r5
 8004ebc:	f000 fb4a 	bl	8005554 <_realloc_r>
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d1e2      	bne.n	8004e8c <__ssputs_r+0x70>
 8004ec6:	6921      	ldr	r1, [r4, #16]
 8004ec8:	4650      	mov	r0, sl
 8004eca:	f000 fa9b 	bl	8005404 <_free_r>
 8004ece:	e7c8      	b.n	8004e62 <__ssputs_r+0x46>

08004ed0 <_svfiprintf_r>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	461d      	mov	r5, r3
 8004ed6:	898b      	ldrh	r3, [r1, #12]
 8004ed8:	061f      	lsls	r7, r3, #24
 8004eda:	b09d      	sub	sp, #116	; 0x74
 8004edc:	4680      	mov	r8, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	d50f      	bpl.n	8004f04 <_svfiprintf_r+0x34>
 8004ee4:	690b      	ldr	r3, [r1, #16]
 8004ee6:	b96b      	cbnz	r3, 8004f04 <_svfiprintf_r+0x34>
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	f000 fad9 	bl	80054a0 <_malloc_r>
 8004eee:	6020      	str	r0, [r4, #0]
 8004ef0:	6120      	str	r0, [r4, #16]
 8004ef2:	b928      	cbnz	r0, 8004f00 <_svfiprintf_r+0x30>
 8004ef4:	230c      	movs	r3, #12
 8004ef6:	f8c8 3000 	str.w	r3, [r8]
 8004efa:	f04f 30ff 	mov.w	r0, #4294967295
 8004efe:	e0c8      	b.n	8005092 <_svfiprintf_r+0x1c2>
 8004f00:	2340      	movs	r3, #64	; 0x40
 8004f02:	6163      	str	r3, [r4, #20]
 8004f04:	2300      	movs	r3, #0
 8004f06:	9309      	str	r3, [sp, #36]	; 0x24
 8004f08:	2320      	movs	r3, #32
 8004f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f0e:	2330      	movs	r3, #48	; 0x30
 8004f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f14:	9503      	str	r5, [sp, #12]
 8004f16:	f04f 0b01 	mov.w	fp, #1
 8004f1a:	4637      	mov	r7, r6
 8004f1c:	463d      	mov	r5, r7
 8004f1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f22:	b10b      	cbz	r3, 8004f28 <_svfiprintf_r+0x58>
 8004f24:	2b25      	cmp	r3, #37	; 0x25
 8004f26:	d13e      	bne.n	8004fa6 <_svfiprintf_r+0xd6>
 8004f28:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f2c:	d00b      	beq.n	8004f46 <_svfiprintf_r+0x76>
 8004f2e:	4653      	mov	r3, sl
 8004f30:	4632      	mov	r2, r6
 8004f32:	4621      	mov	r1, r4
 8004f34:	4640      	mov	r0, r8
 8004f36:	f7ff ff71 	bl	8004e1c <__ssputs_r>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f000 80a4 	beq.w	8005088 <_svfiprintf_r+0x1b8>
 8004f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f42:	4453      	add	r3, sl
 8004f44:	9309      	str	r3, [sp, #36]	; 0x24
 8004f46:	783b      	ldrb	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 809d 	beq.w	8005088 <_svfiprintf_r+0x1b8>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	9307      	str	r3, [sp, #28]
 8004f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f60:	931a      	str	r3, [sp, #104]	; 0x68
 8004f62:	462f      	mov	r7, r5
 8004f64:	2205      	movs	r2, #5
 8004f66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f6a:	4850      	ldr	r0, [pc, #320]	; (80050ac <_svfiprintf_r+0x1dc>)
 8004f6c:	f7fb f958 	bl	8000220 <memchr>
 8004f70:	9b04      	ldr	r3, [sp, #16]
 8004f72:	b9d0      	cbnz	r0, 8004faa <_svfiprintf_r+0xda>
 8004f74:	06d9      	lsls	r1, r3, #27
 8004f76:	bf44      	itt	mi
 8004f78:	2220      	movmi	r2, #32
 8004f7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f7e:	071a      	lsls	r2, r3, #28
 8004f80:	bf44      	itt	mi
 8004f82:	222b      	movmi	r2, #43	; 0x2b
 8004f84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f88:	782a      	ldrb	r2, [r5, #0]
 8004f8a:	2a2a      	cmp	r2, #42	; 0x2a
 8004f8c:	d015      	beq.n	8004fba <_svfiprintf_r+0xea>
 8004f8e:	9a07      	ldr	r2, [sp, #28]
 8004f90:	462f      	mov	r7, r5
 8004f92:	2000      	movs	r0, #0
 8004f94:	250a      	movs	r5, #10
 8004f96:	4639      	mov	r1, r7
 8004f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f9c:	3b30      	subs	r3, #48	; 0x30
 8004f9e:	2b09      	cmp	r3, #9
 8004fa0:	d94d      	bls.n	800503e <_svfiprintf_r+0x16e>
 8004fa2:	b1b8      	cbz	r0, 8004fd4 <_svfiprintf_r+0x104>
 8004fa4:	e00f      	b.n	8004fc6 <_svfiprintf_r+0xf6>
 8004fa6:	462f      	mov	r7, r5
 8004fa8:	e7b8      	b.n	8004f1c <_svfiprintf_r+0x4c>
 8004faa:	4a40      	ldr	r2, [pc, #256]	; (80050ac <_svfiprintf_r+0x1dc>)
 8004fac:	1a80      	subs	r0, r0, r2
 8004fae:	fa0b f000 	lsl.w	r0, fp, r0
 8004fb2:	4318      	orrs	r0, r3
 8004fb4:	9004      	str	r0, [sp, #16]
 8004fb6:	463d      	mov	r5, r7
 8004fb8:	e7d3      	b.n	8004f62 <_svfiprintf_r+0x92>
 8004fba:	9a03      	ldr	r2, [sp, #12]
 8004fbc:	1d11      	adds	r1, r2, #4
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	9103      	str	r1, [sp, #12]
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	db01      	blt.n	8004fca <_svfiprintf_r+0xfa>
 8004fc6:	9207      	str	r2, [sp, #28]
 8004fc8:	e004      	b.n	8004fd4 <_svfiprintf_r+0x104>
 8004fca:	4252      	negs	r2, r2
 8004fcc:	f043 0302 	orr.w	r3, r3, #2
 8004fd0:	9207      	str	r2, [sp, #28]
 8004fd2:	9304      	str	r3, [sp, #16]
 8004fd4:	783b      	ldrb	r3, [r7, #0]
 8004fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd8:	d10c      	bne.n	8004ff4 <_svfiprintf_r+0x124>
 8004fda:	787b      	ldrb	r3, [r7, #1]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d133      	bne.n	8005048 <_svfiprintf_r+0x178>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bfb8      	it	lt
 8004fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ff0:	3702      	adds	r7, #2
 8004ff2:	9305      	str	r3, [sp, #20]
 8004ff4:	4d2e      	ldr	r5, [pc, #184]	; (80050b0 <_svfiprintf_r+0x1e0>)
 8004ff6:	7839      	ldrb	r1, [r7, #0]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f7fb f910 	bl	8000220 <memchr>
 8005000:	b138      	cbz	r0, 8005012 <_svfiprintf_r+0x142>
 8005002:	2340      	movs	r3, #64	; 0x40
 8005004:	1b40      	subs	r0, r0, r5
 8005006:	fa03 f000 	lsl.w	r0, r3, r0
 800500a:	9b04      	ldr	r3, [sp, #16]
 800500c:	4303      	orrs	r3, r0
 800500e:	3701      	adds	r7, #1
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	7839      	ldrb	r1, [r7, #0]
 8005014:	4827      	ldr	r0, [pc, #156]	; (80050b4 <_svfiprintf_r+0x1e4>)
 8005016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800501a:	2206      	movs	r2, #6
 800501c:	1c7e      	adds	r6, r7, #1
 800501e:	f7fb f8ff 	bl	8000220 <memchr>
 8005022:	2800      	cmp	r0, #0
 8005024:	d038      	beq.n	8005098 <_svfiprintf_r+0x1c8>
 8005026:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <_svfiprintf_r+0x1e8>)
 8005028:	bb13      	cbnz	r3, 8005070 <_svfiprintf_r+0x1a0>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	3307      	adds	r3, #7
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	3308      	adds	r3, #8
 8005034:	9303      	str	r3, [sp, #12]
 8005036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005038:	444b      	add	r3, r9
 800503a:	9309      	str	r3, [sp, #36]	; 0x24
 800503c:	e76d      	b.n	8004f1a <_svfiprintf_r+0x4a>
 800503e:	fb05 3202 	mla	r2, r5, r2, r3
 8005042:	2001      	movs	r0, #1
 8005044:	460f      	mov	r7, r1
 8005046:	e7a6      	b.n	8004f96 <_svfiprintf_r+0xc6>
 8005048:	2300      	movs	r3, #0
 800504a:	3701      	adds	r7, #1
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	4619      	mov	r1, r3
 8005050:	250a      	movs	r5, #10
 8005052:	4638      	mov	r0, r7
 8005054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005058:	3a30      	subs	r2, #48	; 0x30
 800505a:	2a09      	cmp	r2, #9
 800505c:	d903      	bls.n	8005066 <_svfiprintf_r+0x196>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c8      	beq.n	8004ff4 <_svfiprintf_r+0x124>
 8005062:	9105      	str	r1, [sp, #20]
 8005064:	e7c6      	b.n	8004ff4 <_svfiprintf_r+0x124>
 8005066:	fb05 2101 	mla	r1, r5, r1, r2
 800506a:	2301      	movs	r3, #1
 800506c:	4607      	mov	r7, r0
 800506e:	e7f0      	b.n	8005052 <_svfiprintf_r+0x182>
 8005070:	ab03      	add	r3, sp, #12
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4622      	mov	r2, r4
 8005076:	4b11      	ldr	r3, [pc, #68]	; (80050bc <_svfiprintf_r+0x1ec>)
 8005078:	a904      	add	r1, sp, #16
 800507a:	4640      	mov	r0, r8
 800507c:	f3af 8000 	nop.w
 8005080:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005084:	4681      	mov	r9, r0
 8005086:	d1d6      	bne.n	8005036 <_svfiprintf_r+0x166>
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	065b      	lsls	r3, r3, #25
 800508c:	f53f af35 	bmi.w	8004efa <_svfiprintf_r+0x2a>
 8005090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005092:	b01d      	add	sp, #116	; 0x74
 8005094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005098:	ab03      	add	r3, sp, #12
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	4622      	mov	r2, r4
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <_svfiprintf_r+0x1ec>)
 80050a0:	a904      	add	r1, sp, #16
 80050a2:	4640      	mov	r0, r8
 80050a4:	f000 f882 	bl	80051ac <_printf_i>
 80050a8:	e7ea      	b.n	8005080 <_svfiprintf_r+0x1b0>
 80050aa:	bf00      	nop
 80050ac:	080066ac 	.word	0x080066ac
 80050b0:	080066b2 	.word	0x080066b2
 80050b4:	080066b6 	.word	0x080066b6
 80050b8:	00000000 	.word	0x00000000
 80050bc:	08004e1d 	.word	0x08004e1d

080050c0 <_printf_common>:
 80050c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c4:	4691      	mov	r9, r2
 80050c6:	461f      	mov	r7, r3
 80050c8:	688a      	ldr	r2, [r1, #8]
 80050ca:	690b      	ldr	r3, [r1, #16]
 80050cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	bfb8      	it	lt
 80050d4:	4613      	movlt	r3, r2
 80050d6:	f8c9 3000 	str.w	r3, [r9]
 80050da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050de:	4606      	mov	r6, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	b112      	cbz	r2, 80050ea <_printf_common+0x2a>
 80050e4:	3301      	adds	r3, #1
 80050e6:	f8c9 3000 	str.w	r3, [r9]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	0699      	lsls	r1, r3, #26
 80050ee:	bf42      	ittt	mi
 80050f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050f4:	3302      	addmi	r3, #2
 80050f6:	f8c9 3000 	strmi.w	r3, [r9]
 80050fa:	6825      	ldr	r5, [r4, #0]
 80050fc:	f015 0506 	ands.w	r5, r5, #6
 8005100:	d107      	bne.n	8005112 <_printf_common+0x52>
 8005102:	f104 0a19 	add.w	sl, r4, #25
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	f8d9 2000 	ldr.w	r2, [r9]
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	42ab      	cmp	r3, r5
 8005110:	dc28      	bgt.n	8005164 <_printf_common+0xa4>
 8005112:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	3300      	adds	r3, #0
 800511a:	bf18      	it	ne
 800511c:	2301      	movne	r3, #1
 800511e:	0692      	lsls	r2, r2, #26
 8005120:	d42d      	bmi.n	800517e <_printf_common+0xbe>
 8005122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005126:	4639      	mov	r1, r7
 8005128:	4630      	mov	r0, r6
 800512a:	47c0      	blx	r8
 800512c:	3001      	adds	r0, #1
 800512e:	d020      	beq.n	8005172 <_printf_common+0xb2>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	68e5      	ldr	r5, [r4, #12]
 8005134:	f8d9 2000 	ldr.w	r2, [r9]
 8005138:	f003 0306 	and.w	r3, r3, #6
 800513c:	2b04      	cmp	r3, #4
 800513e:	bf08      	it	eq
 8005140:	1aad      	subeq	r5, r5, r2
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	6922      	ldr	r2, [r4, #16]
 8005146:	bf0c      	ite	eq
 8005148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800514c:	2500      	movne	r5, #0
 800514e:	4293      	cmp	r3, r2
 8005150:	bfc4      	itt	gt
 8005152:	1a9b      	subgt	r3, r3, r2
 8005154:	18ed      	addgt	r5, r5, r3
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	341a      	adds	r4, #26
 800515c:	454d      	cmp	r5, r9
 800515e:	d11a      	bne.n	8005196 <_printf_common+0xd6>
 8005160:	2000      	movs	r0, #0
 8005162:	e008      	b.n	8005176 <_printf_common+0xb6>
 8005164:	2301      	movs	r3, #1
 8005166:	4652      	mov	r2, sl
 8005168:	4639      	mov	r1, r7
 800516a:	4630      	mov	r0, r6
 800516c:	47c0      	blx	r8
 800516e:	3001      	adds	r0, #1
 8005170:	d103      	bne.n	800517a <_printf_common+0xba>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517a:	3501      	adds	r5, #1
 800517c:	e7c3      	b.n	8005106 <_printf_common+0x46>
 800517e:	18e1      	adds	r1, r4, r3
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	2030      	movs	r0, #48	; 0x30
 8005184:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005188:	4422      	add	r2, r4
 800518a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800518e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005192:	3302      	adds	r3, #2
 8005194:	e7c5      	b.n	8005122 <_printf_common+0x62>
 8005196:	2301      	movs	r3, #1
 8005198:	4622      	mov	r2, r4
 800519a:	4639      	mov	r1, r7
 800519c:	4630      	mov	r0, r6
 800519e:	47c0      	blx	r8
 80051a0:	3001      	adds	r0, #1
 80051a2:	d0e6      	beq.n	8005172 <_printf_common+0xb2>
 80051a4:	f109 0901 	add.w	r9, r9, #1
 80051a8:	e7d8      	b.n	800515c <_printf_common+0x9c>
	...

080051ac <_printf_i>:
 80051ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051b4:	460c      	mov	r4, r1
 80051b6:	7e09      	ldrb	r1, [r1, #24]
 80051b8:	b085      	sub	sp, #20
 80051ba:	296e      	cmp	r1, #110	; 0x6e
 80051bc:	4617      	mov	r7, r2
 80051be:	4606      	mov	r6, r0
 80051c0:	4698      	mov	r8, r3
 80051c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051c4:	f000 80b3 	beq.w	800532e <_printf_i+0x182>
 80051c8:	d822      	bhi.n	8005210 <_printf_i+0x64>
 80051ca:	2963      	cmp	r1, #99	; 0x63
 80051cc:	d036      	beq.n	800523c <_printf_i+0x90>
 80051ce:	d80a      	bhi.n	80051e6 <_printf_i+0x3a>
 80051d0:	2900      	cmp	r1, #0
 80051d2:	f000 80b9 	beq.w	8005348 <_printf_i+0x19c>
 80051d6:	2958      	cmp	r1, #88	; 0x58
 80051d8:	f000 8083 	beq.w	80052e2 <_printf_i+0x136>
 80051dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051e4:	e032      	b.n	800524c <_printf_i+0xa0>
 80051e6:	2964      	cmp	r1, #100	; 0x64
 80051e8:	d001      	beq.n	80051ee <_printf_i+0x42>
 80051ea:	2969      	cmp	r1, #105	; 0x69
 80051ec:	d1f6      	bne.n	80051dc <_printf_i+0x30>
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	6813      	ldr	r3, [r2, #0]
 80051f2:	0605      	lsls	r5, r0, #24
 80051f4:	f103 0104 	add.w	r1, r3, #4
 80051f8:	d52a      	bpl.n	8005250 <_printf_i+0xa4>
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da03      	bge.n	800520a <_printf_i+0x5e>
 8005202:	222d      	movs	r2, #45	; 0x2d
 8005204:	425b      	negs	r3, r3
 8005206:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800520a:	486f      	ldr	r0, [pc, #444]	; (80053c8 <_printf_i+0x21c>)
 800520c:	220a      	movs	r2, #10
 800520e:	e039      	b.n	8005284 <_printf_i+0xd8>
 8005210:	2973      	cmp	r1, #115	; 0x73
 8005212:	f000 809d 	beq.w	8005350 <_printf_i+0x1a4>
 8005216:	d808      	bhi.n	800522a <_printf_i+0x7e>
 8005218:	296f      	cmp	r1, #111	; 0x6f
 800521a:	d020      	beq.n	800525e <_printf_i+0xb2>
 800521c:	2970      	cmp	r1, #112	; 0x70
 800521e:	d1dd      	bne.n	80051dc <_printf_i+0x30>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	f043 0320 	orr.w	r3, r3, #32
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	e003      	b.n	8005232 <_printf_i+0x86>
 800522a:	2975      	cmp	r1, #117	; 0x75
 800522c:	d017      	beq.n	800525e <_printf_i+0xb2>
 800522e:	2978      	cmp	r1, #120	; 0x78
 8005230:	d1d4      	bne.n	80051dc <_printf_i+0x30>
 8005232:	2378      	movs	r3, #120	; 0x78
 8005234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005238:	4864      	ldr	r0, [pc, #400]	; (80053cc <_printf_i+0x220>)
 800523a:	e055      	b.n	80052e8 <_printf_i+0x13c>
 800523c:	6813      	ldr	r3, [r2, #0]
 800523e:	1d19      	adds	r1, r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6011      	str	r1, [r2, #0]
 8005244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800524c:	2301      	movs	r3, #1
 800524e:	e08c      	b.n	800536a <_printf_i+0x1be>
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6011      	str	r1, [r2, #0]
 8005254:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005258:	bf18      	it	ne
 800525a:	b21b      	sxthne	r3, r3
 800525c:	e7cf      	b.n	80051fe <_printf_i+0x52>
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	6825      	ldr	r5, [r4, #0]
 8005262:	1d18      	adds	r0, r3, #4
 8005264:	6010      	str	r0, [r2, #0]
 8005266:	0628      	lsls	r0, r5, #24
 8005268:	d501      	bpl.n	800526e <_printf_i+0xc2>
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	e002      	b.n	8005274 <_printf_i+0xc8>
 800526e:	0668      	lsls	r0, r5, #25
 8005270:	d5fb      	bpl.n	800526a <_printf_i+0xbe>
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	4854      	ldr	r0, [pc, #336]	; (80053c8 <_printf_i+0x21c>)
 8005276:	296f      	cmp	r1, #111	; 0x6f
 8005278:	bf14      	ite	ne
 800527a:	220a      	movne	r2, #10
 800527c:	2208      	moveq	r2, #8
 800527e:	2100      	movs	r1, #0
 8005280:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005284:	6865      	ldr	r5, [r4, #4]
 8005286:	60a5      	str	r5, [r4, #8]
 8005288:	2d00      	cmp	r5, #0
 800528a:	f2c0 8095 	blt.w	80053b8 <_printf_i+0x20c>
 800528e:	6821      	ldr	r1, [r4, #0]
 8005290:	f021 0104 	bic.w	r1, r1, #4
 8005294:	6021      	str	r1, [r4, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d13d      	bne.n	8005316 <_printf_i+0x16a>
 800529a:	2d00      	cmp	r5, #0
 800529c:	f040 808e 	bne.w	80053bc <_printf_i+0x210>
 80052a0:	4665      	mov	r5, ip
 80052a2:	2a08      	cmp	r2, #8
 80052a4:	d10b      	bne.n	80052be <_printf_i+0x112>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	07db      	lsls	r3, r3, #31
 80052aa:	d508      	bpl.n	80052be <_printf_i+0x112>
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	bfde      	ittt	le
 80052b4:	2330      	movle	r3, #48	; 0x30
 80052b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052be:	ebac 0305 	sub.w	r3, ip, r5
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	f8cd 8000 	str.w	r8, [sp]
 80052c8:	463b      	mov	r3, r7
 80052ca:	aa03      	add	r2, sp, #12
 80052cc:	4621      	mov	r1, r4
 80052ce:	4630      	mov	r0, r6
 80052d0:	f7ff fef6 	bl	80050c0 <_printf_common>
 80052d4:	3001      	adds	r0, #1
 80052d6:	d14d      	bne.n	8005374 <_printf_i+0x1c8>
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	b005      	add	sp, #20
 80052de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052e2:	4839      	ldr	r0, [pc, #228]	; (80053c8 <_printf_i+0x21c>)
 80052e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	6821      	ldr	r1, [r4, #0]
 80052ec:	1d1d      	adds	r5, r3, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6015      	str	r5, [r2, #0]
 80052f2:	060a      	lsls	r2, r1, #24
 80052f4:	d50b      	bpl.n	800530e <_printf_i+0x162>
 80052f6:	07ca      	lsls	r2, r1, #31
 80052f8:	bf44      	itt	mi
 80052fa:	f041 0120 	orrmi.w	r1, r1, #32
 80052fe:	6021      	strmi	r1, [r4, #0]
 8005300:	b91b      	cbnz	r3, 800530a <_printf_i+0x15e>
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	f022 0220 	bic.w	r2, r2, #32
 8005308:	6022      	str	r2, [r4, #0]
 800530a:	2210      	movs	r2, #16
 800530c:	e7b7      	b.n	800527e <_printf_i+0xd2>
 800530e:	064d      	lsls	r5, r1, #25
 8005310:	bf48      	it	mi
 8005312:	b29b      	uxthmi	r3, r3
 8005314:	e7ef      	b.n	80052f6 <_printf_i+0x14a>
 8005316:	4665      	mov	r5, ip
 8005318:	fbb3 f1f2 	udiv	r1, r3, r2
 800531c:	fb02 3311 	mls	r3, r2, r1, r3
 8005320:	5cc3      	ldrb	r3, [r0, r3]
 8005322:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005326:	460b      	mov	r3, r1
 8005328:	2900      	cmp	r1, #0
 800532a:	d1f5      	bne.n	8005318 <_printf_i+0x16c>
 800532c:	e7b9      	b.n	80052a2 <_printf_i+0xf6>
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	6825      	ldr	r5, [r4, #0]
 8005332:	6961      	ldr	r1, [r4, #20]
 8005334:	1d18      	adds	r0, r3, #4
 8005336:	6010      	str	r0, [r2, #0]
 8005338:	0628      	lsls	r0, r5, #24
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	d501      	bpl.n	8005342 <_printf_i+0x196>
 800533e:	6019      	str	r1, [r3, #0]
 8005340:	e002      	b.n	8005348 <_printf_i+0x19c>
 8005342:	066a      	lsls	r2, r5, #25
 8005344:	d5fb      	bpl.n	800533e <_printf_i+0x192>
 8005346:	8019      	strh	r1, [r3, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	4665      	mov	r5, ip
 800534e:	e7b9      	b.n	80052c4 <_printf_i+0x118>
 8005350:	6813      	ldr	r3, [r2, #0]
 8005352:	1d19      	adds	r1, r3, #4
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	681d      	ldr	r5, [r3, #0]
 8005358:	6862      	ldr	r2, [r4, #4]
 800535a:	2100      	movs	r1, #0
 800535c:	4628      	mov	r0, r5
 800535e:	f7fa ff5f 	bl	8000220 <memchr>
 8005362:	b108      	cbz	r0, 8005368 <_printf_i+0x1bc>
 8005364:	1b40      	subs	r0, r0, r5
 8005366:	6060      	str	r0, [r4, #4]
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005372:	e7a7      	b.n	80052c4 <_printf_i+0x118>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	462a      	mov	r2, r5
 8005378:	4639      	mov	r1, r7
 800537a:	4630      	mov	r0, r6
 800537c:	47c0      	blx	r8
 800537e:	3001      	adds	r0, #1
 8005380:	d0aa      	beq.n	80052d8 <_printf_i+0x12c>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	079b      	lsls	r3, r3, #30
 8005386:	d413      	bmi.n	80053b0 <_printf_i+0x204>
 8005388:	68e0      	ldr	r0, [r4, #12]
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	4298      	cmp	r0, r3
 800538e:	bfb8      	it	lt
 8005390:	4618      	movlt	r0, r3
 8005392:	e7a3      	b.n	80052dc <_printf_i+0x130>
 8005394:	2301      	movs	r3, #1
 8005396:	464a      	mov	r2, r9
 8005398:	4639      	mov	r1, r7
 800539a:	4630      	mov	r0, r6
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d09a      	beq.n	80052d8 <_printf_i+0x12c>
 80053a2:	3501      	adds	r5, #1
 80053a4:	68e3      	ldr	r3, [r4, #12]
 80053a6:	9a03      	ldr	r2, [sp, #12]
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	42ab      	cmp	r3, r5
 80053ac:	dcf2      	bgt.n	8005394 <_printf_i+0x1e8>
 80053ae:	e7eb      	b.n	8005388 <_printf_i+0x1dc>
 80053b0:	2500      	movs	r5, #0
 80053b2:	f104 0919 	add.w	r9, r4, #25
 80053b6:	e7f5      	b.n	80053a4 <_printf_i+0x1f8>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ac      	bne.n	8005316 <_printf_i+0x16a>
 80053bc:	7803      	ldrb	r3, [r0, #0]
 80053be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c6:	e76c      	b.n	80052a2 <_printf_i+0xf6>
 80053c8:	080066bd 	.word	0x080066bd
 80053cc:	080066ce 	.word	0x080066ce

080053d0 <memmove>:
 80053d0:	4288      	cmp	r0, r1
 80053d2:	b510      	push	{r4, lr}
 80053d4:	eb01 0302 	add.w	r3, r1, r2
 80053d8:	d807      	bhi.n	80053ea <memmove+0x1a>
 80053da:	1e42      	subs	r2, r0, #1
 80053dc:	4299      	cmp	r1, r3
 80053de:	d00a      	beq.n	80053f6 <memmove+0x26>
 80053e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053e8:	e7f8      	b.n	80053dc <memmove+0xc>
 80053ea:	4283      	cmp	r3, r0
 80053ec:	d9f5      	bls.n	80053da <memmove+0xa>
 80053ee:	1881      	adds	r1, r0, r2
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	42d3      	cmn	r3, r2
 80053f4:	d100      	bne.n	80053f8 <memmove+0x28>
 80053f6:	bd10      	pop	{r4, pc}
 80053f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005400:	e7f7      	b.n	80053f2 <memmove+0x22>
	...

08005404 <_free_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4605      	mov	r5, r0
 8005408:	2900      	cmp	r1, #0
 800540a:	d045      	beq.n	8005498 <_free_r+0x94>
 800540c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005410:	1f0c      	subs	r4, r1, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bfb8      	it	lt
 8005416:	18e4      	addlt	r4, r4, r3
 8005418:	f000 f8d2 	bl	80055c0 <__malloc_lock>
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <_free_r+0x98>)
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	4610      	mov	r0, r2
 8005422:	b933      	cbnz	r3, 8005432 <_free_r+0x2e>
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	6014      	str	r4, [r2, #0]
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800542e:	f000 b8c8 	b.w	80055c2 <__malloc_unlock>
 8005432:	42a3      	cmp	r3, r4
 8005434:	d90c      	bls.n	8005450 <_free_r+0x4c>
 8005436:	6821      	ldr	r1, [r4, #0]
 8005438:	1862      	adds	r2, r4, r1
 800543a:	4293      	cmp	r3, r2
 800543c:	bf04      	itt	eq
 800543e:	681a      	ldreq	r2, [r3, #0]
 8005440:	685b      	ldreq	r3, [r3, #4]
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	bf04      	itt	eq
 8005446:	1852      	addeq	r2, r2, r1
 8005448:	6022      	streq	r2, [r4, #0]
 800544a:	6004      	str	r4, [r0, #0]
 800544c:	e7ec      	b.n	8005428 <_free_r+0x24>
 800544e:	4613      	mov	r3, r2
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	b10a      	cbz	r2, 8005458 <_free_r+0x54>
 8005454:	42a2      	cmp	r2, r4
 8005456:	d9fa      	bls.n	800544e <_free_r+0x4a>
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	1858      	adds	r0, r3, r1
 800545c:	42a0      	cmp	r0, r4
 800545e:	d10b      	bne.n	8005478 <_free_r+0x74>
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	4401      	add	r1, r0
 8005464:	1858      	adds	r0, r3, r1
 8005466:	4282      	cmp	r2, r0
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	d1dd      	bne.n	8005428 <_free_r+0x24>
 800546c:	6810      	ldr	r0, [r2, #0]
 800546e:	6852      	ldr	r2, [r2, #4]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	4401      	add	r1, r0
 8005474:	6019      	str	r1, [r3, #0]
 8005476:	e7d7      	b.n	8005428 <_free_r+0x24>
 8005478:	d902      	bls.n	8005480 <_free_r+0x7c>
 800547a:	230c      	movs	r3, #12
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	e7d3      	b.n	8005428 <_free_r+0x24>
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	1821      	adds	r1, r4, r0
 8005484:	428a      	cmp	r2, r1
 8005486:	bf04      	itt	eq
 8005488:	6811      	ldreq	r1, [r2, #0]
 800548a:	6852      	ldreq	r2, [r2, #4]
 800548c:	6062      	str	r2, [r4, #4]
 800548e:	bf04      	itt	eq
 8005490:	1809      	addeq	r1, r1, r0
 8005492:	6021      	streq	r1, [r4, #0]
 8005494:	605c      	str	r4, [r3, #4]
 8005496:	e7c7      	b.n	8005428 <_free_r+0x24>
 8005498:	bd38      	pop	{r3, r4, r5, pc}
 800549a:	bf00      	nop
 800549c:	200004d4 	.word	0x200004d4

080054a0 <_malloc_r>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	1ccd      	adds	r5, r1, #3
 80054a4:	f025 0503 	bic.w	r5, r5, #3
 80054a8:	3508      	adds	r5, #8
 80054aa:	2d0c      	cmp	r5, #12
 80054ac:	bf38      	it	cc
 80054ae:	250c      	movcc	r5, #12
 80054b0:	2d00      	cmp	r5, #0
 80054b2:	4606      	mov	r6, r0
 80054b4:	db01      	blt.n	80054ba <_malloc_r+0x1a>
 80054b6:	42a9      	cmp	r1, r5
 80054b8:	d903      	bls.n	80054c2 <_malloc_r+0x22>
 80054ba:	230c      	movs	r3, #12
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	2000      	movs	r0, #0
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	f000 f87d 	bl	80055c0 <__malloc_lock>
 80054c6:	4a21      	ldr	r2, [pc, #132]	; (800554c <_malloc_r+0xac>)
 80054c8:	6814      	ldr	r4, [r2, #0]
 80054ca:	4621      	mov	r1, r4
 80054cc:	b991      	cbnz	r1, 80054f4 <_malloc_r+0x54>
 80054ce:	4c20      	ldr	r4, [pc, #128]	; (8005550 <_malloc_r+0xb0>)
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	b91b      	cbnz	r3, 80054dc <_malloc_r+0x3c>
 80054d4:	4630      	mov	r0, r6
 80054d6:	f000 f863 	bl	80055a0 <_sbrk_r>
 80054da:	6020      	str	r0, [r4, #0]
 80054dc:	4629      	mov	r1, r5
 80054de:	4630      	mov	r0, r6
 80054e0:	f000 f85e 	bl	80055a0 <_sbrk_r>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d124      	bne.n	8005532 <_malloc_r+0x92>
 80054e8:	230c      	movs	r3, #12
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 f868 	bl	80055c2 <__malloc_unlock>
 80054f2:	e7e4      	b.n	80054be <_malloc_r+0x1e>
 80054f4:	680b      	ldr	r3, [r1, #0]
 80054f6:	1b5b      	subs	r3, r3, r5
 80054f8:	d418      	bmi.n	800552c <_malloc_r+0x8c>
 80054fa:	2b0b      	cmp	r3, #11
 80054fc:	d90f      	bls.n	800551e <_malloc_r+0x7e>
 80054fe:	600b      	str	r3, [r1, #0]
 8005500:	50cd      	str	r5, [r1, r3]
 8005502:	18cc      	adds	r4, r1, r3
 8005504:	4630      	mov	r0, r6
 8005506:	f000 f85c 	bl	80055c2 <__malloc_unlock>
 800550a:	f104 000b 	add.w	r0, r4, #11
 800550e:	1d23      	adds	r3, r4, #4
 8005510:	f020 0007 	bic.w	r0, r0, #7
 8005514:	1ac3      	subs	r3, r0, r3
 8005516:	d0d3      	beq.n	80054c0 <_malloc_r+0x20>
 8005518:	425a      	negs	r2, r3
 800551a:	50e2      	str	r2, [r4, r3]
 800551c:	e7d0      	b.n	80054c0 <_malloc_r+0x20>
 800551e:	428c      	cmp	r4, r1
 8005520:	684b      	ldr	r3, [r1, #4]
 8005522:	bf16      	itet	ne
 8005524:	6063      	strne	r3, [r4, #4]
 8005526:	6013      	streq	r3, [r2, #0]
 8005528:	460c      	movne	r4, r1
 800552a:	e7eb      	b.n	8005504 <_malloc_r+0x64>
 800552c:	460c      	mov	r4, r1
 800552e:	6849      	ldr	r1, [r1, #4]
 8005530:	e7cc      	b.n	80054cc <_malloc_r+0x2c>
 8005532:	1cc4      	adds	r4, r0, #3
 8005534:	f024 0403 	bic.w	r4, r4, #3
 8005538:	42a0      	cmp	r0, r4
 800553a:	d005      	beq.n	8005548 <_malloc_r+0xa8>
 800553c:	1a21      	subs	r1, r4, r0
 800553e:	4630      	mov	r0, r6
 8005540:	f000 f82e 	bl	80055a0 <_sbrk_r>
 8005544:	3001      	adds	r0, #1
 8005546:	d0cf      	beq.n	80054e8 <_malloc_r+0x48>
 8005548:	6025      	str	r5, [r4, #0]
 800554a:	e7db      	b.n	8005504 <_malloc_r+0x64>
 800554c:	200004d4 	.word	0x200004d4
 8005550:	200004d8 	.word	0x200004d8

08005554 <_realloc_r>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	4607      	mov	r7, r0
 8005558:	4614      	mov	r4, r2
 800555a:	460e      	mov	r6, r1
 800555c:	b921      	cbnz	r1, 8005568 <_realloc_r+0x14>
 800555e:	4611      	mov	r1, r2
 8005560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005564:	f7ff bf9c 	b.w	80054a0 <_malloc_r>
 8005568:	b922      	cbnz	r2, 8005574 <_realloc_r+0x20>
 800556a:	f7ff ff4b 	bl	8005404 <_free_r>
 800556e:	4625      	mov	r5, r4
 8005570:	4628      	mov	r0, r5
 8005572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005574:	f000 f826 	bl	80055c4 <_malloc_usable_size_r>
 8005578:	42a0      	cmp	r0, r4
 800557a:	d20f      	bcs.n	800559c <_realloc_r+0x48>
 800557c:	4621      	mov	r1, r4
 800557e:	4638      	mov	r0, r7
 8005580:	f7ff ff8e 	bl	80054a0 <_malloc_r>
 8005584:	4605      	mov	r5, r0
 8005586:	2800      	cmp	r0, #0
 8005588:	d0f2      	beq.n	8005570 <_realloc_r+0x1c>
 800558a:	4631      	mov	r1, r6
 800558c:	4622      	mov	r2, r4
 800558e:	f7ff fc12 	bl	8004db6 <memcpy>
 8005592:	4631      	mov	r1, r6
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff ff35 	bl	8005404 <_free_r>
 800559a:	e7e9      	b.n	8005570 <_realloc_r+0x1c>
 800559c:	4635      	mov	r5, r6
 800559e:	e7e7      	b.n	8005570 <_realloc_r+0x1c>

080055a0 <_sbrk_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4c06      	ldr	r4, [pc, #24]	; (80055bc <_sbrk_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4605      	mov	r5, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	f7fc fc14 	bl	8001dd8 <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_sbrk_r+0x1a>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_sbrk_r+0x1a>
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	2000d3c8 	.word	0x2000d3c8

080055c0 <__malloc_lock>:
 80055c0:	4770      	bx	lr

080055c2 <__malloc_unlock>:
 80055c2:	4770      	bx	lr

080055c4 <_malloc_usable_size_r>:
 80055c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c8:	1f18      	subs	r0, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfbc      	itt	lt
 80055ce:	580b      	ldrlt	r3, [r1, r0]
 80055d0:	18c0      	addlt	r0, r0, r3
 80055d2:	4770      	bx	lr
 80055d4:	0000      	movs	r0, r0
	...

080055d8 <sin>:
 80055d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055da:	ec51 0b10 	vmov	r0, r1, d0
 80055de:	4a20      	ldr	r2, [pc, #128]	; (8005660 <sin+0x88>)
 80055e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055e4:	4293      	cmp	r3, r2
 80055e6:	dc07      	bgt.n	80055f8 <sin+0x20>
 80055e8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005658 <sin+0x80>
 80055ec:	2000      	movs	r0, #0
 80055ee:	f000 fe37 	bl	8006260 <__kernel_sin>
 80055f2:	ec51 0b10 	vmov	r0, r1, d0
 80055f6:	e007      	b.n	8005608 <sin+0x30>
 80055f8:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <sin+0x8c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	dd09      	ble.n	8005612 <sin+0x3a>
 80055fe:	ee10 2a10 	vmov	r2, s0
 8005602:	460b      	mov	r3, r1
 8005604:	f7fa fe60 	bl	80002c8 <__aeabi_dsub>
 8005608:	ec41 0b10 	vmov	d0, r0, r1
 800560c:	b005      	add	sp, #20
 800560e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005612:	4668      	mov	r0, sp
 8005614:	f000 f828 	bl	8005668 <__ieee754_rem_pio2>
 8005618:	f000 0003 	and.w	r0, r0, #3
 800561c:	2801      	cmp	r0, #1
 800561e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005622:	ed9d 0b00 	vldr	d0, [sp]
 8005626:	d004      	beq.n	8005632 <sin+0x5a>
 8005628:	2802      	cmp	r0, #2
 800562a:	d005      	beq.n	8005638 <sin+0x60>
 800562c:	b970      	cbnz	r0, 800564c <sin+0x74>
 800562e:	2001      	movs	r0, #1
 8005630:	e7dd      	b.n	80055ee <sin+0x16>
 8005632:	f000 fa0d 	bl	8005a50 <__kernel_cos>
 8005636:	e7dc      	b.n	80055f2 <sin+0x1a>
 8005638:	2001      	movs	r0, #1
 800563a:	f000 fe11 	bl	8006260 <__kernel_sin>
 800563e:	ec53 2b10 	vmov	r2, r3, d0
 8005642:	ee10 0a10 	vmov	r0, s0
 8005646:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800564a:	e7dd      	b.n	8005608 <sin+0x30>
 800564c:	f000 fa00 	bl	8005a50 <__kernel_cos>
 8005650:	e7f5      	b.n	800563e <sin+0x66>
 8005652:	bf00      	nop
 8005654:	f3af 8000 	nop.w
	...
 8005660:	3fe921fb 	.word	0x3fe921fb
 8005664:	7fefffff 	.word	0x7fefffff

08005668 <__ieee754_rem_pio2>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	ec57 6b10 	vmov	r6, r7, d0
 8005670:	4bc3      	ldr	r3, [pc, #780]	; (8005980 <__ieee754_rem_pio2+0x318>)
 8005672:	b08d      	sub	sp, #52	; 0x34
 8005674:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005678:	4598      	cmp	r8, r3
 800567a:	4604      	mov	r4, r0
 800567c:	9704      	str	r7, [sp, #16]
 800567e:	dc07      	bgt.n	8005690 <__ieee754_rem_pio2+0x28>
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	ed84 0b00 	vstr	d0, [r4]
 8005688:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800568c:	2500      	movs	r5, #0
 800568e:	e027      	b.n	80056e0 <__ieee754_rem_pio2+0x78>
 8005690:	4bbc      	ldr	r3, [pc, #752]	; (8005984 <__ieee754_rem_pio2+0x31c>)
 8005692:	4598      	cmp	r8, r3
 8005694:	dc75      	bgt.n	8005782 <__ieee754_rem_pio2+0x11a>
 8005696:	9b04      	ldr	r3, [sp, #16]
 8005698:	4dbb      	ldr	r5, [pc, #748]	; (8005988 <__ieee754_rem_pio2+0x320>)
 800569a:	2b00      	cmp	r3, #0
 800569c:	ee10 0a10 	vmov	r0, s0
 80056a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005948 <__ieee754_rem_pio2+0x2e0>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	4639      	mov	r1, r7
 80056a8:	dd36      	ble.n	8005718 <__ieee754_rem_pio2+0xb0>
 80056aa:	f7fa fe0d 	bl	80002c8 <__aeabi_dsub>
 80056ae:	45a8      	cmp	r8, r5
 80056b0:	4606      	mov	r6, r0
 80056b2:	460f      	mov	r7, r1
 80056b4:	d018      	beq.n	80056e8 <__ieee754_rem_pio2+0x80>
 80056b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005950 <__ieee754_rem_pio2+0x2e8>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7fa fe04 	bl	80002c8 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	e9c4 2300 	strd	r2, r3, [r4]
 80056c8:	4630      	mov	r0, r6
 80056ca:	4639      	mov	r1, r7
 80056cc:	f7fa fdfc 	bl	80002c8 <__aeabi_dsub>
 80056d0:	a39f      	add	r3, pc, #636	; (adr r3, 8005950 <__ieee754_rem_pio2+0x2e8>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa fdf7 	bl	80002c8 <__aeabi_dsub>
 80056da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056de:	2501      	movs	r5, #1
 80056e0:	4628      	mov	r0, r5
 80056e2:	b00d      	add	sp, #52	; 0x34
 80056e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e8:	a39b      	add	r3, pc, #620	; (adr r3, 8005958 <__ieee754_rem_pio2+0x2f0>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f7fa fdeb 	bl	80002c8 <__aeabi_dsub>
 80056f2:	a39b      	add	r3, pc, #620	; (adr r3, 8005960 <__ieee754_rem_pio2+0x2f8>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	4606      	mov	r6, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	f7fa fde4 	bl	80002c8 <__aeabi_dsub>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	e9c4 2300 	strd	r2, r3, [r4]
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fa fddc 	bl	80002c8 <__aeabi_dsub>
 8005710:	a393      	add	r3, pc, #588	; (adr r3, 8005960 <__ieee754_rem_pio2+0x2f8>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	e7de      	b.n	80056d6 <__ieee754_rem_pio2+0x6e>
 8005718:	f7fa fdd8 	bl	80002cc <__adddf3>
 800571c:	45a8      	cmp	r8, r5
 800571e:	4606      	mov	r6, r0
 8005720:	460f      	mov	r7, r1
 8005722:	d016      	beq.n	8005752 <__ieee754_rem_pio2+0xea>
 8005724:	a38a      	add	r3, pc, #552	; (adr r3, 8005950 <__ieee754_rem_pio2+0x2e8>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa fdcf 	bl	80002cc <__adddf3>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	e9c4 2300 	strd	r2, r3, [r4]
 8005736:	4630      	mov	r0, r6
 8005738:	4639      	mov	r1, r7
 800573a:	f7fa fdc5 	bl	80002c8 <__aeabi_dsub>
 800573e:	a384      	add	r3, pc, #528	; (adr r3, 8005950 <__ieee754_rem_pio2+0x2e8>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa fdc2 	bl	80002cc <__adddf3>
 8005748:	f04f 35ff 	mov.w	r5, #4294967295
 800574c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005750:	e7c6      	b.n	80056e0 <__ieee754_rem_pio2+0x78>
 8005752:	a381      	add	r3, pc, #516	; (adr r3, 8005958 <__ieee754_rem_pio2+0x2f0>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f7fa fdb8 	bl	80002cc <__adddf3>
 800575c:	a380      	add	r3, pc, #512	; (adr r3, 8005960 <__ieee754_rem_pio2+0x2f8>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	4606      	mov	r6, r0
 8005764:	460f      	mov	r7, r1
 8005766:	f7fa fdb1 	bl	80002cc <__adddf3>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	e9c4 2300 	strd	r2, r3, [r4]
 8005772:	4630      	mov	r0, r6
 8005774:	4639      	mov	r1, r7
 8005776:	f7fa fda7 	bl	80002c8 <__aeabi_dsub>
 800577a:	a379      	add	r3, pc, #484	; (adr r3, 8005960 <__ieee754_rem_pio2+0x2f8>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	e7e0      	b.n	8005744 <__ieee754_rem_pio2+0xdc>
 8005782:	4b82      	ldr	r3, [pc, #520]	; (800598c <__ieee754_rem_pio2+0x324>)
 8005784:	4598      	cmp	r8, r3
 8005786:	f300 80d0 	bgt.w	800592a <__ieee754_rem_pio2+0x2c2>
 800578a:	f000 fe23 	bl	80063d4 <fabs>
 800578e:	ec57 6b10 	vmov	r6, r7, d0
 8005792:	ee10 0a10 	vmov	r0, s0
 8005796:	a374      	add	r3, pc, #464	; (adr r3, 8005968 <__ieee754_rem_pio2+0x300>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	4639      	mov	r1, r7
 800579e:	f7fa ff4b 	bl	8000638 <__aeabi_dmul>
 80057a2:	2200      	movs	r2, #0
 80057a4:	4b7a      	ldr	r3, [pc, #488]	; (8005990 <__ieee754_rem_pio2+0x328>)
 80057a6:	f7fa fd91 	bl	80002cc <__adddf3>
 80057aa:	f7fb f9df 	bl	8000b6c <__aeabi_d2iz>
 80057ae:	4605      	mov	r5, r0
 80057b0:	f7fa fed8 	bl	8000564 <__aeabi_i2d>
 80057b4:	a364      	add	r3, pc, #400	; (adr r3, 8005948 <__ieee754_rem_pio2+0x2e0>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057be:	f7fa ff3b 	bl	8000638 <__aeabi_dmul>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4630      	mov	r0, r6
 80057c8:	4639      	mov	r1, r7
 80057ca:	f7fa fd7d 	bl	80002c8 <__aeabi_dsub>
 80057ce:	a360      	add	r3, pc, #384	; (adr r3, 8005950 <__ieee754_rem_pio2+0x2e8>)
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	4682      	mov	sl, r0
 80057d6:	468b      	mov	fp, r1
 80057d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057dc:	f7fa ff2c 	bl	8000638 <__aeabi_dmul>
 80057e0:	2d1f      	cmp	r5, #31
 80057e2:	4606      	mov	r6, r0
 80057e4:	460f      	mov	r7, r1
 80057e6:	dc0c      	bgt.n	8005802 <__ieee754_rem_pio2+0x19a>
 80057e8:	1e6a      	subs	r2, r5, #1
 80057ea:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <__ieee754_rem_pio2+0x32c>)
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	4543      	cmp	r3, r8
 80057f2:	d006      	beq.n	8005802 <__ieee754_rem_pio2+0x19a>
 80057f4:	4632      	mov	r2, r6
 80057f6:	463b      	mov	r3, r7
 80057f8:	4650      	mov	r0, sl
 80057fa:	4659      	mov	r1, fp
 80057fc:	f7fa fd64 	bl	80002c8 <__aeabi_dsub>
 8005800:	e00e      	b.n	8005820 <__ieee754_rem_pio2+0x1b8>
 8005802:	4632      	mov	r2, r6
 8005804:	463b      	mov	r3, r7
 8005806:	4650      	mov	r0, sl
 8005808:	4659      	mov	r1, fp
 800580a:	f7fa fd5d 	bl	80002c8 <__aeabi_dsub>
 800580e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005812:	9305      	str	r3, [sp, #20]
 8005814:	9a05      	ldr	r2, [sp, #20]
 8005816:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b10      	cmp	r3, #16
 800581e:	dc02      	bgt.n	8005826 <__ieee754_rem_pio2+0x1be>
 8005820:	e9c4 0100 	strd	r0, r1, [r4]
 8005824:	e039      	b.n	800589a <__ieee754_rem_pio2+0x232>
 8005826:	a34c      	add	r3, pc, #304	; (adr r3, 8005958 <__ieee754_rem_pio2+0x2f0>)
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005830:	f7fa ff02 	bl	8000638 <__aeabi_dmul>
 8005834:	4606      	mov	r6, r0
 8005836:	460f      	mov	r7, r1
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4650      	mov	r0, sl
 800583e:	4659      	mov	r1, fp
 8005840:	f7fa fd42 	bl	80002c8 <__aeabi_dsub>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4680      	mov	r8, r0
 800584a:	4689      	mov	r9, r1
 800584c:	4650      	mov	r0, sl
 800584e:	4659      	mov	r1, fp
 8005850:	f7fa fd3a 	bl	80002c8 <__aeabi_dsub>
 8005854:	4632      	mov	r2, r6
 8005856:	463b      	mov	r3, r7
 8005858:	f7fa fd36 	bl	80002c8 <__aeabi_dsub>
 800585c:	a340      	add	r3, pc, #256	; (adr r3, 8005960 <__ieee754_rem_pio2+0x2f8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586a:	f7fa fee5 	bl	8000638 <__aeabi_dmul>
 800586e:	4632      	mov	r2, r6
 8005870:	463b      	mov	r3, r7
 8005872:	f7fa fd29 	bl	80002c8 <__aeabi_dsub>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4606      	mov	r6, r0
 800587c:	460f      	mov	r7, r1
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fd21 	bl	80002c8 <__aeabi_dsub>
 8005886:	9a05      	ldr	r2, [sp, #20]
 8005888:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b31      	cmp	r3, #49	; 0x31
 8005890:	dc20      	bgt.n	80058d4 <__ieee754_rem_pio2+0x26c>
 8005892:	e9c4 0100 	strd	r0, r1, [r4]
 8005896:	46c2      	mov	sl, r8
 8005898:	46cb      	mov	fp, r9
 800589a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800589e:	4650      	mov	r0, sl
 80058a0:	4642      	mov	r2, r8
 80058a2:	464b      	mov	r3, r9
 80058a4:	4659      	mov	r1, fp
 80058a6:	f7fa fd0f 	bl	80002c8 <__aeabi_dsub>
 80058aa:	463b      	mov	r3, r7
 80058ac:	4632      	mov	r2, r6
 80058ae:	f7fa fd0b 	bl	80002c8 <__aeabi_dsub>
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058ba:	f6bf af11 	bge.w	80056e0 <__ieee754_rem_pio2+0x78>
 80058be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	f8c4 8000 	str.w	r8, [r4]
 80058c8:	60a0      	str	r0, [r4, #8]
 80058ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ce:	60e3      	str	r3, [r4, #12]
 80058d0:	426d      	negs	r5, r5
 80058d2:	e705      	b.n	80056e0 <__ieee754_rem_pio2+0x78>
 80058d4:	a326      	add	r3, pc, #152	; (adr r3, 8005970 <__ieee754_rem_pio2+0x308>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058de:	f7fa feab 	bl	8000638 <__aeabi_dmul>
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	f7fa fceb 	bl	80002c8 <__aeabi_dsub>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4682      	mov	sl, r0
 80058f8:	468b      	mov	fp, r1
 80058fa:	4640      	mov	r0, r8
 80058fc:	4649      	mov	r1, r9
 80058fe:	f7fa fce3 	bl	80002c8 <__aeabi_dsub>
 8005902:	4632      	mov	r2, r6
 8005904:	463b      	mov	r3, r7
 8005906:	f7fa fcdf 	bl	80002c8 <__aeabi_dsub>
 800590a:	a31b      	add	r3, pc, #108	; (adr r3, 8005978 <__ieee754_rem_pio2+0x310>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	4606      	mov	r6, r0
 8005912:	460f      	mov	r7, r1
 8005914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005918:	f7fa fe8e 	bl	8000638 <__aeabi_dmul>
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	f7fa fcd2 	bl	80002c8 <__aeabi_dsub>
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	e764      	b.n	80057f4 <__ieee754_rem_pio2+0x18c>
 800592a:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <__ieee754_rem_pio2+0x330>)
 800592c:	4598      	cmp	r8, r3
 800592e:	dd35      	ble.n	800599c <__ieee754_rem_pio2+0x334>
 8005930:	ee10 2a10 	vmov	r2, s0
 8005934:	463b      	mov	r3, r7
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	f7fa fcc5 	bl	80002c8 <__aeabi_dsub>
 800593e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005942:	e9c4 0100 	strd	r0, r1, [r4]
 8005946:	e6a1      	b.n	800568c <__ieee754_rem_pio2+0x24>
 8005948:	54400000 	.word	0x54400000
 800594c:	3ff921fb 	.word	0x3ff921fb
 8005950:	1a626331 	.word	0x1a626331
 8005954:	3dd0b461 	.word	0x3dd0b461
 8005958:	1a600000 	.word	0x1a600000
 800595c:	3dd0b461 	.word	0x3dd0b461
 8005960:	2e037073 	.word	0x2e037073
 8005964:	3ba3198a 	.word	0x3ba3198a
 8005968:	6dc9c883 	.word	0x6dc9c883
 800596c:	3fe45f30 	.word	0x3fe45f30
 8005970:	2e000000 	.word	0x2e000000
 8005974:	3ba3198a 	.word	0x3ba3198a
 8005978:	252049c1 	.word	0x252049c1
 800597c:	397b839a 	.word	0x397b839a
 8005980:	3fe921fb 	.word	0x3fe921fb
 8005984:	4002d97b 	.word	0x4002d97b
 8005988:	3ff921fb 	.word	0x3ff921fb
 800598c:	413921fb 	.word	0x413921fb
 8005990:	3fe00000 	.word	0x3fe00000
 8005994:	080066e0 	.word	0x080066e0
 8005998:	7fefffff 	.word	0x7fefffff
 800599c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80059a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80059a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80059a8:	4630      	mov	r0, r6
 80059aa:	460f      	mov	r7, r1
 80059ac:	f7fb f8de 	bl	8000b6c <__aeabi_d2iz>
 80059b0:	f7fa fdd8 	bl	8000564 <__aeabi_i2d>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059c0:	f7fa fc82 	bl	80002c8 <__aeabi_dsub>
 80059c4:	2200      	movs	r2, #0
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <__ieee754_rem_pio2+0x3dc>)
 80059c8:	f7fa fe36 	bl	8000638 <__aeabi_dmul>
 80059cc:	460f      	mov	r7, r1
 80059ce:	4606      	mov	r6, r0
 80059d0:	f7fb f8cc 	bl	8000b6c <__aeabi_d2iz>
 80059d4:	f7fa fdc6 	bl	8000564 <__aeabi_i2d>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80059e4:	f7fa fc70 	bl	80002c8 <__aeabi_dsub>
 80059e8:	2200      	movs	r2, #0
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <__ieee754_rem_pio2+0x3dc>)
 80059ec:	f7fa fe24 	bl	8000638 <__aeabi_dmul>
 80059f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80059f8:	f04f 0803 	mov.w	r8, #3
 80059fc:	2600      	movs	r6, #0
 80059fe:	2700      	movs	r7, #0
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8005a0c:	f7fb f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8005a10:	b9b0      	cbnz	r0, 8005a40 <__ieee754_rem_pio2+0x3d8>
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <__ieee754_rem_pio2+0x3e0>)
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	2302      	movs	r3, #2
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	462a      	mov	r2, r5
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	4621      	mov	r1, r4
 8005a20:	a806      	add	r0, sp, #24
 8005a22:	f000 f8dd 	bl	8005be0 <__kernel_rem_pio2>
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	f6bf ae58 	bge.w	80056e0 <__ieee754_rem_pio2+0x78>
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	68e3      	ldr	r3, [r4, #12]
 8005a3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	e746      	b.n	80058ce <__ieee754_rem_pio2+0x266>
 8005a40:	46d0      	mov	r8, sl
 8005a42:	e7dd      	b.n	8005a00 <__ieee754_rem_pio2+0x398>
 8005a44:	41700000 	.word	0x41700000
 8005a48:	08006760 	.word	0x08006760
 8005a4c:	00000000 	.word	0x00000000

08005a50 <__kernel_cos>:
 8005a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	ec59 8b10 	vmov	r8, r9, d0
 8005a58:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005a5c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005a60:	ed2d 8b02 	vpush	{d8}
 8005a64:	eeb0 8a41 	vmov.f32	s16, s2
 8005a68:	eef0 8a61 	vmov.f32	s17, s3
 8005a6c:	da07      	bge.n	8005a7e <__kernel_cos+0x2e>
 8005a6e:	ee10 0a10 	vmov	r0, s0
 8005a72:	4649      	mov	r1, r9
 8005a74:	f7fb f87a 	bl	8000b6c <__aeabi_d2iz>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f000 8089 	beq.w	8005b90 <__kernel_cos+0x140>
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fdd7 	bl	8000638 <__aeabi_dmul>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <__kernel_cos+0x178>)
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	f7fa fdd1 	bl	8000638 <__aeabi_dmul>
 8005a96:	a340      	add	r3, pc, #256	; (adr r3, 8005b98 <__kernel_cos+0x148>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	4682      	mov	sl, r0
 8005a9e:	468b      	mov	fp, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa fdc8 	bl	8000638 <__aeabi_dmul>
 8005aa8:	a33d      	add	r3, pc, #244	; (adr r3, 8005ba0 <__kernel_cos+0x150>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fc0d 	bl	80002cc <__adddf3>
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	f7fa fdbf 	bl	8000638 <__aeabi_dmul>
 8005aba:	a33b      	add	r3, pc, #236	; (adr r3, 8005ba8 <__kernel_cos+0x158>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f7fa fc02 	bl	80002c8 <__aeabi_dsub>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	f7fa fdb6 	bl	8000638 <__aeabi_dmul>
 8005acc:	a338      	add	r3, pc, #224	; (adr r3, 8005bb0 <__kernel_cos+0x160>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fbfb 	bl	80002cc <__adddf3>
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f7fa fdad 	bl	8000638 <__aeabi_dmul>
 8005ade:	a336      	add	r3, pc, #216	; (adr r3, 8005bb8 <__kernel_cos+0x168>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa fbf0 	bl	80002c8 <__aeabi_dsub>
 8005ae8:	4622      	mov	r2, r4
 8005aea:	462b      	mov	r3, r5
 8005aec:	f7fa fda4 	bl	8000638 <__aeabi_dmul>
 8005af0:	a333      	add	r3, pc, #204	; (adr r3, 8005bc0 <__kernel_cos+0x170>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fbe9 	bl	80002cc <__adddf3>
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f7fa fd9b 	bl	8000638 <__aeabi_dmul>
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	f7fa fd97 	bl	8000638 <__aeabi_dmul>
 8005b0a:	ec53 2b18 	vmov	r2, r3, d8
 8005b0e:	4604      	mov	r4, r0
 8005b10:	460d      	mov	r5, r1
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fa fd8f 	bl	8000638 <__aeabi_dmul>
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4620      	mov	r0, r4
 8005b22:	f7fa fbd1 	bl	80002c8 <__aeabi_dsub>
 8005b26:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <__kernel_cos+0x17c>)
 8005b28:	429e      	cmp	r6, r3
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	dc11      	bgt.n	8005b54 <__kernel_cos+0x104>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4650      	mov	r0, sl
 8005b36:	4659      	mov	r1, fp
 8005b38:	f7fa fbc6 	bl	80002c8 <__aeabi_dsub>
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4924      	ldr	r1, [pc, #144]	; (8005bd0 <__kernel_cos+0x180>)
 8005b40:	4602      	mov	r2, r0
 8005b42:	2000      	movs	r0, #0
 8005b44:	f7fa fbc0 	bl	80002c8 <__aeabi_dsub>
 8005b48:	ecbd 8b02 	vpop	{d8}
 8005b4c:	ec41 0b10 	vmov	d0, r0, r1
 8005b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <__kernel_cos+0x184>)
 8005b56:	491e      	ldr	r1, [pc, #120]	; (8005bd0 <__kernel_cos+0x180>)
 8005b58:	429e      	cmp	r6, r3
 8005b5a:	bfcc      	ite	gt
 8005b5c:	4d1e      	ldrgt	r5, [pc, #120]	; (8005bd8 <__kernel_cos+0x188>)
 8005b5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005b62:	2400      	movs	r4, #0
 8005b64:	4622      	mov	r2, r4
 8005b66:	462b      	mov	r3, r5
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7fa fbad 	bl	80002c8 <__aeabi_dsub>
 8005b6e:	4622      	mov	r2, r4
 8005b70:	4606      	mov	r6, r0
 8005b72:	460f      	mov	r7, r1
 8005b74:	462b      	mov	r3, r5
 8005b76:	4650      	mov	r0, sl
 8005b78:	4659      	mov	r1, fp
 8005b7a:	f7fa fba5 	bl	80002c8 <__aeabi_dsub>
 8005b7e:	4642      	mov	r2, r8
 8005b80:	464b      	mov	r3, r9
 8005b82:	f7fa fba1 	bl	80002c8 <__aeabi_dsub>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	e7d9      	b.n	8005b44 <__kernel_cos+0xf4>
 8005b90:	2000      	movs	r0, #0
 8005b92:	490f      	ldr	r1, [pc, #60]	; (8005bd0 <__kernel_cos+0x180>)
 8005b94:	e7d8      	b.n	8005b48 <__kernel_cos+0xf8>
 8005b96:	bf00      	nop
 8005b98:	be8838d4 	.word	0xbe8838d4
 8005b9c:	bda8fae9 	.word	0xbda8fae9
 8005ba0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ba4:	3e21ee9e 	.word	0x3e21ee9e
 8005ba8:	809c52ad 	.word	0x809c52ad
 8005bac:	3e927e4f 	.word	0x3e927e4f
 8005bb0:	19cb1590 	.word	0x19cb1590
 8005bb4:	3efa01a0 	.word	0x3efa01a0
 8005bb8:	16c15177 	.word	0x16c15177
 8005bbc:	3f56c16c 	.word	0x3f56c16c
 8005bc0:	5555554c 	.word	0x5555554c
 8005bc4:	3fa55555 	.word	0x3fa55555
 8005bc8:	3fe00000 	.word	0x3fe00000
 8005bcc:	3fd33332 	.word	0x3fd33332
 8005bd0:	3ff00000 	.word	0x3ff00000
 8005bd4:	3fe90000 	.word	0x3fe90000
 8005bd8:	3fd20000 	.word	0x3fd20000
 8005bdc:	00000000 	.word	0x00000000

08005be0 <__kernel_rem_pio2>:
 8005be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	ed2d 8b02 	vpush	{d8}
 8005be8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005bec:	1ed4      	subs	r4, r2, #3
 8005bee:	9308      	str	r3, [sp, #32]
 8005bf0:	9101      	str	r1, [sp, #4]
 8005bf2:	4bc5      	ldr	r3, [pc, #788]	; (8005f08 <__kernel_rem_pio2+0x328>)
 8005bf4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005bf6:	9009      	str	r0, [sp, #36]	; 0x24
 8005bf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	9b08      	ldr	r3, [sp, #32]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	2318      	movs	r3, #24
 8005c06:	fb94 f4f3 	sdiv	r4, r4, r3
 8005c0a:	f06f 0317 	mvn.w	r3, #23
 8005c0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005c12:	fb04 3303 	mla	r3, r4, r3, r3
 8005c16:	eb03 0a02 	add.w	sl, r3, r2
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	9a07      	ldr	r2, [sp, #28]
 8005c1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005ef8 <__kernel_rem_pio2+0x318>
 8005c22:	eb03 0802 	add.w	r8, r3, r2
 8005c26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005c28:	1aa7      	subs	r7, r4, r2
 8005c2a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005c2e:	ae22      	add	r6, sp, #136	; 0x88
 8005c30:	2500      	movs	r5, #0
 8005c32:	4545      	cmp	r5, r8
 8005c34:	dd13      	ble.n	8005c5e <__kernel_rem_pio2+0x7e>
 8005c36:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005ef8 <__kernel_rem_pio2+0x318>
 8005c3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005c3e:	2600      	movs	r6, #0
 8005c40:	9b04      	ldr	r3, [sp, #16]
 8005c42:	429e      	cmp	r6, r3
 8005c44:	dc32      	bgt.n	8005cac <__kernel_rem_pio2+0xcc>
 8005c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c48:	9302      	str	r3, [sp, #8]
 8005c4a:	9b08      	ldr	r3, [sp, #32]
 8005c4c:	199d      	adds	r5, r3, r6
 8005c4e:	ab22      	add	r3, sp, #136	; 0x88
 8005c50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c54:	9306      	str	r3, [sp, #24]
 8005c56:	ec59 8b18 	vmov	r8, r9, d8
 8005c5a:	2700      	movs	r7, #0
 8005c5c:	e01f      	b.n	8005c9e <__kernel_rem_pio2+0xbe>
 8005c5e:	42ef      	cmn	r7, r5
 8005c60:	d407      	bmi.n	8005c72 <__kernel_rem_pio2+0x92>
 8005c62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005c66:	f7fa fc7d 	bl	8000564 <__aeabi_i2d>
 8005c6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c6e:	3501      	adds	r5, #1
 8005c70:	e7df      	b.n	8005c32 <__kernel_rem_pio2+0x52>
 8005c72:	ec51 0b18 	vmov	r0, r1, d8
 8005c76:	e7f8      	b.n	8005c6a <__kernel_rem_pio2+0x8a>
 8005c78:	9906      	ldr	r1, [sp, #24]
 8005c7a:	9d02      	ldr	r5, [sp, #8]
 8005c7c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005c80:	9106      	str	r1, [sp, #24]
 8005c82:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005c86:	9502      	str	r5, [sp, #8]
 8005c88:	f7fa fcd6 	bl	8000638 <__aeabi_dmul>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa fb1a 	bl	80002cc <__adddf3>
 8005c98:	3701      	adds	r7, #1
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	4689      	mov	r9, r1
 8005c9e:	9b07      	ldr	r3, [sp, #28]
 8005ca0:	429f      	cmp	r7, r3
 8005ca2:	dde9      	ble.n	8005c78 <__kernel_rem_pio2+0x98>
 8005ca4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005ca8:	3601      	adds	r6, #1
 8005caa:	e7c9      	b.n	8005c40 <__kernel_rem_pio2+0x60>
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	aa0e      	add	r2, sp, #56	; 0x38
 8005cb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cb4:	930c      	str	r3, [sp, #48]	; 0x30
 8005cb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005cb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005cbc:	9c04      	ldr	r4, [sp, #16]
 8005cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc0:	ab9a      	add	r3, sp, #616	; 0x268
 8005cc2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005cc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005cd2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005cd6:	ab9a      	add	r3, sp, #616	; 0x268
 8005cd8:	445b      	add	r3, fp
 8005cda:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005cde:	2500      	movs	r5, #0
 8005ce0:	1b63      	subs	r3, r4, r5
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dc78      	bgt.n	8005dd8 <__kernel_rem_pio2+0x1f8>
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	ec49 8b10 	vmov	d0, r8, r9
 8005cec:	f000 fc00 	bl	80064f0 <scalbn>
 8005cf0:	ec57 6b10 	vmov	r6, r7, d0
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005cfa:	ee10 0a10 	vmov	r0, s0
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa fc9a 	bl	8000638 <__aeabi_dmul>
 8005d04:	ec41 0b10 	vmov	d0, r0, r1
 8005d08:	f000 fb6e 	bl	80063e8 <floor>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	ec51 0b10 	vmov	r0, r1, d0
 8005d12:	4b7e      	ldr	r3, [pc, #504]	; (8005f0c <__kernel_rem_pio2+0x32c>)
 8005d14:	f7fa fc90 	bl	8000638 <__aeabi_dmul>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f7fa fad2 	bl	80002c8 <__aeabi_dsub>
 8005d24:	460f      	mov	r7, r1
 8005d26:	4606      	mov	r6, r0
 8005d28:	f7fa ff20 	bl	8000b6c <__aeabi_d2iz>
 8005d2c:	9006      	str	r0, [sp, #24]
 8005d2e:	f7fa fc19 	bl	8000564 <__aeabi_i2d>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa fac5 	bl	80002c8 <__aeabi_dsub>
 8005d3e:	f1ba 0f00 	cmp.w	sl, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	dd6c      	ble.n	8005e22 <__kernel_rem_pio2+0x242>
 8005d48:	1e62      	subs	r2, r4, #1
 8005d4a:	ab0e      	add	r3, sp, #56	; 0x38
 8005d4c:	f1ca 0118 	rsb	r1, sl, #24
 8005d50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005d54:	9d06      	ldr	r5, [sp, #24]
 8005d56:	fa40 f301 	asr.w	r3, r0, r1
 8005d5a:	441d      	add	r5, r3
 8005d5c:	408b      	lsls	r3, r1
 8005d5e:	1ac0      	subs	r0, r0, r3
 8005d60:	ab0e      	add	r3, sp, #56	; 0x38
 8005d62:	9506      	str	r5, [sp, #24]
 8005d64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005d68:	f1ca 0317 	rsb	r3, sl, #23
 8005d6c:	fa40 f303 	asr.w	r3, r0, r3
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dd62      	ble.n	8005e3e <__kernel_rem_pio2+0x25e>
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	9306      	str	r3, [sp, #24]
 8005d80:	4615      	mov	r5, r2
 8005d82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005d86:	4294      	cmp	r4, r2
 8005d88:	f300 8095 	bgt.w	8005eb6 <__kernel_rem_pio2+0x2d6>
 8005d8c:	f1ba 0f00 	cmp.w	sl, #0
 8005d90:	dd07      	ble.n	8005da2 <__kernel_rem_pio2+0x1c2>
 8005d92:	f1ba 0f01 	cmp.w	sl, #1
 8005d96:	f000 80a2 	beq.w	8005ede <__kernel_rem_pio2+0x2fe>
 8005d9a:	f1ba 0f02 	cmp.w	sl, #2
 8005d9e:	f000 80c1 	beq.w	8005f24 <__kernel_rem_pio2+0x344>
 8005da2:	9b02      	ldr	r3, [sp, #8]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d14a      	bne.n	8005e3e <__kernel_rem_pio2+0x25e>
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	2000      	movs	r0, #0
 8005dae:	4958      	ldr	r1, [pc, #352]	; (8005f10 <__kernel_rem_pio2+0x330>)
 8005db0:	f7fa fa8a 	bl	80002c8 <__aeabi_dsub>
 8005db4:	4606      	mov	r6, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	d040      	beq.n	8005e3e <__kernel_rem_pio2+0x25e>
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005f00 <__kernel_rem_pio2+0x320>
 8005dc2:	f000 fb95 	bl	80064f0 <scalbn>
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	ec53 2b10 	vmov	r2, r3, d0
 8005dce:	f7fa fa7b 	bl	80002c8 <__aeabi_dsub>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	e032      	b.n	8005e3e <__kernel_rem_pio2+0x25e>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b4e      	ldr	r3, [pc, #312]	; (8005f14 <__kernel_rem_pio2+0x334>)
 8005ddc:	4640      	mov	r0, r8
 8005dde:	4649      	mov	r1, r9
 8005de0:	f7fa fc2a 	bl	8000638 <__aeabi_dmul>
 8005de4:	f7fa fec2 	bl	8000b6c <__aeabi_d2iz>
 8005de8:	f7fa fbbc 	bl	8000564 <__aeabi_i2d>
 8005dec:	2200      	movs	r2, #0
 8005dee:	4b4a      	ldr	r3, [pc, #296]	; (8005f18 <__kernel_rem_pio2+0x338>)
 8005df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df4:	f7fa fc20 	bl	8000638 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	f7fa fa62 	bl	80002c8 <__aeabi_dsub>
 8005e04:	f7fa feb2 	bl	8000b6c <__aeabi_d2iz>
 8005e08:	ab0e      	add	r3, sp, #56	; 0x38
 8005e0a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005e0e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e16:	f7fa fa59 	bl	80002cc <__adddf3>
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4689      	mov	r9, r1
 8005e20:	e75e      	b.n	8005ce0 <__kernel_rem_pio2+0x100>
 8005e22:	d105      	bne.n	8005e30 <__kernel_rem_pio2+0x250>
 8005e24:	1e63      	subs	r3, r4, #1
 8005e26:	aa0e      	add	r2, sp, #56	; 0x38
 8005e28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005e2c:	15c3      	asrs	r3, r0, #23
 8005e2e:	e79f      	b.n	8005d70 <__kernel_rem_pio2+0x190>
 8005e30:	2200      	movs	r2, #0
 8005e32:	4b3a      	ldr	r3, [pc, #232]	; (8005f1c <__kernel_rem_pio2+0x33c>)
 8005e34:	f7fa fe86 	bl	8000b44 <__aeabi_dcmpge>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d139      	bne.n	8005eb0 <__kernel_rem_pio2+0x2d0>
 8005e3c:	9002      	str	r0, [sp, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2300      	movs	r3, #0
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	f000 80c7 	beq.w	8005fde <__kernel_rem_pio2+0x3fe>
 8005e50:	1e65      	subs	r5, r4, #1
 8005e52:	462b      	mov	r3, r5
 8005e54:	2200      	movs	r2, #0
 8005e56:	9904      	ldr	r1, [sp, #16]
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	da6a      	bge.n	8005f32 <__kernel_rem_pio2+0x352>
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	f000 8088 	beq.w	8005f72 <__kernel_rem_pio2+0x392>
 8005e62:	ab0e      	add	r3, sp, #56	; 0x38
 8005e64:	f1aa 0a18 	sub.w	sl, sl, #24
 8005e68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80b4 	beq.w	8005fda <__kernel_rem_pio2+0x3fa>
 8005e72:	4650      	mov	r0, sl
 8005e74:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005f00 <__kernel_rem_pio2+0x320>
 8005e78:	f000 fb3a 	bl	80064f0 <scalbn>
 8005e7c:	00ec      	lsls	r4, r5, #3
 8005e7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005e80:	191e      	adds	r6, r3, r4
 8005e82:	ec59 8b10 	vmov	r8, r9, d0
 8005e86:	f106 0a08 	add.w	sl, r6, #8
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	f280 80df 	bge.w	8006050 <__kernel_rem_pio2+0x470>
 8005e92:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005ef8 <__kernel_rem_pio2+0x318>
 8005e96:	f04f 0a00 	mov.w	sl, #0
 8005e9a:	eba5 030a 	sub.w	r3, r5, sl
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f2c0 810a 	blt.w	80060b8 <__kernel_rem_pio2+0x4d8>
 8005ea4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005f20 <__kernel_rem_pio2+0x340>
 8005ea8:	ec59 8b18 	vmov	r8, r9, d8
 8005eac:	2700      	movs	r7, #0
 8005eae:	e0f5      	b.n	800609c <__kernel_rem_pio2+0x4bc>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	e760      	b.n	8005d78 <__kernel_rem_pio2+0x198>
 8005eb6:	ab0e      	add	r3, sp, #56	; 0x38
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	b94d      	cbnz	r5, 8005ed2 <__kernel_rem_pio2+0x2f2>
 8005ebe:	b12b      	cbz	r3, 8005ecc <__kernel_rem_pio2+0x2ec>
 8005ec0:	a80e      	add	r0, sp, #56	; 0x38
 8005ec2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005ec6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005eca:	2301      	movs	r3, #1
 8005ecc:	3201      	adds	r2, #1
 8005ece:	461d      	mov	r5, r3
 8005ed0:	e759      	b.n	8005d86 <__kernel_rem_pio2+0x1a6>
 8005ed2:	a80e      	add	r0, sp, #56	; 0x38
 8005ed4:	1acb      	subs	r3, r1, r3
 8005ed6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005eda:	462b      	mov	r3, r5
 8005edc:	e7f6      	b.n	8005ecc <__kernel_rem_pio2+0x2ec>
 8005ede:	1e62      	subs	r2, r4, #1
 8005ee0:	ab0e      	add	r3, sp, #56	; 0x38
 8005ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005eea:	a90e      	add	r1, sp, #56	; 0x38
 8005eec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005ef0:	e757      	b.n	8005da2 <__kernel_rem_pio2+0x1c2>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
	...
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	080068a8 	.word	0x080068a8
 8005f0c:	40200000 	.word	0x40200000
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	3e700000 	.word	0x3e700000
 8005f18:	41700000 	.word	0x41700000
 8005f1c:	3fe00000 	.word	0x3fe00000
 8005f20:	08006868 	.word	0x08006868
 8005f24:	1e62      	subs	r2, r4, #1
 8005f26:	ab0e      	add	r3, sp, #56	; 0x38
 8005f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f30:	e7db      	b.n	8005eea <__kernel_rem_pio2+0x30a>
 8005f32:	a90e      	add	r1, sp, #56	; 0x38
 8005f34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	e78b      	b.n	8005e56 <__kernel_rem_pio2+0x276>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005f44:	2900      	cmp	r1, #0
 8005f46:	d0fa      	beq.n	8005f3e <__kernel_rem_pio2+0x35e>
 8005f48:	9a08      	ldr	r2, [sp, #32]
 8005f4a:	4422      	add	r2, r4
 8005f4c:	00d2      	lsls	r2, r2, #3
 8005f4e:	a922      	add	r1, sp, #136	; 0x88
 8005f50:	18e3      	adds	r3, r4, r3
 8005f52:	9206      	str	r2, [sp, #24]
 8005f54:	440a      	add	r2, r1
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	f10b 0108 	add.w	r1, fp, #8
 8005f5c:	f102 0308 	add.w	r3, r2, #8
 8005f60:	1c66      	adds	r6, r4, #1
 8005f62:	910a      	str	r1, [sp, #40]	; 0x28
 8005f64:	2500      	movs	r5, #0
 8005f66:	930d      	str	r3, [sp, #52]	; 0x34
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	42b3      	cmp	r3, r6
 8005f6c:	da04      	bge.n	8005f78 <__kernel_rem_pio2+0x398>
 8005f6e:	461c      	mov	r4, r3
 8005f70:	e6a6      	b.n	8005cc0 <__kernel_rem_pio2+0xe0>
 8005f72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f74:	2301      	movs	r3, #1
 8005f76:	e7e3      	b.n	8005f40 <__kernel_rem_pio2+0x360>
 8005f78:	9b06      	ldr	r3, [sp, #24]
 8005f7a:	18ef      	adds	r7, r5, r3
 8005f7c:	ab22      	add	r3, sp, #136	; 0x88
 8005f7e:	441f      	add	r7, r3
 8005f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f86:	f7fa faed 	bl	8000564 <__aeabi_i2d>
 8005f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8c:	461c      	mov	r4, r3
 8005f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f90:	e9c7 0100 	strd	r0, r1, [r7]
 8005f94:	eb03 0b05 	add.w	fp, r3, r5
 8005f98:	2700      	movs	r7, #0
 8005f9a:	f04f 0800 	mov.w	r8, #0
 8005f9e:	f04f 0900 	mov.w	r9, #0
 8005fa2:	9b07      	ldr	r3, [sp, #28]
 8005fa4:	429f      	cmp	r7, r3
 8005fa6:	dd08      	ble.n	8005fba <__kernel_rem_pio2+0x3da>
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	aa72      	add	r2, sp, #456	; 0x1c8
 8005fac:	18eb      	adds	r3, r5, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	3508      	adds	r5, #8
 8005fb8:	e7d6      	b.n	8005f68 <__kernel_rem_pio2+0x388>
 8005fba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005fbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005fc2:	f7fa fb39 	bl	8000638 <__aeabi_dmul>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa f97d 	bl	80002cc <__adddf3>
 8005fd2:	3701      	adds	r7, #1
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	e7e3      	b.n	8005fa2 <__kernel_rem_pio2+0x3c2>
 8005fda:	3d01      	subs	r5, #1
 8005fdc:	e741      	b.n	8005e62 <__kernel_rem_pio2+0x282>
 8005fde:	f1ca 0000 	rsb	r0, sl, #0
 8005fe2:	ec47 6b10 	vmov	d0, r6, r7
 8005fe6:	f000 fa83 	bl	80064f0 <scalbn>
 8005fea:	ec57 6b10 	vmov	r6, r7, d0
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4b99      	ldr	r3, [pc, #612]	; (8006258 <__kernel_rem_pio2+0x678>)
 8005ff2:	ee10 0a10 	vmov	r0, s0
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f7fa fda4 	bl	8000b44 <__aeabi_dcmpge>
 8005ffc:	b1f8      	cbz	r0, 800603e <__kernel_rem_pio2+0x45e>
 8005ffe:	2200      	movs	r2, #0
 8006000:	4b96      	ldr	r3, [pc, #600]	; (800625c <__kernel_rem_pio2+0x67c>)
 8006002:	4630      	mov	r0, r6
 8006004:	4639      	mov	r1, r7
 8006006:	f7fa fb17 	bl	8000638 <__aeabi_dmul>
 800600a:	f7fa fdaf 	bl	8000b6c <__aeabi_d2iz>
 800600e:	4680      	mov	r8, r0
 8006010:	f7fa faa8 	bl	8000564 <__aeabi_i2d>
 8006014:	2200      	movs	r2, #0
 8006016:	4b90      	ldr	r3, [pc, #576]	; (8006258 <__kernel_rem_pio2+0x678>)
 8006018:	f7fa fb0e 	bl	8000638 <__aeabi_dmul>
 800601c:	460b      	mov	r3, r1
 800601e:	4602      	mov	r2, r0
 8006020:	4639      	mov	r1, r7
 8006022:	4630      	mov	r0, r6
 8006024:	f7fa f950 	bl	80002c8 <__aeabi_dsub>
 8006028:	f7fa fda0 	bl	8000b6c <__aeabi_d2iz>
 800602c:	1c65      	adds	r5, r4, #1
 800602e:	ab0e      	add	r3, sp, #56	; 0x38
 8006030:	f10a 0a18 	add.w	sl, sl, #24
 8006034:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006038:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800603c:	e719      	b.n	8005e72 <__kernel_rem_pio2+0x292>
 800603e:	4630      	mov	r0, r6
 8006040:	4639      	mov	r1, r7
 8006042:	f7fa fd93 	bl	8000b6c <__aeabi_d2iz>
 8006046:	ab0e      	add	r3, sp, #56	; 0x38
 8006048:	4625      	mov	r5, r4
 800604a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800604e:	e710      	b.n	8005e72 <__kernel_rem_pio2+0x292>
 8006050:	ab0e      	add	r3, sp, #56	; 0x38
 8006052:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006056:	f7fa fa85 	bl	8000564 <__aeabi_i2d>
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	f7fa faeb 	bl	8000638 <__aeabi_dmul>
 8006062:	2200      	movs	r2, #0
 8006064:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006068:	4b7c      	ldr	r3, [pc, #496]	; (800625c <__kernel_rem_pio2+0x67c>)
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa fae3 	bl	8000638 <__aeabi_dmul>
 8006072:	3f01      	subs	r7, #1
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	e708      	b.n	8005e8c <__kernel_rem_pio2+0x2ac>
 800607a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006086:	f7fa fad7 	bl	8000638 <__aeabi_dmul>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa f91b 	bl	80002cc <__adddf3>
 8006096:	3701      	adds	r7, #1
 8006098:	4680      	mov	r8, r0
 800609a:	4689      	mov	r9, r1
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	429f      	cmp	r7, r3
 80060a0:	dc01      	bgt.n	80060a6 <__kernel_rem_pio2+0x4c6>
 80060a2:	45ba      	cmp	sl, r7
 80060a4:	dae9      	bge.n	800607a <__kernel_rem_pio2+0x49a>
 80060a6:	ab4a      	add	r3, sp, #296	; 0x128
 80060a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060ac:	e9c3 8900 	strd	r8, r9, [r3]
 80060b0:	f10a 0a01 	add.w	sl, sl, #1
 80060b4:	3e08      	subs	r6, #8
 80060b6:	e6f0      	b.n	8005e9a <__kernel_rem_pio2+0x2ba>
 80060b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d85b      	bhi.n	8006176 <__kernel_rem_pio2+0x596>
 80060be:	e8df f003 	tbb	[pc, r3]
 80060c2:	264a      	.short	0x264a
 80060c4:	0226      	.short	0x0226
 80060c6:	ab9a      	add	r3, sp, #616	; 0x268
 80060c8:	441c      	add	r4, r3
 80060ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80060ce:	46a2      	mov	sl, r4
 80060d0:	46ab      	mov	fp, r5
 80060d2:	f1bb 0f00 	cmp.w	fp, #0
 80060d6:	dc6c      	bgt.n	80061b2 <__kernel_rem_pio2+0x5d2>
 80060d8:	46a2      	mov	sl, r4
 80060da:	46ab      	mov	fp, r5
 80060dc:	f1bb 0f01 	cmp.w	fp, #1
 80060e0:	f300 8086 	bgt.w	80061f0 <__kernel_rem_pio2+0x610>
 80060e4:	2000      	movs	r0, #0
 80060e6:	2100      	movs	r1, #0
 80060e8:	2d01      	cmp	r5, #1
 80060ea:	f300 80a0 	bgt.w	800622e <__kernel_rem_pio2+0x64e>
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80060f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 809e 	bne.w	800623a <__kernel_rem_pio2+0x65a>
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	e9c3 7800 	strd	r7, r8, [r3]
 8006104:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006108:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800610c:	e033      	b.n	8006176 <__kernel_rem_pio2+0x596>
 800610e:	3408      	adds	r4, #8
 8006110:	ab4a      	add	r3, sp, #296	; 0x128
 8006112:	441c      	add	r4, r3
 8006114:	462e      	mov	r6, r5
 8006116:	2000      	movs	r0, #0
 8006118:	2100      	movs	r1, #0
 800611a:	2e00      	cmp	r6, #0
 800611c:	da3a      	bge.n	8006194 <__kernel_rem_pio2+0x5b4>
 800611e:	9b02      	ldr	r3, [sp, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d03d      	beq.n	80061a0 <__kernel_rem_pio2+0x5c0>
 8006124:	4602      	mov	r2, r0
 8006126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800612a:	9c01      	ldr	r4, [sp, #4]
 800612c:	e9c4 2300 	strd	r2, r3, [r4]
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006138:	f7fa f8c6 	bl	80002c8 <__aeabi_dsub>
 800613c:	ae4c      	add	r6, sp, #304	; 0x130
 800613e:	2401      	movs	r4, #1
 8006140:	42a5      	cmp	r5, r4
 8006142:	da30      	bge.n	80061a6 <__kernel_rem_pio2+0x5c6>
 8006144:	9b02      	ldr	r3, [sp, #8]
 8006146:	b113      	cbz	r3, 800614e <__kernel_rem_pio2+0x56e>
 8006148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800614c:	4619      	mov	r1, r3
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006154:	e00f      	b.n	8006176 <__kernel_rem_pio2+0x596>
 8006156:	ab9a      	add	r3, sp, #616	; 0x268
 8006158:	441c      	add	r4, r3
 800615a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800615e:	2000      	movs	r0, #0
 8006160:	2100      	movs	r1, #0
 8006162:	2d00      	cmp	r5, #0
 8006164:	da10      	bge.n	8006188 <__kernel_rem_pio2+0x5a8>
 8006166:	9b02      	ldr	r3, [sp, #8]
 8006168:	b113      	cbz	r3, 8006170 <__kernel_rem_pio2+0x590>
 800616a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800616e:	4619      	mov	r1, r3
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	e9c3 0100 	strd	r0, r1, [r3]
 8006176:	9b06      	ldr	r3, [sp, #24]
 8006178:	f003 0007 	and.w	r0, r3, #7
 800617c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006180:	ecbd 8b02 	vpop	{d8}
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800618c:	f7fa f89e 	bl	80002cc <__adddf3>
 8006190:	3d01      	subs	r5, #1
 8006192:	e7e6      	b.n	8006162 <__kernel_rem_pio2+0x582>
 8006194:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006198:	f7fa f898 	bl	80002cc <__adddf3>
 800619c:	3e01      	subs	r6, #1
 800619e:	e7bc      	b.n	800611a <__kernel_rem_pio2+0x53a>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e7c1      	b.n	800612a <__kernel_rem_pio2+0x54a>
 80061a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80061aa:	f7fa f88f 	bl	80002cc <__adddf3>
 80061ae:	3401      	adds	r4, #1
 80061b0:	e7c6      	b.n	8006140 <__kernel_rem_pio2+0x560>
 80061b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80061b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80061ba:	4640      	mov	r0, r8
 80061bc:	ec53 2b17 	vmov	r2, r3, d7
 80061c0:	4649      	mov	r1, r9
 80061c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061c6:	f7fa f881 	bl	80002cc <__adddf3>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4606      	mov	r6, r0
 80061d0:	460f      	mov	r7, r1
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa f877 	bl	80002c8 <__aeabi_dsub>
 80061da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061de:	f7fa f875 	bl	80002cc <__adddf3>
 80061e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061e6:	e9ca 0100 	strd	r0, r1, [sl]
 80061ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80061ee:	e770      	b.n	80060d2 <__kernel_rem_pio2+0x4f2>
 80061f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80061f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80061f8:	4630      	mov	r0, r6
 80061fa:	ec53 2b17 	vmov	r2, r3, d7
 80061fe:	4639      	mov	r1, r7
 8006200:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006204:	f7fa f862 	bl	80002cc <__adddf3>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4680      	mov	r8, r0
 800620e:	4689      	mov	r9, r1
 8006210:	4630      	mov	r0, r6
 8006212:	4639      	mov	r1, r7
 8006214:	f7fa f858 	bl	80002c8 <__aeabi_dsub>
 8006218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800621c:	f7fa f856 	bl	80002cc <__adddf3>
 8006220:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006224:	e9ca 0100 	strd	r0, r1, [sl]
 8006228:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800622c:	e756      	b.n	80060dc <__kernel_rem_pio2+0x4fc>
 800622e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006232:	f7fa f84b 	bl	80002cc <__adddf3>
 8006236:	3d01      	subs	r5, #1
 8006238:	e756      	b.n	80060e8 <__kernel_rem_pio2+0x508>
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	9a01      	ldr	r2, [sp, #4]
 800623e:	601f      	str	r7, [r3, #0]
 8006240:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006244:	605c      	str	r4, [r3, #4]
 8006246:	609d      	str	r5, [r3, #8]
 8006248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800624c:	60d3      	str	r3, [r2, #12]
 800624e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006252:	6110      	str	r0, [r2, #16]
 8006254:	6153      	str	r3, [r2, #20]
 8006256:	e78e      	b.n	8006176 <__kernel_rem_pio2+0x596>
 8006258:	41700000 	.word	0x41700000
 800625c:	3e700000 	.word	0x3e700000

08006260 <__kernel_sin>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	ec55 4b10 	vmov	r4, r5, d0
 8006268:	b085      	sub	sp, #20
 800626a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800626e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006272:	ed8d 1b00 	vstr	d1, [sp]
 8006276:	9002      	str	r0, [sp, #8]
 8006278:	da06      	bge.n	8006288 <__kernel_sin+0x28>
 800627a:	ee10 0a10 	vmov	r0, s0
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa fc74 	bl	8000b6c <__aeabi_d2iz>
 8006284:	2800      	cmp	r0, #0
 8006286:	d051      	beq.n	800632c <__kernel_sin+0xcc>
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7fa f9d2 	bl	8000638 <__aeabi_dmul>
 8006294:	4682      	mov	sl, r0
 8006296:	468b      	mov	fp, r1
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f7fa f9ca 	bl	8000638 <__aeabi_dmul>
 80062a4:	a341      	add	r3, pc, #260	; (adr r3, 80063ac <__kernel_sin+0x14c>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	4680      	mov	r8, r0
 80062ac:	4689      	mov	r9, r1
 80062ae:	4650      	mov	r0, sl
 80062b0:	4659      	mov	r1, fp
 80062b2:	f7fa f9c1 	bl	8000638 <__aeabi_dmul>
 80062b6:	a33f      	add	r3, pc, #252	; (adr r3, 80063b4 <__kernel_sin+0x154>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7fa f804 	bl	80002c8 <__aeabi_dsub>
 80062c0:	4652      	mov	r2, sl
 80062c2:	465b      	mov	r3, fp
 80062c4:	f7fa f9b8 	bl	8000638 <__aeabi_dmul>
 80062c8:	a33c      	add	r3, pc, #240	; (adr r3, 80063bc <__kernel_sin+0x15c>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7f9 fffd 	bl	80002cc <__adddf3>
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f7fa f9af 	bl	8000638 <__aeabi_dmul>
 80062da:	a33a      	add	r3, pc, #232	; (adr r3, 80063c4 <__kernel_sin+0x164>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7f9 fff2 	bl	80002c8 <__aeabi_dsub>
 80062e4:	4652      	mov	r2, sl
 80062e6:	465b      	mov	r3, fp
 80062e8:	f7fa f9a6 	bl	8000638 <__aeabi_dmul>
 80062ec:	a337      	add	r3, pc, #220	; (adr r3, 80063cc <__kernel_sin+0x16c>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7f9 ffeb 	bl	80002cc <__adddf3>
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	b9db      	cbnz	r3, 8006336 <__kernel_sin+0xd6>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4650      	mov	r0, sl
 8006304:	4659      	mov	r1, fp
 8006306:	f7fa f997 	bl	8000638 <__aeabi_dmul>
 800630a:	a325      	add	r3, pc, #148	; (adr r3, 80063a0 <__kernel_sin+0x140>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ffda 	bl	80002c8 <__aeabi_dsub>
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	f7fa f98e 	bl	8000638 <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4620      	mov	r0, r4
 8006322:	4629      	mov	r1, r5
 8006324:	f7f9 ffd2 	bl	80002cc <__adddf3>
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	ec45 4b10 	vmov	d0, r4, r5
 8006330:	b005      	add	sp, #20
 8006332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006336:	2200      	movs	r2, #0
 8006338:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <__kernel_sin+0x148>)
 800633a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800633e:	f7fa f97b 	bl	8000638 <__aeabi_dmul>
 8006342:	4632      	mov	r2, r6
 8006344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006348:	463b      	mov	r3, r7
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7fa f973 	bl	8000638 <__aeabi_dmul>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800635a:	f7f9 ffb5 	bl	80002c8 <__aeabi_dsub>
 800635e:	4652      	mov	r2, sl
 8006360:	465b      	mov	r3, fp
 8006362:	f7fa f969 	bl	8000638 <__aeabi_dmul>
 8006366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636a:	f7f9 ffad 	bl	80002c8 <__aeabi_dsub>
 800636e:	a30c      	add	r3, pc, #48	; (adr r3, 80063a0 <__kernel_sin+0x140>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa f95c 	bl	8000638 <__aeabi_dmul>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	f7f9 ffa0 	bl	80002cc <__adddf3>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4620      	mov	r0, r4
 8006392:	4629      	mov	r1, r5
 8006394:	f7f9 ff98 	bl	80002c8 <__aeabi_dsub>
 8006398:	e7c6      	b.n	8006328 <__kernel_sin+0xc8>
 800639a:	bf00      	nop
 800639c:	f3af 8000 	nop.w
 80063a0:	55555549 	.word	0x55555549
 80063a4:	3fc55555 	.word	0x3fc55555
 80063a8:	3fe00000 	.word	0x3fe00000
 80063ac:	5acfd57c 	.word	0x5acfd57c
 80063b0:	3de5d93a 	.word	0x3de5d93a
 80063b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80063b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80063bc:	57b1fe7d 	.word	0x57b1fe7d
 80063c0:	3ec71de3 	.word	0x3ec71de3
 80063c4:	19c161d5 	.word	0x19c161d5
 80063c8:	3f2a01a0 	.word	0x3f2a01a0
 80063cc:	1110f8a6 	.word	0x1110f8a6
 80063d0:	3f811111 	.word	0x3f811111

080063d4 <fabs>:
 80063d4:	ec51 0b10 	vmov	r0, r1, d0
 80063d8:	ee10 2a10 	vmov	r2, s0
 80063dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063e0:	ec43 2b10 	vmov	d0, r2, r3
 80063e4:	4770      	bx	lr
	...

080063e8 <floor>:
 80063e8:	ec51 0b10 	vmov	r0, r1, d0
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80063f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80063f8:	2e13      	cmp	r6, #19
 80063fa:	460c      	mov	r4, r1
 80063fc:	ee10 5a10 	vmov	r5, s0
 8006400:	4680      	mov	r8, r0
 8006402:	dc34      	bgt.n	800646e <floor+0x86>
 8006404:	2e00      	cmp	r6, #0
 8006406:	da16      	bge.n	8006436 <floor+0x4e>
 8006408:	a335      	add	r3, pc, #212	; (adr r3, 80064e0 <floor+0xf8>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 ff5d 	bl	80002cc <__adddf3>
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	f7fa fb9f 	bl	8000b58 <__aeabi_dcmpgt>
 800641a:	b148      	cbz	r0, 8006430 <floor+0x48>
 800641c:	2c00      	cmp	r4, #0
 800641e:	da59      	bge.n	80064d4 <floor+0xec>
 8006420:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006424:	4a30      	ldr	r2, [pc, #192]	; (80064e8 <floor+0x100>)
 8006426:	432b      	orrs	r3, r5
 8006428:	2500      	movs	r5, #0
 800642a:	42ab      	cmp	r3, r5
 800642c:	bf18      	it	ne
 800642e:	4614      	movne	r4, r2
 8006430:	4621      	mov	r1, r4
 8006432:	4628      	mov	r0, r5
 8006434:	e025      	b.n	8006482 <floor+0x9a>
 8006436:	4f2d      	ldr	r7, [pc, #180]	; (80064ec <floor+0x104>)
 8006438:	4137      	asrs	r7, r6
 800643a:	ea01 0307 	and.w	r3, r1, r7
 800643e:	4303      	orrs	r3, r0
 8006440:	d01f      	beq.n	8006482 <floor+0x9a>
 8006442:	a327      	add	r3, pc, #156	; (adr r3, 80064e0 <floor+0xf8>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7f9 ff40 	bl	80002cc <__adddf3>
 800644c:	2200      	movs	r2, #0
 800644e:	2300      	movs	r3, #0
 8006450:	f7fa fb82 	bl	8000b58 <__aeabi_dcmpgt>
 8006454:	2800      	cmp	r0, #0
 8006456:	d0eb      	beq.n	8006430 <floor+0x48>
 8006458:	2c00      	cmp	r4, #0
 800645a:	bfbe      	ittt	lt
 800645c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006460:	fa43 f606 	asrlt.w	r6, r3, r6
 8006464:	19a4      	addlt	r4, r4, r6
 8006466:	ea24 0407 	bic.w	r4, r4, r7
 800646a:	2500      	movs	r5, #0
 800646c:	e7e0      	b.n	8006430 <floor+0x48>
 800646e:	2e33      	cmp	r6, #51	; 0x33
 8006470:	dd0b      	ble.n	800648a <floor+0xa2>
 8006472:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006476:	d104      	bne.n	8006482 <floor+0x9a>
 8006478:	ee10 2a10 	vmov	r2, s0
 800647c:	460b      	mov	r3, r1
 800647e:	f7f9 ff25 	bl	80002cc <__adddf3>
 8006482:	ec41 0b10 	vmov	d0, r0, r1
 8006486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800648a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	fa23 f707 	lsr.w	r7, r3, r7
 8006496:	4207      	tst	r7, r0
 8006498:	d0f3      	beq.n	8006482 <floor+0x9a>
 800649a:	a311      	add	r3, pc, #68	; (adr r3, 80064e0 <floor+0xf8>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f7f9 ff14 	bl	80002cc <__adddf3>
 80064a4:	2200      	movs	r2, #0
 80064a6:	2300      	movs	r3, #0
 80064a8:	f7fa fb56 	bl	8000b58 <__aeabi_dcmpgt>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d0bf      	beq.n	8006430 <floor+0x48>
 80064b0:	2c00      	cmp	r4, #0
 80064b2:	da02      	bge.n	80064ba <floor+0xd2>
 80064b4:	2e14      	cmp	r6, #20
 80064b6:	d103      	bne.n	80064c0 <floor+0xd8>
 80064b8:	3401      	adds	r4, #1
 80064ba:	ea25 0507 	bic.w	r5, r5, r7
 80064be:	e7b7      	b.n	8006430 <floor+0x48>
 80064c0:	2301      	movs	r3, #1
 80064c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80064c6:	fa03 f606 	lsl.w	r6, r3, r6
 80064ca:	4435      	add	r5, r6
 80064cc:	4545      	cmp	r5, r8
 80064ce:	bf38      	it	cc
 80064d0:	18e4      	addcc	r4, r4, r3
 80064d2:	e7f2      	b.n	80064ba <floor+0xd2>
 80064d4:	2500      	movs	r5, #0
 80064d6:	462c      	mov	r4, r5
 80064d8:	e7aa      	b.n	8006430 <floor+0x48>
 80064da:	bf00      	nop
 80064dc:	f3af 8000 	nop.w
 80064e0:	8800759c 	.word	0x8800759c
 80064e4:	7e37e43c 	.word	0x7e37e43c
 80064e8:	bff00000 	.word	0xbff00000
 80064ec:	000fffff 	.word	0x000fffff

080064f0 <scalbn>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	ec55 4b10 	vmov	r4, r5, d0
 80064f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80064fa:	4606      	mov	r6, r0
 80064fc:	462b      	mov	r3, r5
 80064fe:	b9aa      	cbnz	r2, 800652c <scalbn+0x3c>
 8006500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006504:	4323      	orrs	r3, r4
 8006506:	d03b      	beq.n	8006580 <scalbn+0x90>
 8006508:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <scalbn+0xe0>)
 800650a:	4629      	mov	r1, r5
 800650c:	2200      	movs	r2, #0
 800650e:	ee10 0a10 	vmov	r0, s0
 8006512:	f7fa f891 	bl	8000638 <__aeabi_dmul>
 8006516:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <scalbn+0xe4>)
 8006518:	429e      	cmp	r6, r3
 800651a:	4604      	mov	r4, r0
 800651c:	460d      	mov	r5, r1
 800651e:	da12      	bge.n	8006546 <scalbn+0x56>
 8006520:	a327      	add	r3, pc, #156	; (adr r3, 80065c0 <scalbn+0xd0>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7fa f887 	bl	8000638 <__aeabi_dmul>
 800652a:	e009      	b.n	8006540 <scalbn+0x50>
 800652c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006530:	428a      	cmp	r2, r1
 8006532:	d10c      	bne.n	800654e <scalbn+0x5e>
 8006534:	ee10 2a10 	vmov	r2, s0
 8006538:	4620      	mov	r0, r4
 800653a:	4629      	mov	r1, r5
 800653c:	f7f9 fec6 	bl	80002cc <__adddf3>
 8006540:	4604      	mov	r4, r0
 8006542:	460d      	mov	r5, r1
 8006544:	e01c      	b.n	8006580 <scalbn+0x90>
 8006546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800654a:	460b      	mov	r3, r1
 800654c:	3a36      	subs	r2, #54	; 0x36
 800654e:	4432      	add	r2, r6
 8006550:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006554:	428a      	cmp	r2, r1
 8006556:	dd0b      	ble.n	8006570 <scalbn+0x80>
 8006558:	ec45 4b11 	vmov	d1, r4, r5
 800655c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80065c8 <scalbn+0xd8>
 8006560:	f000 f83c 	bl	80065dc <copysign>
 8006564:	a318      	add	r3, pc, #96	; (adr r3, 80065c8 <scalbn+0xd8>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	ec51 0b10 	vmov	r0, r1, d0
 800656e:	e7da      	b.n	8006526 <scalbn+0x36>
 8006570:	2a00      	cmp	r2, #0
 8006572:	dd08      	ble.n	8006586 <scalbn+0x96>
 8006574:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800657c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006580:	ec45 4b10 	vmov	d0, r4, r5
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800658a:	da0d      	bge.n	80065a8 <scalbn+0xb8>
 800658c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006590:	429e      	cmp	r6, r3
 8006592:	ec45 4b11 	vmov	d1, r4, r5
 8006596:	dce1      	bgt.n	800655c <scalbn+0x6c>
 8006598:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80065c0 <scalbn+0xd0>
 800659c:	f000 f81e 	bl	80065dc <copysign>
 80065a0:	a307      	add	r3, pc, #28	; (adr r3, 80065c0 <scalbn+0xd0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	e7e0      	b.n	800656a <scalbn+0x7a>
 80065a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065ac:	3236      	adds	r2, #54	; 0x36
 80065ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	2200      	movs	r2, #0
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <scalbn+0xe8>)
 80065be:	e7b2      	b.n	8006526 <scalbn+0x36>
 80065c0:	c2f8f359 	.word	0xc2f8f359
 80065c4:	01a56e1f 	.word	0x01a56e1f
 80065c8:	8800759c 	.word	0x8800759c
 80065cc:	7e37e43c 	.word	0x7e37e43c
 80065d0:	43500000 	.word	0x43500000
 80065d4:	ffff3cb0 	.word	0xffff3cb0
 80065d8:	3c900000 	.word	0x3c900000

080065dc <copysign>:
 80065dc:	ec51 0b10 	vmov	r0, r1, d0
 80065e0:	ee11 0a90 	vmov	r0, s3
 80065e4:	ee10 2a10 	vmov	r2, s0
 80065e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80065ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80065f0:	ea41 0300 	orr.w	r3, r1, r0
 80065f4:	ec43 2b10 	vmov	d0, r2, r3
 80065f8:	4770      	bx	lr
	...

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
